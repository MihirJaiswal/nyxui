{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-scanner-demo1",
  "type": "registry:example",
  "title": "Image Scanner Demo 1",
  "description": "Example showing a image scanner.",
  "dependencies": [
    "..",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://nyxui.vercel.app/r/image-scanner.json"
  ],
  "files": [
    {
      "path": "registry/example/image-scanner-demo1.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { ImageScanner } from \"../ui/image-scanner\"\nimport {\n  Activity,\n  Clock,\n  MapPin,\n  Shield,\n  Maximize2,\n  MoreVertical,\n  Signal,\n} from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n\n\nexport const ImageScannerDemo1 = () => {\n  const [selectedCamera, setSelectedCamera] = useState(0)\n  const [alertLevel, setAlertLevel] = useState<\"normal\" | \"warning\" | \"critical\">(\"normal\")\n  const [scanTrigger, setScanTrigger] = useState(false)\n\n  const cameras = [\n    {\n      id: 1,\n      name: \"Main Entrance\",\n      location: \"Building A - Floor 1\",\n      image: \"/assets/images/image-scanner/entrance.jpg\",\n      lastScan: \"2 min ago\",\n      alertLevel: \"normal\" as const,\n      fps: 30,\n    },\n    {\n      id: 2,\n      name: \"Parking Garage\",\n      location: \"Underground Level\",\n      image: \"/assets/images/image-scanner/parking.png\",\n      lastScan: \"1 min ago\",\n      alertLevel: \"warning\" as const,\n      fps: 25,\n    },\n    {\n      id: 3,\n      name: \"Server Room\",\n      location: \"Building B - Floor 3\",\n      image: \"/assets/images/image-scanner/serverroom.png\",\n      lastScan: \"3 min ago\",\n      alertLevel: \"critical\" as const,\n      fps: 30,\n    },\n    {\n      id: 4,\n      name: \"Reception Area\",\n      location: \"Building A - Floor 1\",\n      image: \"/assets/images/image-scanner/reception.png\",\n      lastScan: \"30 sec ago\",\n      alertLevel: \"normal\" as const,\n      fps: 30,\n    },\n  ]\n\n  const triggerManualScan = () => {\n    setScanTrigger(prev => !prev)\n  }\n\n  const getScanColor = (level: \"critical\" | \"warning\" | \"normal\") => {\n    switch (level) {\n      case \"critical\": return \"red\"\n      case \"warning\": return \"amber\"\n      default: return \"emerald\"\n    }\n  }\n\n  const getScanType = (cameraId: number) => {\n    switch (cameraId) {\n      case 1: return \"matrix\"\n      case 2: return \"radar\"\n      case 3: return \"grid\"\n      case 4: return \"pulse\"\n      default: return \"default\"\n    }\n  }\n\n  const getBadgeVariant = (level: \"critical\" | \"warning\" | \"normal\") => {\n    switch (level) {\n      case \"critical\": return \"destructive\"\n      case \"warning\": return \"secondary\"\n      default: return \"default\"\n    }\n  }\n\n  return (\n    <div className=\"bg-white shadow-xl dark:bg-black/70 border md:scale-90 relative border-neutral-200 dark:border-neutral-700 rounded-sm p-3 sm:px-4 py-6 text-neutral-900 dark:text-white\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 sm:mb-8 gap-4\">\n          <div className=\"flex items-center gap-3 sm:gap-4\">\n            <div className=\"p-2 sm:p-3 bg-blue-600/20 rounded-sm sm:rounded-sm border border-blue-500/30\">\n              <Shield className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-500 dark:text-blue-400\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl sm:text-2xl uppercase font-bold bg-gradient-to-r from-neutral-900 to-neutral-600 dark:from-white dark:to-neutral-300 bg-clip-text text-transparent\">\n                Click on the image to scan\n              </h1>\n              <p className=\"text-neutral-500 dark:text-neutral-400 flex items-center gap-2 mt-1 text-sm\">\n                <Signal className=\"w-4 h-4\" />\n                Scan images automatically\n              </p>\n            </div>\n          </div>\n\n          <Badge variant={getBadgeVariant(alertLevel)} className=\"px-3 sm:px-4 py-1 sm:py-2 text-xs sm:text-sm font-semibold\">\n            {alertLevel.toUpperCase()}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 sm:gap-6\">\n          {/* Main Camera Feed */}\n          <div className=\"xl:col-span-2\">\n            <Card className=\"bg-neutral-50 dark:bg-neutral-800/50 border-neutral-200 dark:border-neutral-700 backdrop-blur-sm rounded-sm\">\n              <CardHeader className=\"pb-3 sm:pb-4\">\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-lg sm:text-xl font-bold text-neutral-900 dark:text-white truncate\">\n                      {cameras[selectedCamera].name}\n                    </CardTitle>\n                    <p className=\"text-neutral-500 dark:text-neutral-400 text-sm flex items-center gap-2 mt-1\">\n                      <MapPin className=\"w-4 h-4 flex-shrink-0\" />\n                      <span className=\"truncate\">{cameras[selectedCamera].location}</span>\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Badge variant=\"outline\" className=\"border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 text-xs\">\n                      {cameras[selectedCamera].fps} FPS\n                    </Badge>\n                    <Button onClick={triggerManualScan} className=\"bg-blue-600 hover:bg-blue-700 text-xs sm:text-sm\" size=\"sm\">\n                      <Activity className=\"w-4 h-4 sm:mr-2\" />\n                      <span className=\"hidden sm:inline\">Manual Scan</span>\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-neutral-300 dark:border-neutral-600 bg-transparent p-2\">\n                      <Maximize2 className=\"w-4 h-4 text-neutral-700 dark:text-white\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"px-3 sm:px-6 overflow-hidden\">\n                <div className=\"apesct-square md:aspect-video md:h-78 md:w-auto bg-neutral-100 dark:bg-neutral-900 overflow-hidden border border-neutral-200 dark:border-neutral-700\">\n                  <ImageScanner\n                    image={cameras[selectedCamera].image}\n                    alt={`${cameras[selectedCamera].name} camera feed`}\n                    autoScan\n                    scanDelay={5}\n                    scanSpeed={3}\n                    scanColor={getScanColor(cameras[selectedCamera].alertLevel)}\n                    scanType={getScanType(cameras[selectedCamera].id)}\n                    scanIntensity=\"high\"\n                    loop\n                    triggerScan={scanTrigger}\n                    className=\"w-full h-full\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Camera List */}\n          <div className=\"xl:col-span-1\">\n            <Card className=\"bg-neutral-50 dark:bg-neutral-800/50 border-neutral-200 dark:border-neutral-700 backdrop-blur-sm rounded-sm\">\n              <CardContent className=\"px-3 sm:px-4\">\n                <div className=\"space-y-2 sm:space-y-4\">\n                  {cameras.map((camera, index) => (\n                    <div\n                      key={camera.id}\n                      className={`p-3 sm:p-4.5 rounded-sm cursor-pointer transition-all border ${\n                        selectedCamera === index\n                          ? \"bg-blue-50 dark:bg-blue-600/20 border-blue-200 dark:border-blue-500 shadow-sm dark:shadow-blue-500/20\"\n                          : \"bg-white dark:bg-neutral-800/50 border-neutral-200 dark:border-zinc-600 hover:bg-neutral-50 dark:hover:bg-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-500\"\n                      }`}\n                      onClick={() => setSelectedCamera(index)}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                          <div\n                            className={`w-3 h-3 rounded-full flex-shrink-0 ${\n                              camera.alertLevel === \"critical\"\n                                ? \"bg-red-500 animate-pulse\"\n                                : camera.alertLevel === \"warning\"\n                                  ? \"bg-amber-500\"\n                                  : \"bg-emerald-500\"\n                            }`}\n                          />\n                          <p className=\"font-medium text-neutral-900 dark:text-white text-sm truncate\">\n                            {camera.name}\n                          </p>\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0 flex-shrink-0\">\n                          <MoreVertical className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-neutral-500 dark:text-neutral-400 flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          {camera.lastScan}\n                        </span>\n                        <Badge variant={getBadgeVariant(camera.alertLevel)} className=\"text-xs\">\n                          {camera.alertLevel}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}",
      "type": "registry:example",
      "target": "components/image-scanner-demo1.tsx"
    },
    {
      "path": "components/ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-xl text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background text-foreground shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        rainbow:\n          \"group relative animate-rainbow cursor-pointer border-0 bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] bg-[length:200%] text-primary-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))] dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n        \"rainbow-outline\":\n          \"group relative animate-rainbow cursor-pointer border-0 border-input bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] bg-[length:200%] px-4 text-foreground shadow-sm [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))] dark:bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-xl px-3 text-xs\",\n        lg: \"h-11 rounded-xl px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ninterface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        data-slot=\"button\"\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants, type ButtonProps };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"../../lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}