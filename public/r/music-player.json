{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "music-player",
  "type": "registry:ui",
  "title": "Music Player",
  "description": "A music player that that provide several effects.",
  "dependencies": [
    "lucide-react",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ui/music-player.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Play, Pause, SkipForward, SkipBack, Heart, Repeat, Shuffle, Volume2, VolumeX, MoreHorizontal, Maximize2, Minimize2, List, X } from 'lucide-react';\nimport Image from \"next/image\";\n\nexport interface Track {\n  id: string;\n  title: string;\n  artist: string;\n  album: string;\n  artwork: string;\n  duration: number;\n  url?: string;\n}\n\nexport interface MusicPlayerProps {\n  theme?: \"default\" | \"spotify\" | \"cosmic\" | \"midnight\";\n  currentTrack?: Track;\n  queue?: Track[];\n  currentIndex?: number;\n  initialTime?: number;\n  className?: string;\n  autoPlay?: boolean;\n  showEqualizer?: boolean;\n  onPlayPause?: (isPlaying: boolean) => void;\n  onTimeChange?: (time: number) => void;\n  onTrackEnd?: () => void;\n  onTrackChange?: (track: Track, index: number) => void;\n  onVolumeChange?: (volume: number) => void;\n}\n\nconst defaultTrack: Track = {\n  id: \"default\",\n  title: \"Sample Track\",\n  artist: \"Sample Artist\",\n  album: \"Sample Album\",\n  artwork: \"/placeholder.svg?height=300&width=300\",\n  duration: 180,\n};\n\nexport const MusicPlayer = ({\n  theme = \"default\",\n  currentTrack,\n  queue = [],\n  currentIndex = 0,\n  initialTime = 0,\n  className = \"\",\n  autoPlay = false,\n  showEqualizer = true,\n  onPlayPause,\n  onTimeChange,\n  onTrackEnd,\n  onTrackChange,\n  onVolumeChange,\n}: MusicPlayerProps) => {\n  const track = currentTrack || defaultTrack;\n  const [isPlaying, setIsPlaying] = useState(autoPlay);\n  const [currentTime, setCurrentTime] = useState(initialTime);\n  const [volume, setVolume] = useState(75);\n  const [isMuted, setIsMuted] = useState(false);\n  const [liked, setLiked] = useState(false);\n  const [isShuffled, setIsShuffled] = useState(false);\n  const [repeatMode, setRepeatMode] = useState<\"off\" | \"all\" | \"one\">(\"off\");\n  const [mounted, setMounted] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showVolumeSlider, setShowVolumeSlider] = useState(false);\n  // <CHANGE> Added queue panel state\n  const [showQueue, setShowQueue] = useState(false);\n  const [hoverTime, setHoverTime] = useState<number | null>(null);\n  const [equalizerBars, setEqualizerBars] = useState(Array(12).fill(0));\n  const progressRef = useRef<HTMLDivElement>(null);\n  const volumeRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.target instanceof HTMLInputElement) return;\n      switch (e.code) {\n        case \"Space\":\n          e.preventDefault();\n          togglePlay();\n          break;\n        case \"ArrowLeft\":\n          e.preventDefault();\n          setCurrentTime((prev) => Math.max(0, prev - 10));\n          break;\n        case \"ArrowRight\":\n          e.preventDefault();\n          setCurrentTime((prev) => Math.min(track.duration, prev + 10));\n          break;\n        case \"ArrowUp\":\n          e.preventDefault();\n          setVolume((prev) => Math.min(100, prev + 10));\n          break;\n        case \"ArrowDown\":\n          e.preventDefault();\n          setVolume((prev) => Math.max(0, prev - 10));\n          break;\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => window.removeEventListener(\"keydown\", handleKeyPress);\n  }, [track.duration]);\n\n  // Equalizer animation\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isPlaying && showEqualizer) {\n      interval = setInterval(() => {\n        setEqualizerBars((bars) => bars.map(() => Math.random() * 100));\n      }, 150);\n    } else {\n      setEqualizerBars(Array(12).fill(0));\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isPlaying, showEqualizer]);\n\n  // Time progression\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isPlaying) {\n      interval = setInterval(() => {\n        setCurrentTime((time) => {\n          if (time >= track.duration) {\n            handleTrackEnd();\n            return 0;\n          }\n          const newTime = time + 1;\n          if (onTimeChange) onTimeChange(newTime);\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isPlaying, track.duration, onTimeChange]);\n\n  const formatTime = (seconds: number) => {\n    const min = Math.floor(seconds / 60);\n    const sec = seconds % 60;\n    return `${min}:${sec < 10 ? \"0\" + sec : sec}`;\n  };\n\n  const togglePlay = () => {\n    const newPlayState = !isPlaying;\n    setIsPlaying(newPlayState);\n    if (onPlayPause) onPlayPause(newPlayState);\n  };\n\n  const handleTrackEnd = () => {\n    if (repeatMode === \"one\") {\n      setCurrentTime(0);\n      return;\n    }\n\n    if (repeatMode === \"all\" || currentIndex < queue.length - 1) {\n      const nextIndex = currentIndex + 1 >= queue.length ? 0 : currentIndex + 1;\n      if (onTrackChange && queue[nextIndex]) {\n        onTrackChange(queue[nextIndex], nextIndex);\n      }\n    } else {\n      setIsPlaying(false);\n    }\n    if (onTrackEnd) onTrackEnd();\n  };\n\n  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!progressRef.current) return;\n    const { left, width } = progressRef.current.getBoundingClientRect();\n    const clickPosition = e.clientX - left;\n    const percentage = Math.max(0, Math.min(1, clickPosition / width));\n    const newTime = Math.floor(track.duration * percentage);\n    setCurrentTime(newTime);\n    if (onTimeChange) onTimeChange(newTime);\n  };\n\n  const handleProgressHover = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!progressRef.current) return;\n    const { left, width } = progressRef.current.getBoundingClientRect();\n    const hoverPosition = e.clientX - left;\n    const percentage = Math.max(0, Math.min(1, hoverPosition / width));\n    const hoverTimeValue = Math.floor(track.duration * percentage);\n    setHoverTime(hoverTimeValue);\n  };\n\n  const handleVolumeChange = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!volumeRef.current) return;\n    const { top, height } = volumeRef.current.getBoundingClientRect();\n    const clickPosition = e.clientY - top;\n    const percentage = Math.max(0, Math.min(1, 1 - clickPosition / height));\n    const newVolume = Math.floor(percentage * 100);\n    setVolume(newVolume);\n    setIsMuted(newVolume === 0);\n    if (onVolumeChange) onVolumeChange(newVolume);\n  };\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    if (onVolumeChange) onVolumeChange(isMuted ? volume : 0);\n  };\n\n  const toggleVolumeSlider = () => {\n    setShowVolumeSlider(!showVolumeSlider);\n  };\n\n  const toggleRepeat = () => {\n    const modes: (\"off\" | \"all\" | \"one\")[] = [\"off\", \"all\", \"one\"];\n    const currentModeIndex = modes.indexOf(repeatMode);\n    const nextMode = modes[(currentModeIndex + 1) % modes.length];\n    setRepeatMode(nextMode);\n  };\n\n  const skipTrack = (direction: \"next\" | \"prev\") => {\n    if (!queue.length) return;\n\n    let nextIndex;\n    if (direction === \"next\") {\n      nextIndex = isShuffled\n        ? Math.floor(Math.random() * queue.length)\n        : (currentIndex + 1) % queue.length;\n    } else {\n      nextIndex = isShuffled\n        ? Math.floor(Math.random() * queue.length)\n        : currentIndex === 0\n          ? queue.length - 1\n          : currentIndex - 1;\n    }\n\n    if (onTrackChange && queue[nextIndex]) {\n      onTrackChange(queue[nextIndex], nextIndex);\n    }\n  };\n\n  const selectTrackFromQueue = (track: Track, index: number) => {\n    if (onTrackChange) {\n      onTrackChange(track, index);\n    }\n    setShowQueue(false);\n  };\n\n  const getThemeStyles = () => {\n    const baseStyles = \"transition-all duration-500 backdrop-blur-sm\";\n    switch (theme) {\n      case \"spotify\":\n        return `bg-green-50 dark:bg-black text-green-600 dark:text-green-500 border-2 border-green-400/40 shadow-2xl shadow-green-500/20 ${baseStyles}`;\n      case \"cosmic\":\n        return `bg-gradient-to-br from-violet-900/95 via-purple-800/95 to-fuchsia-900/95 text-white border border-violet-400/40 shadow-2xl shadow-purple-500/20 ${baseStyles}`;\n      case \"midnight\":\n        return `bg-gradient-to-br from-slate-200 via-gray-200 to-zinc-200 dark:from-slate-900/95 dark:via-neutral-800/95 dark:to-zinc-900/95 text-black dark:text-white border border-slate-400/40 shadow-2xl shadow-slate-500/20 ${baseStyles}`;\n      default:\n        return `bg-gradient-to-br from-blue-100 via-cyan-100 to-teal-100 dark:from-blue-900/95 dark:via-cyan-800/95 dark:to-teal-900/95 text-black dark:text-white border border-blue-400/40 shadow-2xl shadow-cyan-500/20 ${baseStyles}`;\n    }\n  };\n\n  const getAccentColor = () => {\n    switch (theme) {\n      case \"spotify\":\n        return \"bg-green-500\";\n      case \"cosmic\":\n        return \"bg-violet-400\";\n      case \"midnight\":\n        return \"bg-zinc-400 dark:slate-400\";\n      default:\n        return \"bg-cyan-400\";\n    }\n  };\n\n  const getEqualizerColor = () => {\n    switch (theme) {\n      case \"spotify\":\n        return \"from-green-300 to-green-500\";\n      case \"cosmic\":\n        return \"from-violet-300 to-purple-500\";\n      case \"midnight\":\n        return \"from-slate-200 to-gray-400\";\n      default:\n        return \"from-indigo-300 to-purple-500\";\n    }\n  };\n\n  if (!mounted) return null;\n\n  return (\n    <div className=\"relative\">\n      <div\n        className={`${getThemeStyles()} ${className} rounded-2xl overflow-hidden shadow-lg w-full max-w-md mx-auto min-w-0`}\n      >\n        {/* Artwork Section */}\n        <div className=\"relative\">\n          <div\n            className={`w-full transition-all duration-500 ${isExpanded ? \"h-96\" : \"h-48 sm:h-60\"} relative overflow-hidden`}\n          >\n            <Image\n              src={track.artwork || \"/placeholder.svg\"}\n              alt={`${track.title} by ${track.artist}`}\n              fill\n              loading=\"lazy\"\n              className=\"w-full h-full object-cover\"\n            />\n            <div\n              className={`absolute inset-0 bg-gradient-to-t ${isExpanded ? \"from-transparent\" : \"from-black/80\"} via-transparent to-transparent`}\n            ></div>\n            {/* Equalizer Overlay */}\n            {showEqualizer && isPlaying && (\n              <div className=\"absolute bottom-2 sm:bottom-4 left-2 sm:left-4 flex items-end gap-0.5 sm:gap-1 opacity-80\">\n                {equalizerBars.map((height, i) => (\n                  <div\n                    key={i}\n                    className={`w-1 sm:w-1.5 bg-gradient-to-t ${getEqualizerColor()} rounded-full transition-all duration-150 shadow-sm`}\n                    style={{ height: `${Math.max(4, height * 0.3)}px` }}\n                  />\n                ))}\n              </div>\n            )}\n\n            {/* Expand Button */}\n            <button\n              onClick={() => setIsExpanded(!isExpanded)}\n              className=\"absolute top-2 sm:top-4 right-2 sm:right-4 p-1.5 sm:p-2 bg-black/40 rounded-full backdrop-blur-sm hover:bg-black/60 transition-colors\"\n            >\n              {isExpanded ? (\n                <Minimize2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              ) : (\n                <Maximize2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"p-4 sm:p-6\">\n          <div className=\"flex items-start justify-between mb-4 sm:mb-6\">\n            <div className=\"flex-1 min-w-0 pr-2\">\n              <h1 className=\"text-lg sm:text-xl font-bold mb-1 truncate\">{track.title}</h1>\n              <p className=\"text-xs sm:text-sm opacity-70 truncate\">\n                {track.artist} • {track.album}\n              </p>\n            </div>\n            <div className=\"flex items-center gap-1 sm:gap-2 flex-shrink-0\">\n              <button\n                onClick={() => setLiked(!liked)}\n                className={`p-1.5 sm:p-2 rounded-full transition-all hover:scale-110 duration-300 ${\n                  liked\n                    ? \"text-red-500 drop-shadow-lg\"\n                    : \"text-black/40 dark:text-white/60 hover:text-white\"\n                }`}\n              >\n                <Heart\n                  className={`h-4 w-4 sm:h-5 sm:w-5 ${liked ? \"fill-current drop-shadow-sm\" : \"\"}`}\n                />\n              </button>\n              <button className=\"p-1.5 sm:p-2 rounded-full text-black/40 hover:text-black/60 dark:text-white/60 dark:hover:text-white transition-colors\">\n                <MoreHorizontal className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"mb-4 sm:mb-6\">\n            <div\n              ref={progressRef}\n              className=\"relative h-1.5 sm:h-2 bg-black/10 dark:bg-white/10 rounded-full overflow-hidden cursor-pointer group backdrop-blur-sm border border-white/5\"\n              onClick={handleProgressClick}\n              onMouseMove={handleProgressHover}\n              onMouseLeave={() => setHoverTime(null)}\n            >\n              <div\n                className={`absolute top-0 left-0 h-full ${getAccentColor().split(\" \")[0]} rounded-full transition-all`}\n                style={{ width: `${(currentTime / track.duration) * 100}%` }}\n              />\n              <div\n                className=\"absolute top-1/2 -translate-y-1/2 w-3 h-3 sm:w-4 sm:h-4 bg-white rounded-full opacity-0 group-hover:opacity-100 transition-all shadow-lg border-2 border-white/20\"\n                style={{\n                  left: `${(currentTime / track.duration) * 100}%`,\n                  marginLeft: \"-6px\",\n                }}\n              />\n              {hoverTime !== null && (\n                <div\n                  className=\"absolute -top-8 sm:-top-10 bg-black/90 text-white text-xs px-2 sm:px-3 py-1 sm:py-1.5 rounded-lg pointer-events-none backdrop-blur-sm border border-white/10\"\n                  style={{\n                    left: `${(hoverTime / track.duration) * 100}%`,\n                    transform: \"translateX(-50%)\",\n                  }}\n                >\n                  {formatTime(hoverTime)}\n                </div>\n              )}\n            </div>\n            <div className=\"flex justify-between mt-1 sm:mt-2 text-xs opacity-70\">\n              <span>{formatTime(currentTime)}</span>\n              <span>{formatTime(track.duration)}</span>\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"flex items-center justify-between\">\n            {/* Left Controls */}\n            <div className=\"flex items-center gap-1 sm:gap-3 flex-shrink-0\">\n              <button\n                onClick={() => setIsShuffled(!isShuffled)}\n                className={`p-1.5 sm:p-2 rounded-full transition-all hover:scale-110 hidden sm:block ${\n                  isShuffled\n                    ? `text-black dark:text-white`\n                    : \"text-black/80 hover:text-black dark:text-white/80 dark:hover:text-white\"\n                }`}\n              >\n                <Shuffle className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              </button>\n              <button\n                onClick={toggleRepeat}\n                className={`p-1.5 sm:p-2 rounded-full transition-all hover:scale-110 relative ${\n                  repeatMode !== \"off\"\n                    ? \"text-black dark:text-white\"\n                    : \"text-black/80 hover:text-black dark:text-white/80 dark:hover:text-white\"\n                }`}\n              >\n                <Repeat className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                {repeatMode === \"one\" && (\n                  <span className=\"absolute -top-0.5 sm:-top-1 -right-0.5 sm:-right-1 w-2.5 h-2.5 sm:w-3 sm:h-3 bg-white text-black text-xs rounded-full flex items-center justify-center font-bold\">\n                    1\n                  </span>\n                )}\n              </button>\n            </div>\n\n            {/* Center Controls */}\n            <div className=\"flex items-center gap-2 sm:gap-4 flex-shrink-0\">\n              <button\n                onClick={() => skipTrack(\"prev\")}\n                className={`p-1.5 sm:p-2 transition-all hover:scale-110 ${\n                  queue.length > 0 \n                    ? \"text-black/80 hover:text-black dark:text-white/80 dark:hover:text-white\" \n                    : \"text-black/40 dark:text-white/40 cursor-not-allowed\"\n                }`}\n                disabled={queue.length === 0}\n              >\n                <SkipBack className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n              </button>\n\n              <button\n                onClick={togglePlay}\n                className={`p-3 sm:p-4 rounded-full ${getAccentColor()} text-black hover:scale-105 transition-all duration-300 hover:shadow-xl flex-shrink-0`}\n              >\n                {isPlaying ? (\n                  <Pause className=\"h-5 w-5 sm:h-6 sm:w-6 fill-black\" />\n                ) : (\n                  <Play className=\"h-5 w-5 sm:h-6 sm:w-6 ml-0.5 fill-black\" />\n                )}\n              </button>\n\n              <button\n                onClick={() => skipTrack(\"next\")}\n                className={`p-1.5 sm:p-2 transition-all hover:scale-110 ${\n                  queue.length > 0 \n                    ? \"text-black/80 hover:text-black dark:text-white/80 dark:hover:text-white\" \n                    : \"text-black/40 dark:text-white/40 cursor-not-allowed\"\n                }`}\n                disabled={queue.length === 0}\n              >\n                <SkipForward className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n              </button>\n            </div>\n\n            {/* Right Controls */}\n            <div className=\"flex items-center gap-1 sm:gap-2 relative flex-shrink-0\">\n              <button\n                onClick={toggleVolumeSlider}\n                className=\"p-1.5 sm:p-2 rounded-full text-black/80 hover:text-black dark:text-white/80 dark:hover:text-white transition-all hover:scale-110\"\n              >\n                {isMuted || volume === 0 ? (\n                  <VolumeX className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                ) : (\n                  <Volume2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                )}\n              </button>\n\n              {/* Vertical Volume Slider */}\n              {showVolumeSlider && (\n                <div className=\"absolute bottom-full mb-2 right-0 bg-black/90 p-2 sm:p-3 rounded-xl backdrop-blur-sm border border-white/10 z-10\">\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"text-xs text-white/70\">\n                      {isMuted ? 0 : volume}%\n                    </div>\n                    <div\n                      ref={volumeRef}\n                      className=\"w-1.5 sm:w-2 h-16 sm:h-20 bg-white/20 rounded-full cursor-pointer border border-white/5 relative\"\n                      onClick={handleVolumeChange}\n                    >\n                      <div\n                        className={`absolute bottom-0 w-full ${getAccentColor().split(\" \")[0]} rounded-full transition-all`}\n                        style={{ height: `${isMuted ? 0 : volume}%` }}\n                      />\n                    </div>\n                    <button\n                      onClick={toggleMute}\n                      className=\"p-1 rounded text-white/60 hover:text-white transition-colors\"\n                    >\n                      {isMuted ? (\n                        <VolumeX className=\"h-2.5 w-2.5 sm:h-3 sm:w-3\" />\n                      ) : (\n                        <Volume2 className=\"h-2.5 w-2.5 sm:h-3 sm:w-3\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              )}\n              \n              <button \n                onClick={() => setShowQueue(!showQueue)}\n                className={`p-1.5 sm:p-2 rounded-full transition-all hover:scale-110 hidden sm:block ${\n                  showQueue || queue.length > 0\n                    ? \"text-black dark:text-white\" \n                    : \"text-black/60 dark:text-white/60\"\n                } ${queue.length === 0 ? \"opacity-50\" : \"\"}`}\n                disabled={queue.length === 0}\n              >\n                <List className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {showQueue && queue.length > 0 && (\n        <div className={`${getThemeStyles()} rounded-2xl mt-4 overflow-hidden shadow-lg w-full max-w-md mx-auto`}>\n          <div className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">Queue ({queue.length})</h3>\n              <button\n                onClick={() => setShowQueue(false)}\n                className=\"p-1.5 rounded-full text-black/60 hover:text-black dark:text-white/60 dark:hover:text-white transition-colors\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n            \n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {queue.map((queueTrack, index) => (\n                <div\n                  key={queueTrack.id}\n                  onClick={() => selectTrackFromQueue(queueTrack, index)}\n                  className={`flex items-center gap-3 p-2 rounded-lg cursor-pointer transition-all hover:bg-black/5 dark:hover:bg-white/5 ${\n                    index === currentIndex ? \"bg-black/10 dark:bg-white/10\" : \"\"\n                  }`}\n                >\n                  <div className=\"w-10 h-10 rounded-md overflow-hidden flex-shrink-0\">\n                    <Image\n                      src={queueTrack.artwork || \"/placeholder.svg\"}\n                      alt={queueTrack.title}\n                      width={40}\n                      height={40}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className={`text-sm font-medium truncate ${\n                      index === currentIndex ? \"text-black dark:text-white\" : \"text-black/80 dark:text-white/80\"\n                    }`}>\n                      {queueTrack.title}\n                    </p>\n                    <p className=\"text-xs opacity-60 truncate\">\n                      {queueTrack.artist}\n                    </p>\n                  </div>\n                  <div className=\"text-xs opacity-50 flex-shrink-0\">\n                    {formatTime(queueTrack.duration)}\n                  </div>\n                  {index === currentIndex && (\n                    <div className={`w-2 h-2 rounded-full ${getAccentColor()} flex-shrink-0`} />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/music-player.tsx"
    }
  ]
}