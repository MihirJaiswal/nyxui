{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "lamp-heading",
  "type": "registry:ui",
  "title": "Lamp Heading",
  "description": "A heading component with a lamp effect.",
  "dependencies": [
    "motion",
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/lamp-heading.tsx",
      "content": "\"use client\"\nimport { useRef, useEffect, useState, useCallback, useMemo } from \"react\"\nimport { motion } from \"motion/react\"\nimport { cn } from \"../../lib/utils\"\n\ninterface Particle {\n  id: number\n  x: number\n  y: number\n  size: number\n  opacity: number\n  baseOpacity: number\n  phase: number\n  phaseMultiplier: number\n  speedMultiplier: number\n}\n\ninterface LampHeadingProps {\n  text: string\n  className?: string\n  gradientColors?: {\n    from: string\n    via?: string\n    to: string\n  }\n  lineHeight?: number\n  lampHeight?: number\n  glowIntensity?: number\n  glowSize?: number\n  animationSpeed?: number\n  direction?: \"above\" | \"below\"\n  showParticles?: boolean\n  showLightRays?: boolean\n  interactive?: boolean\n  textSize?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\"\n  pulseEffect?: boolean\n  particleCount?: number\n}\n\nconst TEXT_SIZE_CLASSES = {\n  sm: \"text-sm\",\n  md: \"text-base\", \n  lg: \"text-lg\",\n  xl: \"text-xl\",\n  \"2xl\": \"text-2xl\",\n  \"3xl\": \"text-3xl\",\n  \"4xl\": \"text-4xl\",\n} as const\n\nconst TEXT_SIZE_OFFSETS = {\n  sm: 32, md: 36, lg: 40, xl: 40, \"2xl\": 44, \"3xl\": 48, \"4xl\": 52\n} as const\n\nexport const LampHeading = ({\n  text,\n  className,\n  gradientColors = { from: \"#FF33C7\", via: \"#CD35FF\", to: \"#4533F7\" },\n  lineHeight = 4,\n  lampHeight = 80,\n  glowIntensity = 1.0,\n  glowSize = 30,\n  animationSpeed = 4,\n  direction = \"below\",\n  showParticles = true,\n  showLightRays = false,\n  interactive = true,\n  textSize = \"4xl\",\n  pulseEffect = true,\n  particleCount = 8,\n}: LampHeadingProps) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [particles, setParticles] = useState<Particle[]>([])\n  const [isHovered, setIsHovered] = useState(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const lastUpdateRef = useRef<number>(0)\n  const gradientString = useMemo(() => \n    gradientColors.via\n      ? `linear-gradient(90deg, ${gradientColors.from}, ${gradientColors.via}, ${gradientColors.to})`\n      : `linear-gradient(90deg, ${gradientColors.from}, ${gradientColors.to})`,\n    [gradientColors]\n  )\n\n  const isBelow = direction === \"below\"\n\n  const generateParticles = useCallback(() => {\n    if (!showParticles) return []\n    \n    return Array.from({ length: particleCount }, (_, i) => {\n      const baseOpacity = Math.random() * 0.25 + 0.35\n      return {\n        id: i,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        size: Math.random() * 1.2 + 0.6,\n        opacity: baseOpacity,\n        baseOpacity,\n        phase: Math.random() * Math.PI * 2,\n        phaseMultiplier: Math.random() * 0.1 + 0.05,\n        speedMultiplier: Math.random() * 0.008 + 0.004,\n      }\n    })\n  }, [showParticles, particleCount])\n\n  useEffect(() => {\n    setParticles(generateParticles())\n  }, [generateParticles])\n\n  // Animate particles\n  useEffect(() => {\n    if (!showParticles || particles.length === 0) return\n\n    const animateParticles = (currentTime: number) => {\n      if (currentTime - lastUpdateRef.current < 100) {\n        animationFrameRef.current = requestAnimationFrame(animateParticles)\n        return\n      }\n      \n      lastUpdateRef.current = currentTime\n      const time = currentTime * 0.0005\n      \n      setParticles(prev => prev.map(particle => ({\n        ...particle,\n        x: (particle.x + particle.speedMultiplier * 100) % 100,\n        opacity: Math.max(0.15, Math.min(0.6, \n          particle.baseOpacity + Math.sin(time + particle.phase) * particle.phaseMultiplier\n        ))\n      })))\n      \n      animationFrameRef.current = requestAnimationFrame(animateParticles)\n    }\n\n    animationFrameRef.current = requestAnimationFrame(animateParticles)\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current)\n      }\n    }\n  }, [particles.length, showParticles])\n\n  // Add particle animations to DOM\n  useEffect(() => {\n    if (!showParticles) return\n\n    const style = document.createElement('style')\n    style.textContent = particles.map(particle => `\n      @keyframes particleFloat-${particle.id} {\n        0%, 100% { transform: translate3d(0, 0, 0) scale(1); }\n        33% { transform: translate3d(${Math.sin(particle.id) * 3}px, ${isBelow ? -8 : 8}px, 0) scale(1.05); }\n        66% { transform: translate3d(${Math.sin(particle.id + 1) * 2}px, ${isBelow ? -4 : 4}px, 0) scale(0.95); }\n      }\n    `).join('')\n    \n    document.head.appendChild(style)\n    return () => {\n      if (document.head.contains(style)) {\n        document.head.removeChild(style)\n      }\n    }\n  }, [particles, showParticles, isBelow])\n\n  // Create radial gradient helper\n  const createRadialGradient = useCallback((opacities: string[], size = \"120% 100%\") => {\n    const position = isBelow ? \"center top\" : \"center bottom\"\n    const { from, via, to } = gradientColors\n    \n    // Match original gradient distribution\n    const stops = opacities.map((opacity, i) => {\n      const percentage = i === 0 ? 0 :\n                        i === 1 ? 10 :\n                        i === 2 ? 25 :\n                        i === 3 ? 45 :\n                        i === 4 ? 65 :\n                        i === 5 ? 80 :\n                        i === 6 ? 90 :\n                        100\n      \n      const color = i === 0 ? from :\n                   i === 1 && via ? via :\n                   to\n      \n      return `${color}${opacity} ${percentage}%`\n    }).join(', ')\n    \n    return `radial-gradient(ellipse ${size} at ${position}, ${stops})`\n  }, [gradientColors, isBelow])\n\n  // Animation variants\n  const flowAnimation = useMemo(() => ({\n    animate: {\n      backgroundPosition: [\"0% 50%\", \"200% 50%\"],\n      transition: {\n        duration: animationSpeed,\n        ease: \"linear\",\n        repeat: Infinity,\n      },\n    },\n  }), [animationSpeed])\n\n  const pulseAnimation = useMemo(() => \n    pulseEffect ? {\n      animate: {\n        scale: [1, 1.02, 1],\n        opacity: [0.95, 1, 0.95],\n        transition: {\n          duration: animationSpeed * 0.6,\n          ease: \"easeInOut\",\n          repeat: Infinity,\n        },\n      },\n    } : {},\n    [pulseEffect, animationSpeed]\n  )\n\n  const lightRayVariants = useMemo(() => ({\n    animate: {\n      opacity: [0.6, 1, 0.6],\n      scaleY: [0.95, 1.15, 0.95],\n      scaleX: [1, 1.05, 1],\n      transition: {\n        duration: animationSpeed * 1.2,\n        ease: \"easeInOut\",\n        repeat: Infinity,\n        staggerChildren: 0.1,\n      },\n    },\n  }), [animationSpeed])\n\n  // Common style props\n  const getPositionStyles = (top?: boolean) => ({\n    top: (isBelow && top) || (!isBelow && !top) ? `${lineHeight}px` : \"auto\",\n    bottom: (!isBelow && top) || (isBelow && !top) ? `${lineHeight}px` : \"auto\",\n    transform: 'translate3d(0, 0, 0)',\n    willChange: 'transform, opacity' as const,\n  })\n\n  // Render particles\n  const renderParticles = () => {\n    if (!showParticles) return null\n    \n    return (\n      <div\n        className=\"absolute pointer-events-none\"\n        style={{\n          width: \"100%\",\n          height: `${lampHeight + lineHeight + 20}px`,\n          top: isBelow ? \"0\" : `-${lampHeight + 10}px`,\n          transform: 'translate3d(0, 0, 0)',\n          willChange: 'contents',\n        }}\n      >\n        {particles.map((particle) => (\n          <div\n            key={particle.id}\n            className=\"absolute rounded-full pointer-events-none\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: `${particle.size}px`,\n              height: `${particle.size}px`,\n              background: gradientString,\n              opacity: particle.opacity,\n              filter: \"blur(0.3px)\",\n              boxShadow: `0 0 ${particle.size * 1.5}px ${gradientColors.from}30`,\n              transform: 'translate3d(0, 0, 0)',\n              willChange: 'transform, opacity',\n              animation: `particleFloat-${particle.id} ${2.5 + particle.id * 0.2}s ease-in-out infinite`,\n            }}\n          />\n        ))}\n      </div>\n    )\n  }\n\n  // Render light rays\n  const renderLightRays = () => {\n    if (!showLightRays) return null\n\n    const gradientDirection = isBelow ? \"to bottom\" : \"to top\"\n    const createLightGradient = (opacities: string[]) => {\n      const { from, via, to } = gradientColors\n      const stops = [\n        `${from}${opacities[0]} 0%`,\n        `${from}${opacities[1]} 8%`,\n        `${via || from}${opacities[2]} 18%`,\n        `${to}${opacities[3]} 30%`,\n        `${to}${opacities[4]} 45%`,\n        `${to}${opacities[5]} 65%`,\n        `${to}${opacities[6]} 80%`,\n        `${to}${opacities[7]} 90%`,\n      ].join(', ')\n      return `linear-gradient(${gradientDirection}, ${stops}, transparent 100%)`\n    }\n\n    return (\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {/* Main rays */}\n        {Array.from({ length: 8 }, (_, i) => (\n          <motion.div\n            key={i}\n            variants={lightRayVariants}\n            animate=\"animate\"\n            className=\"absolute\"\n            style={{\n              left: `${3 + i * 12}%`,\n              width: `${1.5 + Math.sin(i * 0.5) * 0.8}px`,\n              height: `${lampHeight * 0.6 + Math.sin(i) * 15}px`,\n              background: createLightGradient(['DD', 'BB', '99', '77', '44', '22', '11', '05']),\n              ...getPositionStyles(true),\n              transformOrigin: isBelow ? \"top\" : \"bottom\",\n              borderRadius: \"50px\",\n              filter: `blur(${0.4 + Math.sin(i) * 0.2}px)`,\n              opacity: 0.6 + Math.sin(i * 0.3) * 0.15,\n            }}\n            transition={{ delay: i * 0.04 }}\n          />\n        ))}\n        \n        {/* Soft rays */}\n        {Array.from({ length: 4 }, (_, i) => (\n          <motion.div\n            key={`soft-${i}`}\n            variants={lightRayVariants}\n            animate=\"animate\"\n            className=\"absolute\"\n            style={{\n              left: `${8 + i * 20}%`,\n              width: `${2.0 + Math.cos(i * 0.7)}px`,\n              height: `${lampHeight * 0.4 + Math.cos(i) * 12}px`,\n              background: createLightGradient(['88', '66', '44', '22', '11']),\n              ...getPositionStyles(true),\n              transformOrigin: isBelow ? \"top\" : \"bottom\",\n              borderRadius: \"50px\",\n              filter: `blur(${1.2 + Math.cos(i) * 0.4}px)`,\n              opacity: 0.3 + Math.cos(i * 0.4) * 0.15,\n            }}\n            transition={{\n              delay: i * 0.08,\n              duration: animationSpeed * 1.2,\n            }}\n          />\n        ))}\n      </div>\n    )\n  }\n\n  // Lamp cone layers configuration\n  const lampLayers = [\n    { \n      width: \"100%\", \n      height: lampHeight, \n      left: \"0\", \n      opacity: 0.8, \n      blur: glowSize * 1.2, \n      opacities: ['BB', '99', '77', '55', '33', '22', '11'], \n      duration: 1,\n      size: \"120% 100%\"\n    },\n    { \n      width: \"95%\", \n      height: lampHeight * 0.8, \n      left: \"2.5%\", \n      opacity: 0.9, \n      blur: glowSize * 0.8, \n      opacities: ['DD', 'BB', '99', '66', '44', '22'], \n      duration: 0.9,\n      size: \"110% 100%\"\n    },\n    { \n      width: \"85%\", \n      height: lampHeight * 0.6, \n      left: \"7.5%\", \n      opacity: 1.0, \n      blur: glowSize * 0.4, \n      opacities: ['EE', 'DD', 'BB', '88', '55'], \n      duration: 1.1,\n      size: \"100% 100%\"\n    },\n  ]\n\n  return (\n    <motion.div\n      ref={containerRef}\n      className={cn(\"flex flex-col items-start relative overflow-visible\", className)}\n      onMouseEnter={() => interactive && setIsHovered(true)}\n      onMouseLeave={() => interactive && setIsHovered(false)}\n    >\n      <h2 className={cn(\"font-bold tracking-wide relative z-20 mb-3\", className, TEXT_SIZE_CLASSES[textSize])}>\n        {text}\n      </h2>\n      \n      <div className=\"w-full relative\">\n        {renderParticles()}\n        {renderLightRays()}\n\n        {/* Lamp cone layers */}\n        {lampLayers.map((layer, index) => (\n          <motion.div\n            key={index}\n            variants={flowAnimation}\n            animate=\"animate\"\n            style={{\n              position: \"absolute\",\n              width: layer.width,\n              height: `${layer.height}px`,\n              left: layer.left,\n              background: createRadialGradient(layer.opacities, layer.size),\n              ...getPositionStyles(true),\n              filter: `blur(${layer.blur}px)`,\n              opacity: layer.opacity * glowIntensity * (isHovered ? (index === 0 ? 1.4 : index === 1 ? 1.3 : 1.2) : 1),\n            }}\n            transition={{ duration: animationSpeed * layer.duration }}\n          />\n        ))}\n\n        {/* Core light beam */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          className=\"hidden dark:block opacity-20\"\n          style={{\n            position: \"absolute\",\n            width: \"70%\",\n            height: `${lampHeight * 0.2}px`,\n            left: \"15%\",\n            background: `linear-gradient(${isBelow ? 'to bottom' : 'to top'}, ${gradientColors.from}FF 0%, ${gradientColors.via || gradientColors.from}EE 10%, ${gradientColors.to}DD 25%, ${gradientColors.to}BB 45%, ${gradientColors.to}88 65%, ${gradientColors.to}44 85%, transparent 100%)`,\n            ...getPositionStyles(true),\n            filter: `blur(${glowSize * 0.2}px)`,\n            opacity: glowIntensity * (isHovered ? 1.1 : 1),\n          }}\n          transition={{ duration: animationSpeed * 1.3 }}\n        />\n\n        {/* Main gradient underline */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          {...pulseAnimation}\n          className=\"w-full\"\n          style={{\n            height: `${lineHeight}px`,\n            background: gradientString,\n            backgroundSize: \"200% 100%\",\n            borderRadius: \"50px\",\n            boxShadow: `0 0 ${glowSize}px ${gradientColors.from}80, 0 0 ${glowSize * 2}px ${gradientColors.to}40, 0 0 ${glowSize * 3}px ${gradientColors.from}20`,\n            position: \"relative\",\n            zIndex: 10,\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform, opacity',\n          }}\n        />\n\n        {/* Inner highlight */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          className=\"bg-gradient-to-b from-white via-white/50 to-transparent\"\n          style={{\n            height: `${Math.max(1, lineHeight * 0.1)}px`,\n            width: \"98%\",\n            position: \"absolute\",\n            top: \"0px\",\n            left: \"1%\",\n            zIndex: 15,\n            borderRadius: \"100px\",\n            backgroundSize: \"200% 100%\",\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform',\n          }}\n          transition={{ duration: animationSpeed * 0.8 }}\n        />\n      </div>\n\n      {/* Ambient background glow */}\n      <div\n        className=\"absolute pointer-events-none\"\n        style={{\n          width: \"100%\",\n          height: `${lampHeight + lineHeight + 60}px`,\n          left: \"0%\",\n          top: isBelow \n            ? `${TEXT_SIZE_OFFSETS[textSize]}px`\n            : `-${lampHeight + (TEXT_SIZE_OFFSETS[textSize] - 24)}px`,\n          background: `radial-gradient(ellipse 100% 70% at center ${isBelow ? `${lineHeight}px` : `calc(100% - ${lineHeight + 10}px)`}, ${gradientColors.from}25 0%, ${gradientColors.via || gradientColors.to}20 25%, ${gradientColors.to}15 50%, ${gradientColors.to}10 70%, ${gradientColors.to}05 85%, transparent 100%)`,\n          opacity: isHovered ? 0.9 : 0.6,\n          transition: \"opacity 0.4s ease\",\n          transform: 'translate3d(0, 0, 0)',\n          willChange: 'opacity',\n        }}\n      />\n    </motion.div>\n  )\n}\n\nexport default LampHeading",
      "type": "registry:ui",
      "target": "components/ui/lamp-heading.tsx"
    }
  ]
}