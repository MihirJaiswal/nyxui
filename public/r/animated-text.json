{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-text",
  "type": "registry:ui",
  "title": "Animated Text",
  "description": "A versatile text animation component that offers multiple animation types. Perfect for adding dynamic text effects to your UI.",
  "dependencies": [
    "motion",
    "motion"
  ],
  "files": [
    {
      "path": "registry/ui/animated-text.tsx",
      "content": "\"use client\";\n\nimport { FC, useRef, useEffect } from \"react\";\nimport {\n  HTMLMotionProps,\n  motion,\n  useAnimation,\n  useInView,\n} from \"motion/react\";\n\ntype AnimationType =\n  | \"blink\"\n  | \"rise\"\n  | \"expand\"\n  | \"glide\"\n  | \"cascade\"\n  | \"flicker\"\n  | \"elastic\"\n  | \"float\";\n\ninterface Props extends HTMLMotionProps<\"div\"> {\n  text: string;\n  type?: AnimationType;\n  delay?: number;\n  duration?: number;\n  custom?: number;\n}\n\nconst animationVariants = {\n  blink: {\n    container: {\n      hidden: { opacity: 0 },\n      visible: (i: number = 1) => ({\n        opacity: 1,\n        transition: { staggerChildren: 0.05, delayChildren: i * 0.3 },\n      }),\n    },\n    child: {\n      visible: {\n        opacity: 1,\n        y: 0,\n        transition: {\n          type: \"spring\",\n          damping: 12,\n          stiffness: 100,\n          y: {\n            type: \"keyframes\",\n            times: [0, 0.5, 1],\n            values: [0, -10, 0],\n          },\n        },\n      },\n      hidden: { opacity: 0, y: 10 },\n    },\n  },\n  rise: {\n    container: {\n      hidden: { opacity: 0 },\n      visible: {\n        opacity: 1,\n        transition: { staggerChildren: 0.1, delayChildren: 0.2 },\n      },\n    },\n    child: {\n      visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },\n      hidden: { opacity: 0, y: 20 },\n    },\n  },\n  expand: {\n    container: {\n      hidden: { opacity: 0, scale: 0.8 },\n      visible: {\n        opacity: 1,\n        scale: 1,\n        transition: { staggerChildren: 0.05, delayChildren: 0.2 },\n      },\n    },\n    child: {\n      visible: {\n        opacity: 1,\n        scale: 1,\n        transition: {\n          type: \"spring\",\n          damping: 15,\n          stiffness: 400,\n          scale: {\n            type: \"keyframes\",\n            times: [0, 0.6, 1],\n            values: [0, 1.1, 1],\n          },\n        },\n      },\n      hidden: { opacity: 0, scale: 0 },\n    },\n  },\n  float: {\n    container: {\n      hidden: {},\n      visible: (i: number = 1) => ({\n        transition: { staggerChildren: 0.03, delayChildren: 0.2 * i },\n      }),\n    },\n    child: {\n      hidden: {\n        y: 50,\n        opacity: 0,\n      },\n      visible: {\n        y: 0,\n        opacity: 1,\n        transition: {\n          duration: 0.5,\n          ease: \"easeOut\",\n        },\n      },\n    },\n  },\n  glide: {\n    container: {\n      hidden: {},\n      visible: (i: number = 1) => ({\n        transition: { staggerChildren: 0.03, delayChildren: 0.2 * i },\n      }),\n    },\n    child: {\n      hidden: {\n        y: 20,\n        opacity: 0,\n      },\n      visible: {\n        y: 0,\n        opacity: 1,\n        transition: {\n          duration: 0.5,\n          ease: [0.22, 1, 0.36, 1],\n        },\n      },\n    },\n  },\n  elastic: {\n    container: {\n      hidden: {},\n      visible: (i: number = 1) => ({\n        transition: { staggerChildren: 0.03, delayChildren: 0.2 * i },\n      }),\n    },\n    child: {\n      hidden: {\n        y: 50,\n        opacity: 0,\n      },\n      visible: {\n        y: 0,\n        opacity: 1,\n        transition: {\n          type: \"spring\",\n          stiffness: 400,\n          damping: 10,\n        },\n      },\n    },\n  },\n  cascade: {\n    container: {\n      hidden: {},\n      visible: {},\n    },\n    child: {\n      hidden: {\n        opacity: 0,\n        y: `0.25em`,\n      },\n      visible: {\n        opacity: 1,\n        y: `0em`,\n        transition: {\n          duration: 0.65,\n          ease: [0.65, 0, 0.75, 1],\n        },\n      },\n    },\n  },\n  flicker: {\n    container: {\n      hidden: {},\n      visible: {},\n    },\n    child: {\n      hidden: {\n        opacity: 0,\n        y: `0.35em`,\n      },\n      visible: {\n        opacity: 1,\n        y: `0em`,\n        transition: {\n          duration: 0.45,\n          ease: [0.85, 0.1, 0.9, 1.2],\n        },\n      },\n    },\n  },\n};\n\nexport const AnimateText: FC<Props> = ({\n  text,\n  type = \"elastic\",\n  custom = 1,\n  className = \"\",\n  ...props\n}: Props) => {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: false });\n  const ctrls = useAnimation();\n\n  useEffect(() => {\n    if (isInView) {\n      ctrls.start(\"visible\");\n    } else {\n      ctrls.start(\"hidden\");\n    }\n  }, [isInView, ctrls]);\n\n  const letters = Array.from(text);\n  const { container, child } = animationVariants[type];\n\n  if (type === \"cascade\" || type === \"flicker\") {\n    return (\n      <h2\n        ref={ref}\n        className={`mt-6 text-3xl font-bold text-black dark:text-neutral-100 py-4 px-4 md:text-4xl ${className}`}\n      >\n        {text.split(\" \").map((word, index) => {\n          return (\n            <motion.span\n              className=\"inline-block mr-[0.25em] whitespace-nowrap\"\n              aria-hidden=\"true\"\n              key={index}\n              initial=\"hidden\"\n              animate={isInView ? \"visible\" : \"hidden\"}\n              variants={container}\n              transition={{\n                delayChildren: index * 0.13,\n                staggerChildren: 0.025,\n              }}\n            >\n              {word.split(\"\").map((character, index) => {\n                return (\n                  <motion.span\n                    aria-hidden=\"true\"\n                    key={index}\n                    variants={child}\n                    className=\"inline-block -mr-[0.01em]\"\n                  >\n                    {character}\n                  </motion.span>\n                );\n              })}\n            </motion.span>\n          );\n        })}\n      </h2>\n    );\n  }\n\n  return (\n    <motion.h2\n      ref={ref}\n      style={{ display: \"flex\", overflow: \"hidden\" }}\n      role=\"heading\"\n      variants={container}\n      initial=\"hidden\"\n      animate={ctrls}\n      custom={custom}\n      className={`mt-6 text-3xl font-bold text-black dark:text-neutral-100 py-4 px-4 md:text-4xl ${className}`}\n      {...props}\n    >\n      {letters.map((letter, index) => (\n        <motion.span key={index} variants={child}>\n          {letter === \" \" ? \"\\u00A0\" : letter}\n        </motion.span>\n      ))}\n    </motion.h2>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/animated-text.tsx"
    }
  ]
}