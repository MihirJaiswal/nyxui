{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glitch-button-demo",
  "type": "registry:example",
  "title": "Glitch Button Demo",
  "description": "Example showing a glitch button.",
  "dependencies": [
    "react-element-to-jsx-string",
    "sonner",
    "..",
    "lucide-react",
    "@radix-ui/react-icons"
  ],
  "registryDependencies": [
    "https://nyxui.vercel.app/r/glitch-button.json"
  ],
  "files": [
    {
      "path": "registry/example/glitch-button-demo.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport reactElementToJSXString from \"react-element-to-jsx-string\";\nimport { toast, Toaster } from \"sonner\";\nimport { GlitchButton } from \"../ui/glitch-button\";\nimport {\n  ArrowRight,\n  Download,\n  Info,\n  Mail,\n  Power,\n  ShieldCheck,\n  Copy,\n  Check,\n} from \"lucide-react\";\nimport { MoonIcon } from \"@radix-ui/react-icons\";\n\ninterface ButtonsCard {\n  children: React.ReactNode;\n  onClick: () => void;\n  isCopied: boolean;\n}\n\ntype GlitchButtonType = {\n  name: string;\n  description: string;\n  component: React.ReactNode;\n  code?: string;\n};\n\nconst ButtonsCard = ({ children, onClick, isCopied }: ButtonsCard) => {\n  return (\n    <div\n      className=\"border group relative border-gray-300 dark:border-zinc-800 hover:border-zinc-500 hover:dark:border-zinc-500 rounded-lg p-3 flex flex-col items-center justify-center h-52 cursor-pointer hover:shadow-lg transition-shadow duration-200\"\n      onClick={onClick}\n    >\n      <div className=\"mb-4\">{children}</div>\n      <div className=\"absolute top-2 right-2\">\n        {isCopied ? (\n          <Check className=\"h-3 w-3 text-green-500 transition-all duration-200\" />\n        ) : (\n          <Copy className=\"h-3 w-3 text-zinc-300 dark:text-zinc-700 group-hover:text-zinc-500 group-hover:dark:text-zinc-500\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const GlitchButtonDemo = () => {\n  const [copiedIndex, setCopiedIndex] = useState<number | null>(null);\n\n  const copy = (button: GlitchButtonType, index: number) => {\n    if (button.code) {\n      copyToClipboard(button.code, index);\n      return;\n    }\n    let buttonString = reactElementToJSXString(button.component, {\n      displayName: (element) => {\n        if (\n          typeof element === \"object\" &&\n          element !== null &&\n          \"type\" in element &&\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (element as any).type?.name === \"GlitchButton\"\n        ) {\n          return \"GlitchButton\";\n        }\n        if (\n          typeof element === \"object\" &&\n          element !== null &&\n          \"type\" in element &&\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (element as any).type?.displayName\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          return (element as any).type.displayName;\n        }\n        if (\n          typeof element === \"object\" &&\n          element !== null &&\n          \"type\" in element &&\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (element as any).type?.name\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          return (element as any).type.name;\n        }\n        return \"UnknownComponent\";\n      },\n      functionValue: (fn) => fn.name || 'function',\n    });\n\n    if (buttonString) {\n      const textToCopy = buttonString;\n      copyToClipboard(textToCopy, index);\n    }\n  };\n\n  const copyToClipboard = (text: string, index: number) => {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        console.log(\"Text copied to clipboard:\", text);\n        toast.success(\"Copied to clipboard\");\n        setCopiedIndex(index);\n        setTimeout(() => {\n          setCopiedIndex(null);\n        }, 2000);\n      })\n      .catch((err) => {\n        console.error(\"Error copying text to clipboard:\", err);\n        toast.error(\"Error copying to clipboard\");\n      });\n  };\n\n  return (\n    <div className=\"pb-4 px-4 w-full\">\n      <Toaster position=\"top-center\" />\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 w-full max-w-7xl mx-auto gap-6\">\n        {glitchButtons.map((button, idx) => (\n          <ButtonsCard\n            key={idx}\n            onClick={() => copy(button, idx)}\n            isCopied={copiedIndex === idx}\n          >\n            {button.component}\n          </ButtonsCard>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const glitchButtons = [\n  {\n    name: \"Always Glitch\",\n    description: \"Button with constant glitch effect\",\n    component: (\n      <GlitchButton glitchAlways={true} className=\"text-sm sm:text-base\">\n        <div className=\"flex items-center\">\n          <Power className=\"mr-2 h-5 w-5\" />\n          <span>Always Glitch</span>\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton glitchAlways={true} className=\"text-sm sm:text-base\">\n  <div className=\"flex items-center\">\n    <Power className=\"mr-2 h-5 w-5\" />\n    <span>Always Glitch</span>\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"Download\",\n    description: \"Green download button with hover glitch\",\n    component: (\n      <GlitchButton\n        glitchOnHover={true}\n        className=\"text-sm sm:text-base bg-black text-green-400\"\n      >\n        <div className=\"flex items-center\">\n          <Download className=\"mr-2 h-5 w-5\" />\n          <span>DOWNLOAD</span>\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchOnHover={true}\n  borderColor=\"#05DF72\"\n  className=\"text-sm sm:text-base bg-black text-green-400 rounded-sm\"\n>\n  <div className=\"flex items-center\">\n    <Download className=\"mr-2 h-5 w-5\" />\n    <span>DOWNLOAD</span>\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"Warning\",\n    description: \"Warning button with custom red/yellow glitch colors\",\n    component: (\n      <GlitchButton\n        glitchOnHover={true}\n        glitchColors={{ primary: \"#ff3e00\", secondary: \"#ffcc00\" }}\n        className=\"text-sm sm:text-base bg-red-900 text-yellow-300 rounded-lg\"\n      >\n        <div className=\"flex items-center\">\n          <ShieldCheck className=\"mr-2 h-5 w-5\" />\n          <span>WARNING</span>\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchOnHover={true}\n  glitchColors={{ primary: \"#ff3e00\", secondary: \"#ffcc00\" }}\n  className=\"text-sm sm:text-base bg-red-900 text-yellow-300 rounded-lg\"\n>\n  <div className=\"flex items-center\">\n    <ShieldCheck className=\"mr-2 h-5 w-5\" />\n    <span>WARNING</span>\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"Subscribe\",\n    description: \"Blue subscribe button with hover glitch\",\n    component: (\n      <GlitchButton\n        glitchOnHover={true}\n        glitchColors={{ primary: \"#00aaff\", secondary: \"#0044ff\" }}\n        className=\"text-sm sm:text-base bg-blue-950 text-blue-300\"\n      >\n        <div className=\"flex items-center\">\n          <Mail className=\"mr-2 h-5 w-5\" />\n          <span>SUBSCRIBE</span>\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchOnHover={true}\n  glitchColors={{ primary: \"#00aaff\", secondary: \"#0044ff\" }}\n  className=\"text-sm sm:text-base bg-blue-950 text-blue-300\"\n>\n  <div className=\"flex items-center\">\n    <Mail className=\"mr-2 h-5 w-5\" />\n    <span>SUBSCRIBE</span>\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"Nyx UI\",\n    description: \"Purple themed button with cyan glitch\",\n    component: (\n      <GlitchButton\n        glitchColors={{ primary: \"#be21ed\", secondary: \"#00ffcc\" }}\n        className=\"text-sm sm:text-base bg-purple-950\"\n      >\n        <div className=\"flex items-center\">\n          <MoonIcon className=\"mr-1 sm:mr-2 h-4 w-4 sm:h-5 sm:w-5\" />\n          <span>Nyx UI</span>\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchColors={{ primary: \"#be21ed\", secondary: \"#00ffcc\" }}\n  className=\"text-sm sm:text-base bg-purple-950\"\n>\n  <div className=\"flex items-center\">\n    <MoonIcon className=\"mr-1 sm:mr-2 h-4 w-4 sm:h-5 sm:w-5\" />\n    <span>Nyx UI</span>\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"More Info\",\n    description: \"Indigo info button with custom glitch colors\",\n    component: (\n      <GlitchButton\n        glitchOnHover={true}\n        glitchColors={{ primary: \"#5500ff\", secondary: \"#00ddff\" }}\n        className=\"text-sm sm:text-base bg-indigo-800 text-indigo-100 rounded-lg\"\n      >\n        <div className=\"flex items-center\">\n          <Info className=\"mr-2 h-5 w-5\" />\n          <span>MORE INFO</span>\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchOnHover={true}\n  glitchColors={{ primary: \"#5500ff\", secondary: \"#00ddff\" }}\n  className=\"text-sm sm:text-base bg-indigo-800 text-indigo-100 rounded-lg\"\n>\n  <div className=\"flex items-center\">\n    <Info className=\"mr-2 h-5 w-5\" />\n    <span>MORE INFO</span>\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"Enter The Void\",\n    description: \"Dark themed button with arrow and hover glitch\",\n    component: (\n      <GlitchButton\n        glitchOnHover={true}\n        className=\"text-sm sm:text-base bg-slate-900 text-white\"\n      >\n        <div className=\"flex items-center gap-2\">\n          <span>ENTER THE VOID</span>\n          <ArrowRight className=\"h-5 w-5\" />\n        </div>\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchOnHover={true}\n  className=\"text-sm sm:text-base bg-slate-900 text-white\"\n>\n  <div className=\"flex items-center gap-2\">\n    <span>ENTER THE VOID</span>\n    <ArrowRight className=\"h-5 w-5\" />\n  </div>\n</GlitchButton>`\n  },\n  {\n    name: \"The Matrix\",\n    description: \"Matrix themed green button\",\n    component: (\n      <GlitchButton className=\"text-sm sm:text-base bg-green-600 text-black font-extrabold rounded-lg\">\n        The Matrix\n      </GlitchButton>\n    ),\n    code: `<GlitchButton className=\"text-sm sm:text-base bg-green-600 text-black font-extrabold rounded-lg\">\n  The Matrix\n</GlitchButton>`\n  },\n  {\n    name: \"Hacker Man\",\n    description: \"Hacker themed button with red/blue glitch\",\n    component: (\n      <GlitchButton\n        glitchColors={{ primary: \"#FF0000\", secondary: \"#0000FF\" }}\n        className=\"text-sm sm:text-base bg-black text-white rounded-lg\"\n      >\n        Hacker Man\n      </GlitchButton>\n    ),\n    code: `<GlitchButton\n  glitchColors={{ primary: \"#FF0000\", secondary: \"#0000FF\" }}\n  className=\"text-sm sm:text-base bg-black text-white rounded-lg\"\n>\n  Hacker Man\n</GlitchButton>`\n  },\n];",
      "type": "registry:example",
      "target": "components/glitch-button-demo.tsx"
    }
  ]
}