{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-code-block",
  "type": "registry:ui",
  "title": "Animated Code Block",
  "description": "A code display component with real-time typing effects. Supports syntax highlighting and customizable themes.",
  "dependencies": [
    "motion",
    "lucide-react",
    "prismjs",
    "motion",
    "clsx",
    "tailwind-merge",
    "lucide-react",
    "prismjs"
  ],
  "files": [
    {
      "path": "registry/ui/animated-code-block.tsx",
      "content": "\"use client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Play,\n  Pause,\n  Copy,\n  Check,\n  RotateCcw,\n  Maximize2,\n  Minimize2,\n  Download,\n} from \"lucide-react\";\nimport Prism from \"prismjs\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-tsx\";\nimport \"prismjs/components/prism-css\";\nimport \"prismjs/components/prism-scss\";\nimport \"prismjs/components/prism-json\";\nimport \"prismjs/components/prism-python\";\nimport \"prismjs/components/prism-bash\";\nimport \"prismjs/components/prism-sql\";\nimport \"prismjs/components/prism-yaml\";\nimport \"prismjs/components/prism-markdown\";\n\nconst getScrollbarStyles = (theme: string) => {\n  const scrollbarColors = {\n    dark: \"rgba(255, 255, 255, 0.2)\",\n    minimal: \"rgba(202, 138, 4, 0.3)\",\n    terminal: \"rgba(0, 255, 128, 0.2)\",\n    cyberpunk: \"rgba(236, 72, 153, 0.3)\",\n  };\n\n  const color =\n    scrollbarColors[theme as keyof typeof scrollbarColors] ||\n    scrollbarColors.dark;\n  const hoverColor = color.replace(\n    /[\\d.]+\\)$/,\n    (match) => String(Math.min(Number.parseFloat(match) + 0.2, 1)) + \")\"\n  );\n\n  return `\n    .code-scrollbar::-webkit-scrollbar {\n      height: 8px;\n      width: 8px;\n    }\n    .code-scrollbar::-webkit-scrollbar-track {\n      background: transparent;\n      margin: 0 4px;\n    }\n    .code-scrollbar::-webkit-scrollbar-thumb {\n      background: ${color};\n      border-radius: 4px;\n      transition: background 0.2s ease;\n    }\n    .code-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: ${hoverColor};\n    }\n    .code-scrollbar {\n      scrollbar-width: thin;\n      scrollbar-color: ${color} transparent;\n    }\n  `;\n};\n\n// Custom Prism theme styles for different themes\nconst getPrismThemeStyles = (theme: string) => {\n  const baseStyles = `\n    .token.comment,\n    .token.prolog,\n    .token.doctype,\n    .token.cdata {\n      color: #6a737d;\n      font-style: italic;\n    }\n    .token.punctuation {\n      color: #f8f8f2;\n    }\n    .token.property,\n    .token.tag,\n    .token.constant,\n    .token.symbol,\n    .token.deleted {\n      color: #f92672;\n    }\n    .token.boolean,\n    .token.number {\n      color: #ae81ff;\n    }\n    .token.selector,\n    .token.attr-name,\n    .token.string,\n    .token.char,\n    .token.builtin,\n    .token.inserted {\n      color: #a6e22e;\n    }\n    .token.operator,\n    .token.entity,\n    .token.url,\n    .language-css .token.string,\n    .style .token.string,\n    .token.variable {\n      color: #f8f8f2;\n    }\n    .token.atrule,\n    .token.attr-value,\n    .token.function,\n    .token.class-name {\n      color: #e6db74;\n    }\n    .token.keyword {\n      color: #66d9ef;\n    }\n    .token.regex,\n    .token.important {\n      color: #fd971f;\n    }\n  `;\n\n  switch (theme) {\n    case \"nightowl\":\n  return `\n    ${baseStyles}\n    .token.comment,\n    .token.prolog,\n    .token.doctype,\n    .token.cdata {\n      color: #637777; \n      font-style: italic;\n    }\n    .token.punctuation {\n      color: #c792ea;\n    }\n    .token.property,\n    .token.tag,\n    .token.constant,\n    .token.symbol,\n    .token.deleted {\n      color: #f78c6c;\n    }\n    .token.boolean,\n    .token.number {\n      color: #ff5874;\n    }\n    .token.selector,\n    .token.attr-name,\n    .token.string,\n    .token.char,\n    .token.builtin,\n    .token.inserted {\n      color: #addb67; \n    }\n    .token.operator,\n    .token.entity,\n    .token.url,\n    .language-css .token.string,\n    .style .token.string {\n      color: #c792ea;\n    }\n    .token.keyword {\n      color: #7fdbca; \n    }\n    .token.atrule,\n    .token.attr-value,\n    .token.function,\n    .token.class-name {\n      color: #82aaff;\n    }\n    .token.regex,\n    .token.important,\n    .token.variable {\n      color: #d6deeb; \n    }\n    .token.bold {\n      font-weight: bold;\n    }\n    .token.italic {\n      font-style: italic;\n    }\n  `;\n\n    case \"terminal\":\n      return `\n        ${baseStyles}\n        .token.comment,\n        .token.prolog,\n        .token.doctype,\n        .token.cdata {\n          color: #10b981;\n          opacity: 0.7;\n        }\n        .token.property,\n        .token.tag,\n        .token.constant,\n        .token.symbol,\n        .token.deleted {\n          color: #34d399;\n        }\n        .token.boolean,\n        .token.number {\n          color: #6ee7b7;\n        }\n        .token.selector,\n        .token.attr-name,\n        .token.string,\n        .token.char,\n        .token.builtin,\n        .token.inserted {\n          color: #a7f3d0;\n        }\n        .token.keyword {\n          color: #10b981;\n          font-weight: bold;\n        }\n        .token.atrule,\n        .token.attr-value,\n        .token.function,\n        .token.class-name {\n          color: #34d399;\n        }\n      `;\n    case \"cyberpunk\":\n      return `\n        ${baseStyles}\n        .token.comment,\n        .token.prolog,\n        .token.doctype,\n        .token.cdata {\n          color: #a855f7;\n          opacity: 0.8;\n        }\n        .token.property,\n        .token.tag,\n        .token.constant,\n        .token.symbol,\n        .token.deleted {\n          color: #ec4899;\n        }\n        .token.boolean,\n        .token.number {\n          color: #f472b6;\n        }\n        .token.selector,\n        .token.attr-name,\n        .token.string,\n        .token.char,\n        .token.builtin,\n        .token.inserted {\n          color: #e879f9;\n        }\n        .token.keyword {\n          color: #c084fc;\n          font-weight: bold;\n        }\n        .token.atrule,\n        .token.attr-value,\n        .token.function,\n        .token.class-name {\n          color: #d946ef;\n        }\n      `;\n    default:\n      return baseStyles;\n  }\n};\n\nexport interface AnimatedCodeBlockProps {\n  code: string;\n  language?: string;\n  theme?: \"dark\" | \"terminal\" | \"cyberpunk\" | \"nightowl\";\n  typingSpeed?: number;\n  showLineNumbers?: boolean;\n  highlightLines?: number[];\n  title?: string;\n  className?: string;\n  autoPlay?: boolean;\n  loop?: boolean;\n  blurEffect?: boolean;\n  showControls?: boolean;\n  onCopy?: () => void;\n}\n\ntype ThemeStyles = {\n  background: string;\n  text: string;\n  lineNumbers: string;\n  highlight: string;\n  border: string;\n  header: string;\n  accent: string;\n  accentText: string;\n  shadow: string;\n  scrollbarThumb: string;\n};\n\nexport function AnimatedCodeBlock({\n  code,\n  language = \"javascript\",\n  theme = \"dark\",\n  typingSpeed = 50,\n  showLineNumbers = true,\n  highlightLines = [],\n  title = \"Code Example\",\n  className,\n  autoPlay = false,\n  loop = false,\n  blurEffect = false,\n  showControls = true,\n  onCopy,\n}: AnimatedCodeBlockProps) {\n  const [isPlaying, setIsPlaying] = useState(autoPlay);\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [copied, setCopied] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(\"\");\n  const [extraLines, setExtraLines] = useState(0);\n  const [highlightedCode, setHighlightedCode] = useState(\"\");\n  const codeRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const codeContainerRef = useRef<HTMLDivElement>(null);\n  const lineNumbersRef = useRef<HTMLDivElement>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    try {\n      const highlighted = Prism.highlight(\n        code,\n        Prism.languages[language] || Prism.languages.javascript,\n        language\n      );\n      setHighlightedCode(highlighted);\n    } catch (error) {\n      console.warn(\"Failed to highlight code:\", error);\n      setHighlightedCode(code);\n    }\n  }, [code, language]);\n\n  const getThemeStyles = (): ThemeStyles => {\n    switch (theme) {\n      case \"dark\":\n        return {\n          background: \"bg-zinc-900\",\n          text: \"text-zinc-100\",\n          lineNumbers: \"text-zinc-500\",\n          highlight: \"bg-zinc-800\",\n          border: \"border-zinc-800\",\n          header: \"bg-zinc-800\",\n          accent: \"bg-indigo-600\",\n          accentText: \"text-indigo-400\",\n          shadow: \"shadow-lg shadow-black/20\",\n          scrollbarThumb: \"rgba(255, 255, 255, 0.2)\",\n        };\n      case \"nightowl\":\n        return {\n          background: \"bg-[#011627]\",\n          text: \"text-[#d6deeb]\",\n          lineNumbers: \"text-[#5f7e97]\",\n          highlight: \"bg-[#1d3b53]\",\n          border: \"border-[#1e2d3d]\",\n          header: \"bg-[#0b2942]\",\n          accent: \"bg-[#82aaff]\",\n          accentText: \"text-[#82aaff]\",\n          shadow: \"shadow-md shadow-[#82aaff]/20\",\n          scrollbarThumb: \"rgba(130, 170, 255, 0.3)\",\n        };\n      case \"terminal\":\n        return {\n          background: \"bg-[#0d1117]\", \n          text: \"text-[#00ff88]\", \n          lineNumbers: \"text-[#009966]\",\n          highlight: \"bg-[#003b2f]/60\", \n          border: \"border-[#1f2a30]\",\n          header: \"bg-[#161b22]\", \n          accent: \"bg-[#00c46f]\",\n          accentText: \"text-[#00ff88]\",\n          shadow: \"shadow-md shadow-[#00ff88]/20\",\n          scrollbarThumb: \"rgba(0, 255, 136, 0.3)\", \n        };\n\n      case \"cyberpunk\":\n        return {\n          background:\n            \"bg-gradient-to-br from-[#0f0c29] via-[#302b63] to-[#24243e]\",\n          text: \"text-[#e0e0f0]\",\n          lineNumbers: \"text-[#8f7ada]\",\n          highlight: \"bg-[#3e2d67]/60\",\n          border: \"border-[#5a4b8d]\",\n          header: \"bg-gradient-to-r from-[#2e1a47] to-[#443266]\",\n          accent: \"bg-[#ff00a0]\",\n          accentText: \"text-[#ff00a0]\",\n          shadow: \"shadow-lg shadow-[#ff00a0]/20\",\n          scrollbarThumb: \"rgba(255, 0, 160, 0.3)\",\n        };\n\n      default:\n        return {\n          background: \"bg-zinc-900\",\n          text: \"text-zinc-100\",\n          lineNumbers: \"text-zinc-500\",\n          highlight: \"bg-zinc-800\",\n          border: \"border-zinc-800\",\n          header: \"bg-zinc-800\",\n          accent: \"bg-indigo-600\",\n          accentText: \"text-indigo-400\",\n          shadow: \"shadow-lg shadow-black/20\",\n          scrollbarThumb: \"rgba(255, 255, 255, 0.2)\",\n        };\n    }\n  };\n\n  const themeStyles = getThemeStyles();\n  useEffect(() => {\n    if (isFullscreen) {\n      const updateExtraLines = () => {\n        if (codeContainerRef.current && lineNumbersRef.current) {\n          const containerHeight = codeContainerRef.current.clientHeight;\n          const lineHeight = 24;\n          const codeLines = code.split(\"\\n\").length;\n          const visibleLines = Math.floor(containerHeight / lineHeight);\n          const extraLinesNeeded = Math.max(0, visibleLines - codeLines);\n          setExtraLines(extraLinesNeeded);\n        }\n      };\n      updateExtraLines();\n      window.addEventListener(\"resize\", updateExtraLines);\n      return () => {\n        window.removeEventListener(\"resize\", updateExtraLines);\n      };\n    } else {\n      setExtraLines(0);\n    }\n  }, [isFullscreen, code]);\n\n  useEffect(() => {\n    if (isPlaying && currentPosition < code.length) {\n      timerRef.current = setTimeout(() => {\n        setCurrentPosition(currentPosition + 1);\n      }, typingSpeed);\n    } else if (isPlaying && currentPosition >= code.length) {\n      if (loop) {\n        setTimeout(() => {\n          setCurrentPosition(0);\n        }, 1000);\n      } else {\n        setIsPlaying(false);\n        setCompleted(true);\n        setIsPaused(false);\n      }\n    }\n    return () => {\n      if (timerRef.current) clearTimeout(timerRef.current);\n    };\n  }, [isPlaying, currentPosition, code, typingSpeed, loop]);\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    document.addEventListener(\"fullscreenchange\", handleFullscreenChange);\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleFullscreenChange);\n    };\n  }, []);\n\n  const togglePlay = () => {\n    if (isPlaying) {\n      setIsPaused(true);\n    } else if (completed) {\n      restartAnimation();\n    } else {\n      setIsPaused(false);\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const restartAnimation = () => {\n    setCurrentPosition(0);\n    setIsPlaying(true);\n    setCompleted(false);\n    setIsPaused(false);\n  };\n\n  const copyCode = () => {\n    navigator.clipboard.writeText(code);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n    if (onCopy) onCopy();\n  };\n\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement && containerRef.current) {\n      containerRef.current.requestFullscreen().catch((err) => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n      });\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  const downloadCode = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([code], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = `code.${language}`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n\n  const codeLines = code.split(\"\\n\");\n\n  const renderLines = () => {\n    let remainingChars = currentPosition;\n    const result = [];\n    for (let i = 0; i < codeLines.length; i++) {\n      const line = codeLines[i];\n      const lineLength = line.length + 1;\n      if (remainingChars <= 0) {\n        result.push(\"\");\n      } else if (remainingChars >= lineLength) {\n        result.push(line);\n        remainingChars -= lineLength;\n      } else {\n        result.push(line.substring(0, remainingChars));\n        remainingChars = 0;\n      }\n    }\n    return result;\n  };\n\n  const displayedLines = completed ? code.split(\"\\n\") : renderLines();\n\n  const getCursorLineIndex = () => {\n    if (!isPlaying && !isPaused) return -1;\n    let charsProcessed = 0;\n    for (let i = 0; i < codeLines.length; i++) {\n      const lineLength = codeLines[i].length + 1;\n      charsProcessed += lineLength;\n      if (currentPosition < charsProcessed) {\n        return i;\n      }\n    }\n    return codeLines.length - 1;\n  };\n\n  const cursorLineIndex = getCursorLineIndex();\n  const progressPercentage = Math.min(\n    100,\n    (currentPosition / code.length) * 100\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"animated-code-block rounded-lg overflow-hidden flex flex-col w-full\",\n        themeStyles.background,\n        themeStyles.text,\n        themeStyles.border,\n        themeStyles.shadow,\n        \"border transition-all duration-300\", \n        isFullscreen ? \"fixed inset-0 z-50 rounded-none h-screen\" : \"\",\n        className\n      )}\n    >\n      <style\n        dangerouslySetInnerHTML={{\n          __html: getScrollbarStyles(theme) + getPrismThemeStyles(theme),\n        }}\n      />\n\n      <div\n        className={cn(\n          \"flex items-center justify-between p-3 border-b border-opacity-20\",\n          themeStyles.header\n        )}\n      >\n        <div className=\"flex items-center gap-4 min-w-0 flex-1\">\n          <div className=\"flex space-x-1.5 flex-shrink-0\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n            <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n          </div>\n          <h3 className=\"text-sm font-medium truncate\">{title}</h3>\n        </div>\n        {showControls && (\n          <div className=\"flex items-center justify-end gap-2 flex-shrink-0\">\n            {completed ? (\n              <button\n                onClick={restartAnimation}\n                onMouseEnter={() => setShowTooltip(\"restart\")}\n                onMouseLeave={() => setShowTooltip(\"\")}\n                className={cn(\n                  \"p-1.5 rounded-full hover:bg-white/10 transition-colors relative\"\n                )}\n                aria-label=\"Repeat animation\"\n              >\n                <RotateCcw size={14} />\n                {showTooltip === \"restart\" && (\n                  <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-black text-white text-xs rounded whitespace-nowrap\">\n                    Restart\n                  </div>\n                )}\n              </button>\n            ) : (\n              <button\n                onClick={togglePlay}\n                onMouseEnter={() => setShowTooltip(\"play\")}\n                onMouseLeave={() => setShowTooltip(\"\")}\n                className={cn(\n                  \"p-1.5 rounded-full hover:bg-white/10 transition-colors relative\",\n                  isPlaying ? themeStyles.accent : \"\"\n                )}\n                aria-label={isPlaying ? \"Pause\" : \"Play\"}\n              >\n                {isPlaying ? <Pause size={14} /> : <Play size={14} />}\n                {showTooltip === \"play\" && (\n                  <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-black text-white text-xs rounded whitespace-nowrap\">\n                    {isPlaying ? \"Pause\" : \"Play\"}\n                  </div>\n                )}\n              </button>\n            )}\n            <button\n              onClick={copyCode}\n              onMouseEnter={() => setShowTooltip(\"copy\")}\n              onMouseLeave={() => setShowTooltip(\"\")}\n              className={cn(\n                \"p-1.5 rounded-full hover:bg-white/10 transition-colors relative\",\n                copied ? themeStyles.accent : \"\"\n              )}\n              aria-label=\"Copy code\"\n            >\n              {copied ? <Check size={14} /> : <Copy size={14} />}\n              {showTooltip === \"copy\" && (\n                <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-black text-white text-xs rounded whitespace-nowrap\">\n                  {copied ? \"Copied!\" : \"Copy\"}\n                </div>\n              )}\n            </button>\n            <button\n              onClick={downloadCode}\n              onMouseEnter={() => setShowTooltip(\"download\")}\n              onMouseLeave={() => setShowTooltip(\"\")}\n              className=\"p-1.5 rounded-full hover:bg-white/10 transition-colors relative\"\n              aria-label=\"Download code\"\n            >\n              <Download size={14} />\n              {showTooltip === \"download\" && (\n                <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-black text-white text-xs rounded whitespace-nowrap\">\n                  Download\n                </div>\n              )}\n            </button>\n            <button\n              onClick={toggleFullscreen}\n              onMouseEnter={() => setShowTooltip(\"fullscreen\")}\n              onMouseLeave={() => setShowTooltip(\"\")}\n              className=\"p-1.5 rounded-full hover:bg-white/10 transition-colors relative\"\n              aria-label={isFullscreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n            >\n              {isFullscreen ? <Minimize2 size={14} /> : <Maximize2 size={14} />}\n              {showTooltip === \"fullscreen\" && (\n                <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-black text-white text-xs rounded whitespace-nowrap\">\n                  {isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\"}\n                </div>\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"relative overflow-hidden flex-grow flex flex-col\">\n        {blurEffect && (\n          <div\n            className={cn(\n              \"absolute inset-0 pointer-events-none opacity-[0.05] mix-blend-overlay\",\n              theme === \"terminal\"\n                ? \"bg-emerald-400\"\n                : theme === \"cyberpunk\"\n                  ? \"bg-fuchsia-400\"\n                  : \"bg-blue-400\"\n            )}\n          />\n        )}\n        <div className=\"h-0.5 w-full bg-black/20 dark:bg-white/10 flex-shrink-0\">\n          <motion.div\n            className={cn(\"h-full\", themeStyles.accent)}\n            initial={{ width: 0 }}\n            animate={{ width: `${progressPercentage}%` }}\n            transition={{ duration: 0.1 }}\n          />\n        </div>\n        <div\n          className=\"relative flex-grow overflow-hidden\"\n          ref={codeContainerRef}\n        >\n          <div\n            className=\"absolute top-0 right-0 bottom-0 w-12 pointer-events-none z-10 opacity-50\"\n            style={{\n              background:\n                theme === \"nightowl\"\n                  ? \"linear-gradient(to left, rgba(11, 41, 66, 0.5) 10%, transparent 100%)\"\n                  : theme === \"terminal\"\n                    ? \"linear-gradient(to left, rgba(2, 6, 23, 0.8) 10%, transparent 100%)\"\n                    : theme === \"cyberpunk\"\n                      ? \"linear-gradient(to left, rgba(76, 29, 149, 0.8) 10%, transparent 100%)\"\n                      : \"linear-gradient(to left, rgba(24, 24, 27, 0.8) 10%, transparent 100%)\",\n            }}\n          />\n          <div\n            className=\"absolute top-0 left-0 bottom-0 w-12 pointer-events-none z-10 opacity-50\"\n            style={{\n              background:\n                theme === \"nightowl\"\n                  ? \"linear-gradient(to right, rgba(11, 41, 66, 0.8) 10%, transparent 100%)\"\n                  : theme === \"terminal\"\n                    ? \"linear-gradient(to right, rgba(2, 6, 23, 0.8) 10%, transparent 100%)\"\n                    : theme === \"cyberpunk\"\n                      ? \"linear-gradient(to right, rgba(76, 29, 149, 0.8) 10%, transparent 100%)\"\n                      : \"linear-gradient(to right, rgba(24, 24, 27, 0.8) 10%, transparent 100%)\",\n            }}\n          />\n          <div className=\"overflow-auto code-scrollbar h-full\">\n            <div className=\"flex min-w-full h-full\">\n              {showLineNumbers && (\n                <div\n                  ref={lineNumbersRef}\n                  className={cn(\n                    \"text-xs py-4 px-3 text-right select-none border-r border-opacity-20 sticky -left-1 h-full flex flex-col z-10\",\n                    themeStyles.lineNumbers,\n                    themeStyles.border,\n                    themeStyles.background\n                  )}\n                >\n                  <div className=\"flex flex-col\">\n                    {codeLines.map((_, i) => (\n                      <div\n                        key={i}\n                        className=\"h-6 flex items-center justify-end\"\n                      >\n                        {i + 1}\n                      </div>\n                    ))}\n                    {Array.from({ length: extraLines }).map((_, i) => (\n                      <div\n                        key={`extra-${i}`}\n                        className=\"h-6 flex items-center justify-end\"\n                      >\n                        {codeLines.length + i + 1}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              <div className=\"relative py-4 flex-grow h-full z-1\" ref={codeRef}>\n                {highlightLines.map((lineNum) => (\n                  <div\n                    key={`highlight-${lineNum}`}\n                    className={cn(\n                      \"absolute left-0 right-0 h-6\",\n                      themeStyles.highlight\n                    )}\n                    style={{ top: `${(lineNum - 1) * 24 + 16}px` }}\n                  />\n                ))}\n                <div className=\"relative z-10 px-4 font-mono text-sm h-full\">\n                  {completed ? (\n                    <div\n                      className=\"whitespace-pre\"\n                      dangerouslySetInnerHTML={{ __html: highlightedCode }}\n                    />\n                  ) : (\n                    <>\n                      {codeLines.map((line, i) => (\n                        <div key={i} className=\"h-6 whitespace-pre\">\n                          {displayedLines[i] && (\n                            <span\n                              dangerouslySetInnerHTML={{\n                                __html: Prism.highlight(\n                                  displayedLines[i],\n                                  Prism.languages[language] ||\n                                    Prism.languages.javascript,\n                                  language\n                                ),\n                              }}\n                            />\n                          )}\n                          {i === cursorLineIndex && (\n                            <motion.span\n                              className={cn(\n                                \"inline-block w-2 h-5 -mb-0.5\",\n                                themeStyles.accentText\n                              )}\n                              animate={{ opacity: [1, 0] }}\n                              transition={{\n                                repeat: Number.POSITIVE_INFINITY,\n                                duration: 0.8,\n                              }}\n                            />\n                          )}\n                        </div>\n                      ))}\n                    </>\n                  )}\n                  {Array.from({ length: extraLines }).map((_, i) => (\n                    <div key={`extra-${i}`} className=\"h-6 whitespace-pre\">\n                      &nbsp;\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        className={cn(\n          \"px-4 py-2 text-xs border-t border-opacity-20 flex justify-between items-center\",\n          themeStyles.header,\n          themeStyles.border\n        )}\n      >\n        <div className=\"flex items-center gap-2\">\n          <div\n            className={cn(\n              \"w-2 h-2 rounded-full\",\n              isPlaying ? \"bg-green-500\" : \"bg-gray-500\"\n            )}\n          ></div>\n          <span>\n            {isPlaying ? \"Typing...\" : completed ? \"Completed\" : \"Paused\"}\n          </span>\n        </div>\n        <div>{Math.round(progressPercentage)}% complete</div>\n      </div>\n\n      <AnimatePresence>\n        {isFullscreen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed top-4 right-4 z-50\"\n          >\n            <button\n              onClick={toggleFullscreen}\n              className=\"bg-black/50 hover:bg-black/70 text-white p-2 rounded-full backdrop-blur-sm transition-colors\"\n              aria-label=\"Exit fullscreen\"\n            >\n              <Minimize2 size={20} />\n            </button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/animated-code-block.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"https://nyxui.vercel.app\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}