{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glow-card",
  "type": "registry:ui",
  "title": "Glow Card",
  "description": "A glow card that that provide several effects.",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/ui/glow-card.tsx",
      "content": "\"use client\"\nimport type React from \"react\"\nimport { useRef, useEffect, useState, useCallback, useMemo } from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface Particle {\n  id: number\n  x: number\n  y: number\n  vx: number\n  vy: number\n  size: number\n  life: number\n  color: string\n}\n\ninterface GlowCardProps {\n  children: React.ReactNode\n  className?: string\n  variant?: \"liquid\" | \"laser\" | \"cosmic\" | \"glitch\"\n  intensity?: number\n  liquidColor?: string\n  laserColor?: string\n  glitchColor1?: string\n  glitchColor2?: string\n  disabled?: boolean\n  allowCustomBackground?: boolean\n}\n\nexport function GlowCard({\n  children,\n  className,\n  variant = \"liquid\",\n  intensity = 0.8,\n  liquidColor = \"#3b82f6\",\n  laserColor = \"#ff0000\",\n  glitchColor1 = \"#ff0064\",\n  glitchColor2 = \"#00ff64\",\n  disabled = false,\n  allowCustomBackground = false,\n}: GlowCardProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const animationRef = useRef<number>(0)\n  const waveTimeRef = useRef<number>(0)\n  const frameCountRef = useRef<number>(0)\n  const lastMouseMoveRef = useRef<number>(0)\n  const [isHovered, setIsHovered] = useState(false)\n  const [mousePos, setMousePos] = useState({ x: 50, y: 50 })\n  const [particles, setParticles] = useState<Particle[]>([])\n  const [ripples, setRipples] = useState<Array<{ id: number; x: number; y: number; time: number }>>([])\n  const [glitchOffset, setGlitchOffset] = useState({ x: 0, y: 0 })\n  const colorData = useMemo(() => {\n    const hexToRgb = (hex: string) => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n      return result\n        ? {\n            r: Number.parseInt(result[1], 16),\n            g: Number.parseInt(result[2], 16),\n            b: Number.parseInt(result[3], 16),\n          }\n        : { r: 59, g: 130, b: 246 }\n    }\n\n    return {\n      rgb: hexToRgb(liquidColor),\n      laserRgb: hexToRgb(laserColor),\n      glitch1Rgb: hexToRgb(glitchColor1),\n      glitch2Rgb: hexToRgb(glitchColor2),\n    }\n  }, [liquidColor, laserColor, glitchColor1, glitchColor2])\n\n  // Generate cosmic particles\n  const generateCosmicParticles = useCallback((centerX: number, centerY: number) => {\n    const newParticles: Particle[] = []\n    for (let i = 0; i < 10; i++) {\n      const angle = Math.random() * Math.PI * 2\n      const distance = Math.random() * 40\n      const particleType = Math.random()\n      const [color, size, speed] =\n        particleType < 0.3\n          ? [`hsl(${Math.random() * 60 + 40}, 80%, 90%)`, Math.random() * 1.5 + 0.5, 0.3]\n          : particleType < 0.6\n            ? [`hsl(${Math.random() * 120 + 240}, 70%, 60%)`, Math.random() * 4 + 2, 0.8]\n            : [`hsl(${Math.random() * 30 + 300}, 60%, 70%)`, Math.random() * 2 + 1, 0.5]\n\n      newParticles.push({\n        id: Math.random(),\n        x: centerX + Math.cos(angle) * distance,\n        y: centerY + Math.sin(angle) * distance,\n        vx: (Math.random() - 0.5) * speed,\n        vy: (Math.random() - 0.5) * speed,\n        size,\n        life: 1,\n        color,\n      })\n    }\n    setParticles((prev) => [...prev.slice(-25), ...newParticles])\n  }, [])\n\n  // Optimized animation loop\n  const animate = useCallback(() => {\n    if (!isHovered) return\n\n    const now = Date.now()\n    if (now - lastMouseMoveRef.current < 16) {\n      animationRef.current = requestAnimationFrame(animate)\n      return\n    }\n\n    waveTimeRef.current += 0.5\n    frameCountRef.current += 1\n    const currentFrame = frameCountRef.current\n\n    if (variant === \"cosmic\" && currentFrame % 6 === 0) {\n      generateCosmicParticles(mousePos.x, mousePos.y)\n    } else if (variant === \"glitch\" && currentFrame % 8 === 0) {\n      setGlitchOffset({\n        x: (Math.random() - 0.5) * 3,\n        y: (Math.random() - 0.5) * 3,\n      })\n    }\n\n    // Update particles\n    if (currentFrame % 3 === 0) {\n      setParticles((prev) =>\n        prev\n          .map((p) => ({\n            ...p,\n            x: p.x + p.vx * 0.5,\n            y: p.y + p.vy * 0.5,\n            life: p.life - 0.008,\n            vx: p.vx * 0.998,\n            vy: p.vy * 0.998,\n          }))\n          .filter((p) => p.life > 0)\n          .slice(-35),\n      )\n    }\n\n    animationRef.current = requestAnimationFrame(animate)\n  }, [isHovered, mousePos, variant, generateCosmicParticles])\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    const now = Date.now()\n    if (now - lastMouseMoveRef.current < 16) return\n    lastMouseMoveRef.current = now\n\n    if (!containerRef.current) return\n    const rect = containerRef.current.getBoundingClientRect()\n    const x = ((e.clientX - rect.left) / rect.width) * 100\n    const y = ((e.clientY - rect.top) / rect.height) * 100\n    setMousePos({ x, y })\n  }, [])\n\n  const handleMouseEnter = useCallback(() => {\n    setIsHovered(true)\n    if (variant === \"cosmic\") {\n      generateCosmicParticles(mousePos.x, mousePos.y)\n    }\n  }, [variant, generateCosmicParticles, mousePos.x, mousePos.y])\n\n  const handleMouseLeave = useCallback(() => {\n    setIsHovered(false)\n    setMousePos({ x: 50, y: 50 })\n    waveTimeRef.current = 0\n    frameCountRef.current = 0\n    setParticles([])\n    setGlitchOffset({ x: 0, y: 0 })\n    if (animationRef.current) cancelAnimationFrame(animationRef.current)\n  }, [])\n\n  const createRipple = useCallback(\n    (e: MouseEvent) => {\n      if (!containerRef.current || variant !== \"liquid\") return\n      const rect = containerRef.current.getBoundingClientRect()\n      const x = ((e.clientX - rect.left) / rect.width) * 100\n      const y = ((e.clientY - rect.top) / rect.height) * 100\n      setRipples((prev) => [...prev.slice(-2), { id: Date.now(), x, y, time: Date.now() }])\n    },\n    [variant],\n  )\n\n  const backgroundGradient = useMemo(() => {\n    if (allowCustomBackground) return undefined\n\n    const gradients = {\n      laser: \"linear-gradient(135deg, rgba(40,10,10,0.9) 0%, rgba(30,5,5,0.95) 50%, rgba(20,0,0,0.9) 100%)\",\n      cosmic: \"linear-gradient(135deg, rgba(10,5,30,0.95) 0%, rgba(20,10,50,0.98) 50%, rgba(5,0,25,0.95) 100%)\",\n      glitch: \"linear-gradient(135deg, rgba(40,0,40,0.9) 0%, rgba(60,0,20,0.95) 50%, rgba(20,0,60,0.9) 100%)\",\n      liquid: \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 50%, rgba(0,0,0,0.1) 100%)\",\n    }\n    return gradients[variant]\n  }, [variant, allowCustomBackground])\n\n  const getBorderGradient = () => {\n    const { rgb, laserRgb, glitch1Rgb, glitch2Rgb } = colorData\n\n    return variant === \"laser\"\n      ? `conic-gradient(from ${waveTimeRef.current * 3}deg at ${mousePos.x}% ${mousePos.y}%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 1) 0deg, rgba(${laserRgb.r + 100}, ${laserRgb.g}, ${laserRgb.b}, 0.8) 60deg, rgba(255, 255, 0, 0.6) 120deg, rgba(0, 255, 100, 0.8) 180deg, rgba(0, 100, 255, 1) 240deg, rgba(100, 0, 255, 0.8) 300deg, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 1) 360deg)`\n      : variant === \"cosmic\"\n        ? `conic-gradient(from ${waveTimeRef.current}deg at ${mousePos.x}% ${mousePos.y}%, rgba(255, 20, 147, 0.8) 0deg, rgba(138, 43, 226, 0.6) 120deg, rgba(75, 0, 130, 0.8) 240deg, rgba(255, 20, 147, 0.8) 360deg)`\n        : variant === \"glitch\"\n          ? `conic-gradient(from ${waveTimeRef.current * 4}deg at ${mousePos.x}% ${mousePos.y}%, rgba(${glitch1Rgb.r}, ${glitch1Rgb.g}, ${glitch1Rgb.b}, 0.8) 0deg, rgba(${glitch2Rgb.r}, ${glitch2Rgb.g}, ${glitch2Rgb.b}, 0.6) 180deg, rgba(${glitch1Rgb.r}, ${glitch1Rgb.g}, ${glitch1Rgb.b}, 0.8) 360deg)`\n          : `conic-gradient(from ${mousePos.x * 3.6}deg at ${mousePos.x}% ${mousePos.y}%, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.8) 0deg, rgba(${rgb.r + 50}, ${rgb.g + 30}, ${rgb.b + 60}, 0.6) 90deg, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.4) 180deg, rgba(${rgb.r - 30}, ${rgb.g - 20}, ${rgb.b + 40}, 0.6) 270deg, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.8) 360deg)`\n  }\n\n  // Render effects\n  const renderEffects = () => {\n    const { rgb, laserRgb, glitch1Rgb, glitch2Rgb } = colorData\n\n    switch (variant) {\n      case \"laser\":\n        return (\n          <>\n            {isHovered && (\n              <>\n                <div\n                  className=\"absolute pointer-events-none\"\n                  style={{\n                    left: `${mousePos.x}%`,\n                    top: \"0%\",\n                    transform: \"translateX(-50%)\",\n                    width: \"3px\",\n                    height: \"100%\",\n                    background: `linear-gradient(to bottom, transparent 0%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.95) 10%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.95) 90%, transparent 100%)`,\n                    filter: \"blur(1px)\",\n                    zIndex: 17,\n                    boxShadow: `0 0 10px rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.8), 0 0 20px rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.4)`,\n                  }}\n                />\n                <div\n                  className=\"absolute pointer-events-none\"\n                  style={{\n                    left: \"0%\",\n                    top: `${mousePos.y}%`,\n                    transform: \"translateY(-50%)\",\n                    width: \"100%\",\n                    height: \"3px\",\n                    background: `linear-gradient(to right, transparent 0%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.95) 10%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.95) 90%, transparent 100%)`,\n                    filter: \"blur(1px)\",\n                    zIndex: 17,\n                    boxShadow: `0 0 10px rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.8), 0 0 20px rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.4)`,\n                  }}\n                />\n                <div\n                  className=\"absolute pointer-events-none\"\n                  style={{\n                    left: `${mousePos.x}%`,\n                    top: `${mousePos.y}%`,\n                    transform: \"translate(-50%, -50%)\",\n                    width: \"12px\",\n                    height: \"12px\",\n                    borderRadius: \"50%\",\n                    zIndex: 18,\n                    background: `radial-gradient(circle, rgba(255, 255, 255, 1) 0%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.9) 30%, rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.6) 60%, transparent 100%)`,\n                    filter: \"blur(0.5px)\",\n                    boxShadow: `0 0 15px rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 1), 0 0 30px rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.6)`,\n                    animation: \"laser-pulse 1s ease-in-out infinite\",\n                  }}\n                />\n                <div\n                  className=\"absolute pointer-events-none\"\n                  style={{\n                    left: `${mousePos.x}%`,\n                    top: `${mousePos.y}%`,\n                    transform: \"translate(-50%, -50%)\",\n                    width: \"40px\",\n                    height: \"40px\",\n                    borderRadius: \"50%\",\n                    zIndex: 19,\n                    border: `2px solid rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.6)`,\n                    animation: \"laser-reticle 2s linear infinite\",\n                  }}\n                >\n                  <div\n                    className=\"absolute inset-2 border rounded-full\"\n                    style={{ borderColor: `rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.4)` }}\n                  >\n                    <div\n                      className=\"absolute inset-2 border rounded-full\"\n                      style={{ borderColor: `rgba(${laserRgb.r}, ${laserRgb.g}, ${laserRgb.b}, 0.2)` }}\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            <div\n              className=\"absolute inset-0 pointer-events-none transition-all duration-300\"\n              style={{\n                background: isHovered\n                  ? `radial-gradient(circle at ${mousePos.x}% ${mousePos.y}%, transparent 0%, transparent ${(120 * intensity) / 8}px, rgba(0, 0, 0, 0.85) ${(120 * intensity) / 4}px)`\n                  : \"rgba(0, 0, 0, 0.85)\",\n                zIndex: 10,\n              }}\n            />\n          </>\n        )\n\n      case \"cosmic\":\n        return (\n          <>\n            <div\n              className=\"absolute inset-0 pointer-events-none\"\n              style={{\n                background: `radial-gradient(circle at ${mousePos.x}% ${mousePos.y}%, rgba(138, 43, 226, 0.3) 0%, rgba(75, 0, 130, 0.2) 30%, rgba(25, 25, 112, 0.1) 60%, transparent 100%)`,\n                filter: `blur(${3 + Math.sin(waveTimeRef.current * 0.02) * 2}px)`,\n                animation: \"cosmic-pulse 8s ease-in-out infinite\",\n              }}\n            />\n            {particles.length > 0 && (\n              <div className=\"absolute inset-0 pointer-events-none\">\n                {particles.map((particle) => (\n                  <div\n                    key={particle.id}\n                    className=\"absolute rounded-full\"\n                    style={{\n                      left: `${particle.x}%`,\n                      top: `${particle.y}%`,\n                      width: `${particle.size}px`,\n                      height: `${particle.size}px`,\n                      transform: \"translate(-50%, -50%)\",\n                      background: `radial-gradient(circle, ${particle.color} 0%, transparent 70%)`,\n                      opacity: particle.life,\n                      filter: `blur(${particle.size > 3 ? 2 : 0.5}px)`,\n                      boxShadow: `0 0 ${particle.size * 4}px ${particle.color}`,\n                      animation: particle.size < 1 ? \"twinkle 2s ease-in-out infinite\" : undefined,\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n            <div\n              className=\"absolute inset-0 pointer-events-none\"\n              style={{\n                background: `conic-gradient(from ${waveTimeRef.current * 0.5}deg at ${mousePos.x}% ${mousePos.y}%, rgba(255, 20, 147, 0.2) 0deg, rgba(138, 43, 226, 0.1) 120deg, rgba(75, 0, 130, 0.2) 240deg, rgba(255, 20, 147, 0.2) 360deg)`,\n                filter: \"blur(4px)\",\n                opacity: isHovered ? 0.8 : 0,\n                transition: \"opacity 1s ease\",\n              }}\n            />\n          </>\n        )\n\n      case \"glitch\":\n        return isHovered ? (\n          <>\n            <div\n              className=\"absolute inset-0 pointer-events-none\"\n              style={{\n                background: `linear-gradient(90deg, rgba(${glitch1Rgb.r}, ${glitch1Rgb.g}, ${glitch1Rgb.b}, 0.15) 0%, transparent 50%, rgba(${glitch2Rgb.r}, ${glitch2Rgb.g}, ${glitch2Rgb.b}, 0.15) 100%)`,\n                transform: `translateX(${glitchOffset.x}px) translateY(${glitchOffset.y}px)`,\n                mixBlendMode: \"screen\",\n              }}\n            />\n            <div\n              className=\"absolute inset-0 pointer-events-none\"\n              style={{\n                background: `linear-gradient(45deg, rgba(${glitch1Rgb.r}, ${glitch1Rgb.g}, ${glitch1Rgb.b}, 0.1) 0%, rgba(${glitch2Rgb.r}, ${glitch2Rgb.g}, ${glitch2Rgb.b}, 0.1) 50%, transparent 100%)`,\n                transform: `translateX(${-glitchOffset.x}px) translateY(${glitchOffset.y * 0.5}px)`,\n                mixBlendMode: \"multiply\",\n              }}\n            />\n            <div\n              className=\"absolute inset-0 pointer-events-none\"\n              style={{\n                background:\n                  \"repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(255, 255, 255, 0.03) 2px, rgba(255, 255, 255, 0.03) 4px)\",\n                animation: \"glitch-lines 0.1s linear infinite\",\n              }}\n            />\n            <div\n              className=\"absolute inset-0 pointer-events-none\"\n              style={{\n                background: `radial-gradient(circle at ${mousePos.x}% ${mousePos.y}%, rgba(${glitch1Rgb.r}, ${glitch1Rgb.g}, ${glitch1Rgb.b}, 0.1) 0%, rgba(${glitch2Rgb.r}, ${glitch2Rgb.g}, ${glitch2Rgb.b}, 0.05) 50%, transparent 100%)`,\n                filter: \"contrast(1.5) brightness(1.2)\",\n                animation: \"glitch-noise 0.2s linear infinite\",\n              }}\n            />\n          </>\n        ) : null\n\n      case \"liquid\":\n        return (\n          <>\n            <div\n              className=\"absolute inset-0 pointer-events-none transition-all duration-200 ease-out\"\n              style={{\n                background: `radial-gradient(circle at ${mousePos.x}% ${mousePos.y}%, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${isHovered ? 0.4 : 0.1}) 0%, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${isHovered ? 0.2 : 0.05}) 30%, transparent 70%)`,\n                filter: `blur(${isHovered ? 20 : 10}px)`,\n                transform: `scale(${isHovered ? 1.2 : 1})`,\n              }}\n            />\n            <div\n              className=\"absolute inset-0 pointer-events-none transition-all duration-300 ease-out\"\n              style={{\n                background: `radial-gradient(circle at ${mousePos.x}% ${mousePos.y}%, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${isHovered ? 0.3 : 0}) 0%, transparent 50%)`,\n                filter: \"blur(40px)\",\n                opacity: isHovered ? 1 : 0,\n              }}\n            />\n            {ripples.map((ripple) => {\n              const age = Date.now() - ripple.time\n              const progress = Math.min(age / 1000, 1)\n              const scale = 1 + progress * 3\n              const opacity = 1 - progress\n              return (\n                <div\n                  key={ripple.id}\n                  className=\"absolute pointer-events-none rounded-full\"\n                  style={{\n                    left: `${ripple.x}%`,\n                    top: `${ripple.y}%`,\n                    width: \"20px\",\n                    height: \"20px\",\n                    transform: `translate(-50%, -50%) scale(${scale})`,\n                    background: `radial-gradient(circle, rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity * 0.6}) 0%, transparent 70%)`,\n                    filter: \"blur(2px)\",\n                  }}\n                />\n              )\n            })}\n          </>\n        )\n\n      default:\n        return null\n    }\n  }\n  const containerStyles = useMemo(\n    () => ({\n      background: backgroundGradient,\n      transformStyle: \"preserve-3d\" as React.CSSProperties[\"transformStyle\"],\n      perspective: \"1000px\",\n      filter: variant === \"glitch\" && isHovered ? `hue-rotate(${waveTimeRef.current * 2}deg) saturate(1.5)` : undefined,\n    }),\n    [backgroundGradient, isHovered, mousePos.x, mousePos.y, variant],\n  )\n\n  useEffect(() => {\n    const container = containerRef.current\n    if (!container || disabled) return\n\n    container.addEventListener(\"mousemove\", handleMouseMove, { passive: true })\n    container.addEventListener(\"mouseenter\", handleMouseEnter, { passive: true })\n    container.addEventListener(\"mouseleave\", handleMouseLeave, { passive: true })\n\n    if (variant === \"liquid\") {\n      container.addEventListener(\"click\", createRipple, { passive: true })\n    }\n\n    return () => {\n      container.removeEventListener(\"mousemove\", handleMouseMove)\n      container.removeEventListener(\"mouseenter\", handleMouseEnter)\n      container.removeEventListener(\"mouseleave\", handleMouseLeave)\n      container.removeEventListener(\"click\", createRipple)\n      if (animationRef.current) cancelAnimationFrame(animationRef.current)\n    }\n  }, [handleMouseMove, handleMouseEnter, handleMouseLeave, createRipple, variant, disabled])\n\n  // Animation effect\n  useEffect(() => {\n    if (isHovered) animate()\n    return () => {\n      if (animationRef.current) cancelAnimationFrame(animationRef.current)\n    }\n  }, [animate, isHovered])\n\n  // cleanup\n  useEffect(() => {\n    if (variant !== \"liquid\") return\n    const interval = setInterval(() => {\n      setRipples((prev) => prev.filter((ripple) => Date.now() - ripple.time < 1000))\n    }, 100)\n    return () => clearInterval(interval)\n  }, [variant])\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative overflow-hidden backdrop-blur-sm cursor-pointer rounded-2xl p-6\",\n        \"border border-white/10 transition-all duration-300 ease-out\",\n        !allowCustomBackground && \"bg-black/20\",\n        isHovered && !disabled && \"shadow-2xl\",\n        disabled && \"opacity-50 cursor-not-allowed\",\n        className,\n      )}\n      style={containerStyles}\n    >\n      {/* variant-specific effects */}\n      {renderEffects()}\n\n      {/* Universal Border Effects */}\n      <div\n        className={cn(\n          \"absolute inset-0 pointer-events-none transition-all duration-200 rounded-2xl\",\n          className?.includes(\"rounded-\") ? \"\" : \"rounded-2xl\",\n        )}\n        style={{\n          background: getBorderGradient(),\n          padding: \"2px\",\n          mask: \"linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)\",\n          maskComposite: \"xor\",\n          WebkitMask: \"linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)\",\n          WebkitMaskComposite: \"xor\",\n          opacity: isHovered ? 1 : 0,\n          filter: `blur(${isHovered ? 0 : 2}px)`,\n        }}\n      />\n\n      {/* Laser Border Glow */}\n      {variant === \"laser\" && (\n        <div\n          className={cn(\n            \"absolute inset-0 pointer-events-none transition-all duration-300 rounded-2xl\",\n            className?.includes(\"rounded-\") ? \"\" : \"rounded-2xl\",\n          )}\n          style={{\n            boxShadow: isHovered\n              ? `\n            0 0 15px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 1),\n            0 0 30px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.9),\n            0 0 45px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.8),\n            0 0 60px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.7),\n            0 0 80px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.6),\n            0 0 100px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.5),\n            inset 0 0 15px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.6),\n            inset 0 0 30px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.4),\n            inset 0 0 45px rgba(${colorData.laserRgb.r}, ${colorData.laserRgb.g}, ${colorData.laserRgb.b}, 0.2)\n          `\n              : \"none\",\n            zIndex: 25,\n          }}\n        />\n      )}\n\n      {/*Glitch Border Glow */}\n      {variant === \"glitch\" && (\n        <div\n          className={cn(\n            \"absolute inset-0 pointer-events-none transition-all duration-300 rounded-2xl\",\n            className?.includes(\"rounded-\") ? \"\" : \"rounded-2xl\",\n          )}\n          style={{\n            boxShadow: isHovered\n              ? `\n            0 0 20px rgba(${colorData.glitch1Rgb.r}, ${colorData.glitch1Rgb.g}, ${colorData.glitch1Rgb.b}, 0.8),\n            0 0 40px rgba(${colorData.glitch2Rgb.r}, ${colorData.glitch2Rgb.g}, ${colorData.glitch2Rgb.b}, 0.6),\n            0 0 60px rgba(${colorData.glitch1Rgb.r}, ${colorData.glitch1Rgb.g}, ${colorData.glitch1Rgb.b}, 0.4)\n          `\n              : \"none\",\n            zIndex: 25,\n          }}\n        />\n      )}\n\n      <div\n        className=\"relative z-30 transition-transform duration-200\"\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ui/glow-card.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"https://nyxui.vercel.app\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}