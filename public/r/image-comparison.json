{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-comparison",
  "type": "registry:ui",
  "title": "Image Comparison",
  "description": "A image comparison component that allows users to compare images.",
  "dependencies": [
    "..",
    "motion"
  ],
  "files": [
    {
      "path": "registry/ui/image-comparison.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"../../lib/utils\";\nimport {\n  useState,\n  createContext,\n  useContext,\n  useEffect,\n  ReactNode,\n  useRef,\n} from \"react\";\nimport {\n  motion,\n  MotionValue,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  AnimationOptions,\n} from \"motion/react\";\n\nconst SliderContext = createContext<\n  | {\n      position: number;\n      setPosition: (pos: number) => void;\n      motionPosition: MotionValue<number>;\n      orientation: \"horizontal\" | \"vertical\";\n      isDragging: boolean;\n      contentDimensions: { width: number; height: number } | null;\n    }\n  | undefined\n>(undefined);\n\nexport type ContrastSliderProps = {\n  children: React.ReactNode;\n  className?: string;\n  hoverControl?: boolean;\n  orientation?: \"horizontal\" | \"vertical\";\n  defaultPosition?: number;\n  animationConfig?: Partial<AnimationOptions>;\n  dividerColor?: string;\n  constrainToContent?: boolean;\n};\n\nconst DEFAULT_ANIMATION_CONFIG = {\n  damping: 15,\n  stiffness: 400,\n  mass: 0.4,\n};\n\nfunction ImageSlider({\n  children,\n  className,\n  hoverControl = false,\n  orientation = \"horizontal\",\n  defaultPosition = 50,\n  animationConfig,\n  dividerColor,\n  constrainToContent = false,\n}: ContrastSliderProps) {\n  const [isActive, setIsActive] = useState(false);\n  const baseMotion = useMotionValue(defaultPosition);\n  const springMotion = useSpring(\n    baseMotion,\n    animationConfig ?? DEFAULT_ANIMATION_CONFIG,\n  );\n  const [position, setPosition] = useState(defaultPosition);\n  const [contentDimensions, setContentDimensions] = useState<{\n    width: number;\n    height: number;\n  } | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const motionToUse = hoverControl ? baseMotion : springMotion;\n\n  useEffect(() => {\n    baseMotion.set(defaultPosition);\n    setPosition(defaultPosition);\n  }, [defaultPosition, baseMotion]);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const updateDimensions = () => {\n        const container = containerRef.current;\n        if (!container) return;\n\n        const firstImg = container.querySelector(\"img\");\n        if (!firstImg) return;\n\n        if (firstImg.complete) {\n          calculateDimensions(firstImg);\n        } else {\n          firstImg.onload = () => calculateDimensions(firstImg);\n        }\n      };\n\n      const calculateDimensions = (img: HTMLImageElement) => {\n        const container = containerRef.current;\n        if (!container) return;\n\n        const { naturalWidth, naturalHeight } = img;\n        const containerParent = container.parentElement;\n        const maxWidth = containerParent?.clientWidth || window.innerWidth;\n        const maxHeight = containerParent?.clientHeight || window.innerHeight;\n        let width, height;\n        const aspectRatio = naturalWidth / naturalHeight;\n\n        if (constrainToContent) {\n          if (naturalWidth > maxWidth) {\n            width = maxWidth;\n            height = maxWidth / aspectRatio;\n          } else if (naturalHeight > maxHeight) {\n            height = maxHeight;\n            width = maxHeight * aspectRatio;\n          } else {\n            width = naturalWidth;\n            height = naturalHeight;\n          }\n        } else {\n          const containerRatio = maxWidth / maxHeight;\n\n          if (aspectRatio > containerRatio) {\n            width = maxWidth;\n            height = maxWidth / aspectRatio;\n          } else {\n            height = maxHeight;\n            width = maxHeight * aspectRatio;\n          }\n        }\n\n        setContentDimensions({ width, height });\n      };\n\n      updateDimensions();\n\n      window.addEventListener(\"resize\", updateDimensions);\n\n      return () => {\n        window.removeEventListener(\"resize\", updateDimensions);\n      };\n    }\n  }, [constrainToContent]);\n\n  const handleInteraction = (event: React.MouseEvent | React.TouchEvent) => {\n    if (!isActive && !hoverControl) return;\n\n    const container = (\n      event.currentTarget as HTMLElement\n    ).getBoundingClientRect();\n\n    let clientX, clientY;\n    if (\"touches\" in event) {\n      clientX = event.touches[0].clientX;\n      clientY = event.touches[0].clientY;\n    } else {\n      clientX = (event as React.MouseEvent).clientX;\n      clientY = (event as React.MouseEvent).clientY;\n    }\n    let interactiveLeft = container.left;\n    let interactiveTop = container.top;\n    let interactiveWidth = container.width;\n    let interactiveHeight = container.height;\n\n    if (contentDimensions) {\n      const offsetX = (container.width - contentDimensions.width) / 2;\n      const offsetY = (container.height - contentDimensions.height) / 2;\n\n      interactiveLeft += offsetX;\n      interactiveTop += offsetY;\n      interactiveWidth = contentDimensions.width;\n      interactiveHeight = contentDimensions.height;\n\n      if (\n        clientX < interactiveLeft ||\n        clientX > interactiveLeft + interactiveWidth ||\n        clientY < interactiveTop ||\n        clientY > interactiveTop + interactiveHeight\n      ) {\n        return;\n      }\n    }\n\n    let percentValue;\n    if (orientation === \"horizontal\") {\n      const xPos = clientX - interactiveLeft;\n      percentValue = Math.min(\n        Math.max((xPos / interactiveWidth) * 100, 0),\n        100,\n      );\n    } else {\n      const yPos = clientY - interactiveTop;\n      percentValue = Math.min(\n        Math.max((yPos / interactiveHeight) * 100, 0),\n        100,\n      );\n    }\n\n    baseMotion.set(percentValue);\n    setPosition(percentValue);\n  };\n\n  return (\n    <SliderContext.Provider\n      value={{\n        position,\n        setPosition,\n        motionPosition: motionToUse,\n        orientation,\n        isDragging: isActive || hoverControl,\n        contentDimensions,\n      }}\n    >\n      <div\n        ref={containerRef}\n        className={cn(\n          \"relative select-none overflow-hidden rounded-lg\",\n          constrainToContent ? \"inline-block\" : \"w-full h-full\",\n          hoverControl &&\n            (orientation === \"horizontal\"\n              ? \"cursor-ew-resize\"\n              : \"cursor-ns-resize\"),\n          className,\n        )}\n        onMouseMove={handleInteraction}\n        onMouseDown={() => !hoverControl && setIsActive(true)}\n        onMouseUp={() => !hoverControl && setIsActive(false)}\n        onMouseLeave={() => !hoverControl && setIsActive(false)}\n        onTouchMove={handleInteraction}\n        onTouchStart={() => !hoverControl && setIsActive(true)}\n        onTouchEnd={() => !hoverControl && setIsActive(false)}\n        style={\n          {\n            \"--divider-color\": dividerColor || \"#ffffff\",\n            width: contentDimensions\n              ? `${contentDimensions.width}px`\n              : undefined,\n            height: contentDimensions\n              ? `${contentDimensions.height}px`\n              : undefined,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          } as React.CSSProperties\n        }\n      >\n        <div\n          className=\"relative overflow-hidden rounded-lg\"\n          style={{\n            width: contentDimensions ? `${contentDimensions.width}px` : \"100%\",\n            height: contentDimensions\n              ? `${contentDimensions.height}px`\n              : \"100%\",\n          }}\n        >\n          {children}\n        </div>\n      </div>\n    </SliderContext.Provider>\n  );\n}\n\ntype ImageLayerProps = {\n  className?: string;\n  alt: string;\n  src: string;\n  layer: \"first\" | \"second\";\n  loading?: \"lazy\" | \"eager\";\n  priority?: boolean;\n};\n\nconst ImageLayer = ({\n  className,\n  alt,\n  src,\n  layer,\n  loading = \"eager\",\n  priority = false,\n}: ImageLayerProps) => {\n  const { motionPosition, orientation } = useContext(SliderContext)!;\n\n  const firstLayerClip = useTransform(motionPosition, (value) =>\n    orientation === \"horizontal\"\n      ? `inset(0 0 0 ${value}%)`\n      : `inset(${value}% 0 0 0)`,\n  );\n\n  const secondLayerClip = useTransform(motionPosition, (value) =>\n    orientation === \"horizontal\"\n      ? `inset(0 ${100 - value}% 0 0)`\n      : `inset(0 0 ${100 - value}% 0)`,\n  );\n\n  return (\n    <motion.img\n      src={src}\n      alt={alt}\n      loading={loading}\n      fetchPriority={priority ? \"high\" : \"auto\"}\n      className={cn(`absolute inset-0 h-full w-full object-contain`, className)}\n      style={{\n        clipPath: layer === \"first\" ? firstLayerClip : secondLayerClip,\n        willChange: \"clip-path\",\n      }}\n    />\n  );\n};\n\ntype DividerProps = {\n  className?: string;\n  children?: React.ReactNode;\n  width?: number;\n  showHandle?: boolean;\n  handleSize?: number;\n  handleColor?: string;\n  handleIcon?: ReactNode;\n  hitAreaSize?: number;\n};\n\nconst Divider = ({\n  className,\n  children,\n  width = 2,\n  showHandle = true,\n  handleSize = 24,\n  handleColor,\n  handleIcon,\n  hitAreaSize = 20,\n}: DividerProps) => {\n  const { motionPosition, orientation, isDragging } =\n    useContext(SliderContext)!;\n  const dividerPosition = useTransform(motionPosition, (value) => `${value}%`);\n\n  return (\n    <motion.div\n      className={cn(\n        \"absolute\",\n        orientation === \"horizontal\"\n          ? `bottom-0 top-0 cursor-ew-resize`\n          : `left-0 right-0 cursor-ns-resize`,\n        className,\n      )}\n      style={{\n        left: orientation === \"horizontal\" ? dividerPosition : 0,\n        top: orientation === \"vertical\" ? dividerPosition : 0,\n        width: orientation === \"horizontal\" ? `${width}px` : \"100%\",\n        height: orientation === \"vertical\" ? `${width}px` : \"100%\",\n        backgroundColor: \"var(--divider-color)\",\n        willChange: \"transform, left, top\",\n        pointerEvents: \"all\",\n        zIndex: 5,\n      }}\n    >\n      <div\n        className=\"absolute bg-transparent\"\n        style={{\n          left: orientation === \"horizontal\" ? `${-hitAreaSize / 2}px` : 0,\n          right: orientation === \"horizontal\" ? `${-hitAreaSize / 2}px` : 0,\n          top: orientation === \"vertical\" ? `${-hitAreaSize / 2}px` : 0,\n          bottom: orientation === \"vertical\" ? `${-hitAreaSize / 2}px` : 0,\n          width:\n            orientation === \"horizontal\" ? `${width + hitAreaSize}px` : \"100%\",\n          height:\n            orientation === \"vertical\" ? `${width + hitAreaSize}px` : \"100%\",\n          cursor: orientation === \"horizontal\" ? \"ew-resize\" : \"ns-resize\",\n          zIndex: 10,\n        }}\n      />\n\n      {showHandle && (\n        <div\n          className={cn(\n            \"absolute rounded-full bg-white shadow-lg flex items-center justify-center transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200\",\n            isDragging && \"scale-110\",\n          )}\n          style={{\n            width: `${handleSize}px`,\n            height: `${handleSize}px`,\n            left: orientation === \"horizontal\" ? \"50%\" : \"50%\",\n            top: orientation === \"vertical\" ? \"50%\" : \"50%\",\n            backgroundColor: handleColor || \"var(--divider-color)\",\n            willChange: \"transform\",\n            zIndex: 20,\n          }}\n        >\n          {handleIcon || children}\n        </div>\n      )}\n    </motion.div>\n  );\n};\n\nexport { ImageSlider, ImageLayer, Divider };\n",
      "type": "registry:ui",
      "target": "components/ui/image-comparison.tsx"
    }
  ]
}