{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "keyboard",
  "type": "registry:ui",
  "title": "Keyboard",
  "description": "A keyboard component that simulates a physical keyboard.",
  "dependencies": [
    "lucide-react",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ui/keyboard.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Command,\n  ArrowUp,\n  ArrowDown,\n  ArrowLeft,\n  ArrowRight,\n  ChevronsUp,\n  Menu,\n} from \"lucide-react\";\n\ninterface KeyObject {\n  label?: string;\n  code?: string;\n  size: number;\n  spacer?: boolean;\n  type?: string;\n  icon?: string;\n}\ninterface KeyboardRow {\n  function?: boolean;\n  keys: KeyObject[];\n  nav?: KeyObject[];\n}\ninterface InteractiveKeyboardProps {\n  layout?: \"standard\" | \"compact\";\n  showFunctionKeys?: boolean;\n  showNavigationCluster?: boolean;\n  activeKeys?: string[];\n  activeKeyGlowColor?: string;\n  activeKeyGlowIntensity?: number;\n  theme?: \"cyberpunk\" | \"minimal\" | \"retro\" | \"mechanical\" | \"neon\" | \"pastel\";\n  keyColor?: string;\n  keyTextColor?: string;\n  accentColor?: string;\n  keyPressedColor?: string;\n  keyPressAnimationDuration?: number;\n  onKeyPress?: (code: string, key?: string) => void;\n  onKeyRelease?: (code: string, key?: string) => void;\n  className?: string;\n  allowPhysicalKeyboard?: boolean;\n  perspective?: number;\n  rotateX?: number;\n  [key: string]: unknown;\n}\n\ninterface KeyStyleProps {\n  background: string;\n  color: string;\n  boxShadow: string;\n  textShadow?: string;\n  border: string;\n  fontFamily?: string;\n  fontWeight?: string | number;\n  fontSize?: string;\n  borderRadius?: string;\n  letterSpacing?: string;\n  transform?: string;\n  transition?: string;\n  height?: string;\n  marginBottom?: string;\n  padding?: string;\n  width?: string;\n}\n\ninterface ThemeStyles {\n  keyboard: {\n    background: string;\n    boxShadow: string;\n    border: string;\n    borderRadius?: string;\n    marginBottom?: string;\n    padding?: string;\n    width?: string;\n  };\n  key: KeyStyleProps;\n  keyPressed: KeyStyleProps;\n  keyHover: KeyStyleProps;\n  keyActive?: KeyStyleProps;\n  specialKey?: KeyStyleProps;\n  functionKey?: KeyStyleProps;\n  modifierKey?: KeyStyleProps;\n  spaceKey?: KeyStyleProps;\n  arrowKey?: KeyStyleProps;\n}\n\nconst InteractiveKeyboard: React.FC<InteractiveKeyboardProps> = ({\n  layout = \"standard\",\n  showFunctionKeys = true,\n  showNavigationCluster = true,\n  activeKeys = [],\n  activeKeyGlowColor = \"#6366f1\",\n  activeKeyGlowIntensity = 0.8,\n  theme = \"cyberpunk\",\n  keyColor = \"#2a2a2a\",\n  keyTextColor = \"#ffffff\",\n  accentColor = \"#6366f1\",\n  keyPressedColor = \"#333333\",\n  keyPressAnimationDuration = 150,\n  onKeyPress = () => {},\n  onKeyRelease = () => {},\n  className = \"\",\n  allowPhysicalKeyboard = true,\n  perspective = 1000,\n  rotateX = 10,\n  ...props\n}) => {\n  const [pressedKeys, setPressedKeys] = useState<Set<string>>(new Set());\n  const getKeyboardLayout = (): KeyboardRow[] => {\n    switch (layout) {\n      case \"compact\":\n        return getStandardLayout().filter((row) => !row.function);\n      case \"standard\":\n      default:\n        return getStandardLayout();\n    }\n  };\n\n  const getStandardLayout = (): KeyboardRow[] => {\n    return [\n      {\n        function: true,\n        keys: [\n          { label: \"Esc\", code: \"Escape\", size: 1 },\n          { spacer: true, size: 1 },\n          { label: \"F1\", code: \"F1\", size: 1 },\n          { label: \"F2\", code: \"F2\", size: 1 },\n          { label: \"F3\", code: \"F3\", size: 1 },\n          { label: \"F4\", code: \"F4\", size: 1 },\n          { spacer: true, size: 0.5 },\n          { label: \"F5\", code: \"F5\", size: 1 },\n          { label: \"F6\", code: \"F6\", size: 1 },\n          { label: \"F7\", code: \"F7\", size: 1 },\n          { label: \"F8\", code: \"F8\", size: 1 },\n          { spacer: true, size: 0.5 },\n          { label: \"F9\", code: \"F9\", size: 1 },\n          { label: \"F10\", code: \"F10\", size: 1 },\n          { label: \"F11\", code: \"F11\", size: 1 },\n          { label: \"F12\", code: \"F12\", size: 1 },\n        ],\n        nav: [\n          { spacer: true, size: 0.5 },\n          { type: \"light\", size: 0.5, code: \"light1\" },\n          { type: \"light\", size: 0.5, code: \"light2\" },\n          { type: \"light\", size: 0.5, code: \"light3\" },\n        ],\n      },\n      {\n        keys: [\n          { label: \"`\", code: \"Backquote\", size: 1 },\n          { label: \"1\", code: \"Digit1\", size: 1 },\n          { label: \"2\", code: \"Digit2\", size: 1 },\n          { label: \"3\", code: \"Digit3\", size: 1 },\n          { label: \"4\", code: \"Digit4\", size: 1 },\n          { label: \"5\", code: \"Digit5\", size: 1 },\n          { label: \"6\", code: \"Digit6\", size: 1 },\n          { label: \"7\", code: \"Digit7\", size: 1 },\n          { label: \"8\", code: \"Digit8\", size: 1 },\n          { label: \"9\", code: \"Digit9\", size: 1 },\n          { label: \"0\", code: \"Digit0\", size: 1 },\n          { label: \"-\", code: \"Minus\", size: 1 },\n          { label: \"=\", code: \"Equal\", size: 1 },\n          { label: \"Backspace\", code: \"Backspace\", size: 2 },\n        ],\n        nav: [\n          { label: \"Del\", code: \"Delete\", size: 1 },\n          { label: \"End\", code: \"End\", size: 1 },\n          { label: \"PgDn\", code: \"PageDown\", size: 1 },\n        ],\n      },\n      {\n        keys: [\n          { label: \"Tab\", code: \"Tab\", size: 1.5 },\n          { label: \"Q\", code: \"KeyQ\", size: 1 },\n          { label: \"W\", code: \"KeyW\", size: 1 },\n          { label: \"E\", code: \"KeyE\", size: 1 },\n          { label: \"R\", code: \"KeyR\", size: 1 },\n          { label: \"T\", code: \"KeyT\", size: 1 },\n          { label: \"Y\", code: \"KeyY\", size: 1 },\n          { label: \"U\", code: \"KeyU\", size: 1 },\n          { label: \"I\", code: \"KeyI\", size: 1 },\n          { label: \"O\", code: \"KeyO\", size: 1 },\n          { label: \"P\", code: \"KeyP\", size: 1 },\n          { label: \"[\", code: \"BracketLeft\", size: 1 },\n          { label: \"]\", code: \"BracketRight\", size: 1 },\n          { label: \"\\\\\", code: \"Backslash\", size: 1.5 },\n        ],\n        nav: [\n          { label: \"Ins\", code: \"Insert\", size: 1 },\n          { label: \"Home\", code: \"Home\", size: 1 },\n          { label: \"PgUp\", code: \"PageUp\", size: 1 },\n        ],\n      },\n      {\n        keys: [\n          { label: \"Caps\", code: \"CapsLock\", size: 1.75, icon: \"capslock\" },\n          { label: \"A\", code: \"KeyA\", size: 1 },\n          { label: \"S\", code: \"KeyS\", size: 1 },\n          { label: \"D\", code: \"KeyD\", size: 1 },\n          { label: \"F\", code: \"KeyF\", size: 1 },\n          { label: \"G\", code: \"KeyG\", size: 1 },\n          { label: \"H\", code: \"KeyH\", size: 1 },\n          { label: \"J\", code: \"KeyJ\", size: 1 },\n          { label: \"K\", code: \"KeyK\", size: 1 },\n          { label: \"L\", code: \"KeyL\", size: 1 },\n          { label: \";\", code: \"Semicolon\", size: 1 },\n          { label: \"'\", code: \"Quote\", size: 1 },\n          { label: \"Enter\", code: \"Enter\", size: 2.25 },\n        ],\n        nav: [\n          { label: \"Print\", code: \"PrintScreen\", size: 1 },\n          { label: \"Scroll\", code: \"ScrollLock\", size: 1 },\n          { label: \"Pause\", code: \"Pause\", size: 1 },\n        ],\n      },\n      {\n        keys: [\n          { label: \"Shift\", code: \"ShiftLeft\", size: 2.25 },\n          { label: \"Z\", code: \"KeyZ\", size: 1 },\n          { label: \"X\", code: \"KeyX\", size: 1 },\n          { label: \"C\", code: \"KeyC\", size: 1 },\n          { label: \"V\", code: \"KeyV\", size: 1 },\n          { label: \"B\", code: \"KeyB\", size: 1 },\n          { label: \"N\", code: \"KeyN\", size: 1 },\n          { label: \"M\", code: \"KeyM\", size: 1 },\n          { label: \",\", code: \"Comma\", size: 1 },\n          { label: \".\", code: \"Period\", size: 1 },\n          { label: \"/\", code: \"Slash\", size: 1 },\n          { label: \"Shift\", code: \"ShiftRight\", size: 2.75 },\n        ],\n        nav: [\n          { spacer: true, size: 1 },\n          { label: \"\", code: \"ArrowUp\", size: 1, icon: \"arrowup\" },\n          { spacer: true, size: 1 },\n        ],\n      },\n      {\n        keys: [\n          { label: \"Ctrl\", code: \"ControlLeft\", size: 1.25 },\n          { label: \"\", code: \"MetaLeft\", size: 1.25, icon: \"windows\" },\n          { label: \"Alt\", code: \"AltLeft\", size: 1.25 },\n          { label: \"Space\", code: \"Space\", size: 6.25 },\n          { label: \"Alt\", code: \"AltRight\", size: 1.25 },\n          { label: \"\", code: \"MetaRight\", size: 1.25, icon: \"windows\" },\n          { label: \"\", code: \"ContextMenu\", size: 1.25, icon: \"menu\" },\n          { label: \"Ctrl\", code: \"ControlRight\", size: 1.25 },\n        ],\n        nav: [\n          { label: \"\", code: \"ArrowLeft\", size: 1, icon: \"arrowleft\" },\n          { label: \"\", code: \"ArrowDown\", size: 1, icon: \"arrowdown\" },\n          { label: \"\", code: \"ArrowRight\", size: 1, icon: \"arrowright\" },\n        ],\n      },\n    ];\n  };\n\n  useEffect(() => {\n    if (!allowPhysicalKeyboard) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      setPressedKeys((prev) => {\n        const newSet = new Set(prev);\n        newSet.add(e.code);\n        return newSet;\n      });\n\n      onKeyPress(e.code, e.key);\n    };\n    const handleKeyUp = (e: KeyboardEvent) => {\n      setPressedKeys((prev) => {\n        const newSet = new Set(prev);\n        newSet.delete(e.code);\n        return newSet;\n      });\n      onKeyRelease(e.code, e.key);\n    };\n    if (allowPhysicalKeyboard) {\n      window.addEventListener(\"keydown\", handleKeyDown);\n      window.addEventListener(\"keyup\", handleKeyUp);\n    }\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, [allowPhysicalKeyboard, onKeyPress, onKeyRelease]);\n\n  const handleKeyDown = (code: string) => {\n    setPressedKeys((prev) => {\n      const newSet = new Set(prev);\n      newSet.add(code);\n      return newSet;\n    });\n\n    onKeyPress(code);\n  };\n\n  const handleKeyUp = (code: string) => {\n    setPressedKeys((prev) => {\n      const newSet = new Set(prev);\n      newSet.delete(code);\n      return newSet;\n    });\n\n    onKeyRelease(code);\n  };\n\n  const getThemeStyles = (): ThemeStyles => {\n    switch (theme) {\n      case \"minimal\":\n        return {\n          keyboard: {\n            background: \"linear-gradient(to bottom, #ffffff, #f8f9fa)\",\n            boxShadow:\n              \"0 10px 30px rgba(0, 0, 0, 0.08), 0 6px 10px rgba(0, 0, 0, 0.05)\",\n            border: \"1px solid rgba(0, 0, 0, 0.06)\",\n            borderRadius: \"10px\",\n          },\n          key: {\n            background: \"linear-gradient(to bottom, #ffffff, #f7f7f9)\",\n            color: \"#333333\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.8)\",\n            textShadow: \"none\",\n            border: \"1px solid rgba(0, 0, 0, 0.08)\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            fontWeight: \"500\",\n            fontSize: \"11px\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n          keyPressed: {\n            background: \"linear-gradient(to bottom, #f0f0f0, #e8e8e8)\",\n            boxShadow: \"inset 0 1px 2px rgba(0, 0, 0, 0.08)\",\n            color: accentColor,\n            border: \"1px solid rgba(0, 0, 0, 0.12)\",\n            transform: \"translateY(1px)\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.05s ease\",\n          },\n          keyHover: {\n            background: \"linear-gradient(to bottom, #ffffff, #f9f9f9)\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.08), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            color: accentColor,\n            border: \"1px solid rgba(0, 0, 0, 0.1)\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n          keyActive: {\n            background: \"linear-gradient(to bottom, #ffffff, #f5f5f7)\",\n            boxShadow: `0 0 10px ${activeKeyGlowColor}, inset 0 1px 0 rgba(255, 255, 255, 0.8)`,\n            color: activeKeyGlowColor,\n            border: `1px solid ${activeKeyGlowColor}`,\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: `0 0 5px ${activeKeyGlowColor}`,\n            borderRadius: \"5px\",\n            transition: \"all 0.1s ease\",\n          },\n          specialKey: {\n            background: \"linear-gradient(to bottom, #f8f8fa, #eff0f2)\",\n            color: \"#555555\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.8)\",\n            border: \"1px solid rgba(0, 0, 0, 0.08)\",\n            fontSize: \"10px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n          functionKey: {\n            background: \"linear-gradient(to bottom, #f2f2f4, #eaeaec)\",\n            color: \"#666666\",\n            fontSize: \"9px\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.8)\",\n            border: \"1px solid rgba(0, 0, 0, 0.08)\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n          modifierKey: {\n            background: \"linear-gradient(to bottom, #f2f2f4, #eaeaec)\",\n            color: \"#555555\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.8)\",\n            border: \"1px solid rgba(0, 0, 0, 0.08)\",\n            fontSize: \"10px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n          spaceKey: {\n            background: \"linear-gradient(to bottom, #ffffff, #f8f8f8)\",\n            color: \"#333333\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.8)\",\n            border: \"1px solid rgba(0, 0, 0, 0.08)\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n          arrowKey: {\n            background: \"linear-gradient(to bottom, #f2f2f4, #eaeaec)\",\n            color: \"#555555\",\n            boxShadow:\n              \"0 2px 3px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.8)\",\n            border: \"1px solid rgba(0, 0, 0, 0.08)\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: \"system-ui, -apple-system, sans-serif\",\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.15s ease\",\n          },\n        };\n\n      case \"retro\":\n        return {\n          keyboard: {\n            background: \"linear-gradient(to bottom, #f5f0e8, #e8e0d0)\",\n            boxShadow:\n              \"0 8px 20px rgba(120, 100, 80, 0.2), 0 4px 8px rgba(120, 100, 80, 0.1), inset 0 1px 0 #fff\",\n            border: \"2px solid #d0c0a0\",\n            borderRadius: \"8px\",\n            padding: \"8px\",\n          },\n          key: {\n            background: \"linear-gradient(to bottom, #fff8e8, #f0e8d8)\",\n            color: \"#705030\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            textShadow: \"none\",\n            border: \"1px solid #d0c0a0\",\n            fontFamily: '\"Courier New\", monospace',\n            fontWeight: \"600\",\n            fontSize: \"11px\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          keyPressed: {\n            background: \"linear-gradient(to bottom, #e8d8c0, #d8c8b0)\",\n            boxShadow: \"0 0 0 #c0b090, inset 0 1px 2px rgba(120, 100, 80, 0.2)\",\n            color: \"#604020\",\n            textShadow: \"none\",\n            border: \"1px solid #c0b090\",\n            transform: \"translateY(4px)\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            borderRadius: \"6px\",\n            marginBottom: \"0px\",\n            transition: \"all 0.05s ease\",\n          },\n          keyHover: {\n            background: \"linear-gradient(to bottom, #fffaf0, #f8f0e0)\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            color: \"#604020\",\n            border: \"1px solid #c0b090\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          keyActive: {\n            background: \"linear-gradient(to bottom, #fff8e8, #f0e8d8)\",\n            boxShadow: `0 4px 0 #c0b090, 0 0 15px ${activeKeyGlowColor}, inset 0 1px 0 #fffaf0`,\n            color: activeKeyGlowColor,\n            textShadow: `0 0 5px ${activeKeyGlowColor}`,\n            border: `1px solid ${activeKeyGlowColor}`,\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          specialKey: {\n            background: \"linear-gradient(to bottom, #f0e8d8, #e0d0c0)\",\n            color: \"#604020\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            border: \"1px solid #d0c0a0\",\n            fontSize: \"10px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          functionKey: {\n            background: \"linear-gradient(to bottom, #e8d8c0, #d8c8b0)\",\n            color: \"#604020\",\n            fontSize: \"9px\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            border: \"1px solid #d0c0a0\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          modifierKey: {\n            background: \"linear-gradient(to bottom, #e8d8c0, #d8c8b0)\",\n            color: \"#604020\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            border: \"1px solid #d0c0a0\",\n            fontSize: \"10px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          spaceKey: {\n            background: \"linear-gradient(to bottom, #fff8e8, #f0e8d8)\",\n            color: \"#705030\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            border: \"1px solid #d0c0a0\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n          arrowKey: {\n            background: \"linear-gradient(to bottom, #e8d8c0, #d8c8b0)\",\n            color: \"#604020\",\n            boxShadow: \"0 4px 0 #c0b090, inset 0 1px 0 #fffaf0\",\n            border: \"1px solid #d0c0a0\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Courier New\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"6px\",\n            transition: \"all 0.12s ease-out\",\n            marginBottom: \"4px\",\n          },\n        };\n\n      case \"cyberpunk\":\n        return {\n          keyboard: {\n            background: `#1A1A1A`,\n            boxShadow: `0 15px 40px rgba(0, 0, 0, 0.3), 0 10px 20px rgba(0, 0, 0, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.05), inset 0 -1px 0 rgba(0, 0, 0, 0.5)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -20)}`,\n            borderRadius: \"12px\",\n          },\n          key: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(keyColor, 10)}, ${keyColor})`,\n            color: keyTextColor,\n            boxShadow: `0 3px 0 ${adjustColorBrightness(\n              keyColor,\n              -20,\n            )}, 0 0 10px rgba(0, 0, 0, 0.2), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            textShadow: `0 0 5px rgba(255, 255, 255, 0.3)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -10)}`,\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            fontWeight: \"600\",\n            fontSize: \"11px\",\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          keyPressed: {\n            background: `linear-gradient(145deg, ${keyPressedColor}, ${adjustColorBrightness(keyPressedColor, -10)})`,\n            boxShadow: `0 0 0 ${adjustColorBrightness(keyColor, -20)}, 0 0 15px rgba(${hexToRgb(\n              accentColor,\n            )}, 0.5), inset 0 1px 2px rgba(0, 0, 0, 0.3)`,\n            color: accentColor,\n            textShadow: `0 0 8px rgba(${hexToRgb(accentColor)}, 0.7)`,\n            border: `1px solid ${adjustColorBrightness(keyPressedColor, 10)}`,\n            transform: \"translateY(2px)\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.08s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          keyHover: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(\n              keyColor,\n              15,\n            )}, ${adjustColorBrightness(keyColor, 5)})`,\n            boxShadow: `0 3px 0 ${adjustColorBrightness(keyColor, -20)}, 0 0 12px rgba(${hexToRgb(\n              accentColor,\n            )}, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.15)`,\n            color: accentColor,\n            textShadow: `0 0 8px rgba(${hexToRgb(accentColor)}, 0.5)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, 0)}`,\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          keyActive: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(keyColor, 10)}, ${keyColor})`,\n            boxShadow: `0 3px 0 ${adjustColorBrightness(keyColor, -20)}, 0 0 20px rgba(${hexToRgb(\n              activeKeyGlowColor,\n            )}, ${activeKeyGlowIntensity}), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            color: activeKeyGlowColor,\n            textShadow: `0 0 10px rgba(${hexToRgb(activeKeyGlowColor)}, 0.9)`,\n            border: `1px solid ${activeKeyGlowColor}`,\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          specialKey: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(\n              keyColor,\n              0,\n            )}, ${adjustColorBrightness(keyColor, -10)})`,\n            color: adjustColorBrightness(keyTextColor, -10),\n            boxShadow: `0 3px 0 ${adjustColorBrightness(\n              keyColor,\n              -20,\n            )}, 0 0 10px rgba(0, 0, 0, 0.2), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -10)}`,\n            fontSize: \"10px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            textShadow: `0 0 5px rgba(255, 255, 255, 0.3)`,\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          functionKey: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(\n              keyColor,\n              -5,\n            )}, ${adjustColorBrightness(keyColor, -15)})`,\n            color: adjustColorBrightness(keyTextColor, -15),\n            fontSize: \"9px\",\n            boxShadow: `0 3px 0 ${adjustColorBrightness(\n              keyColor,\n              -20,\n            )}, 0 0 10px rgba(0, 0, 0, 0.2), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -10)}`,\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            textShadow: `0 0 5px rgba(255, 255, 255, 0.3)`,\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          modifierKey: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(\n              keyColor,\n              -5,\n            )}, ${adjustColorBrightness(keyColor, -15)})`,\n            color: adjustColorBrightness(keyTextColor, -5),\n            boxShadow: `0 3px 0 ${adjustColorBrightness(\n              keyColor,\n              -20,\n            )}, 0 0 10px rgba(0, 0, 0, 0.2), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -10)}`,\n            fontSize: \"10px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            textShadow: `0 0 5px rgba(255, 255, 255, 0.3)`,\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          spaceKey: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(\n              keyColor,\n              5,\n            )}, ${adjustColorBrightness(keyColor, -5)})`,\n            color: keyTextColor,\n            boxShadow: `0 3px 0 ${adjustColorBrightness(\n              keyColor,\n              -20,\n            )}, 0 0 10px rgba(0, 0, 0, 0.2), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -10)}`,\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            textShadow: `0 0 5px rgba(255, 255, 255, 0.3)`,\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n          arrowKey: {\n            background: `linear-gradient(145deg, ${adjustColorBrightness(\n              keyColor,\n              -5,\n            )}, ${adjustColorBrightness(keyColor, -15)})`,\n            color: accentColor,\n            boxShadow: `0 3px 0 ${adjustColorBrightness(\n              keyColor,\n              -20,\n            )}, 0 0 10px rgba(0, 0, 0, 0.2), inset 0 1px 1px rgba(255, 255, 255, 0.1)`,\n            border: `1px solid ${adjustColorBrightness(keyColor, -10)}`,\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"Inter\", \"SF Pro Display\", system-ui, sans-serif',\n            textShadow: `0 0 5px rgba(${hexToRgb(accentColor)}, 0.5)`,\n            borderRadius: \"6px\",\n            letterSpacing: \"0.5px\",\n            transition: \"all 0.15s cubic-bezier(0.23, 1, 0.32, 1)\",\n          },\n        };\n      case \"neon\":\n        return {\n          keyboard: {\n            background: \"linear-gradient(to bottom, #121212, #1a1a1a)\",\n            boxShadow:\n              \"0 15px 40px rgba(0, 0, 0, 0.4), 0 10px 20px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #333\",\n            borderRadius: \"12px\",\n            padding: \"10px\",\n          },\n          key: {\n            background: \"linear-gradient(to bottom, #222222, #111111)\",\n            color: \"#00ffcc\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            textShadow: \"0 0 8px rgba(0, 255, 204, 0.7)\",\n            border: \"1px solid #333\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            fontWeight: \"500\",\n            fontSize: \"11px\",\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          keyPressed: {\n            background: \"linear-gradient(to bottom, #111111, #0a0a0a)\",\n            boxShadow:\n              \"0 0 0 #000, 0 0 15px rgba(0, 255, 204, 0.7), inset 0 1px 2px rgba(0, 0, 0, 0.5)\",\n            color: \"#ffffff\",\n            textShadow: \"0 0 10px rgba(0, 255, 204, 1)\",\n            border: \"1px solid #00ffcc\",\n            transform: \"translateY(3px)\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            borderRadius: \"6px\",\n            transition: \"all 0.05s ease\",\n          },\n          keyHover: {\n            background: \"linear-gradient(to bottom, #2a2a2a, #191919)\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 12px rgba(0, 255, 204, 0.4), inset 0 1px 1px rgba(255, 255, 255, 0.1)\",\n            color: \"#ffffff\",\n            textShadow: \"0 0 8px rgba(0, 255, 204, 0.8)\",\n            border: \"1px solid #00aa88\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          keyActive: {\n            background: \"linear-gradient(to bottom, #222222, #111111)\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 20px rgba(0, 255, 204, 0.8), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            color: \"#ffffff\",\n            textShadow: \"0 0 15px rgba(0, 255, 204, 1)\",\n            border: \"1px solid #00ffcc\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          specialKey: {\n            background: \"linear-gradient(to bottom, #191919, #0d0d0d)\",\n            color: \"#ff3399\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #333\",\n            fontSize: \"10px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            textShadow: \"0 0 8px rgba(255, 51, 153, 0.7)\",\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          functionKey: {\n            background: \"linear-gradient(to bottom, #191919, #0d0d0d)\",\n            color: \"#3399ff\",\n            fontSize: \"9px\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #333\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            textShadow: \"0 0 8px rgba(51, 153, 255, 0.7)\",\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          modifierKey: {\n            background: \"linear-gradient(to bottom, #191919, #0d0d0d)\",\n            color: \"#ffcc00\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #333\",\n            fontSize: \"10px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            textShadow: \"0 0 8px rgba(255, 204, 0, 0.7)\",\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          spaceKey: {\n            background: \"linear-gradient(to bottom, #222222, #111111)\",\n            color: \"#00ffcc\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #333\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            textShadow: \"0 0 8px rgba(0, 255, 204, 0.7)\",\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n          arrowKey: {\n            background: \"linear-gradient(to bottom, #191919, #0d0d0d)\",\n            color: \"#ff9900\",\n            boxShadow:\n              \"0 3px 0 #000, 0 0 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #333\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Orbitron\", sans-serif',\n            textShadow: \"0 0 8px rgba(255, 153, 0, 0.7)\",\n            borderRadius: \"6px\",\n            transition: \"all 0.15s ease\",\n          },\n        };\n\n      case \"pastel\":\n        return {\n          keyboard: {\n            background: \"linear-gradient(to bottom, #f0e6f6, #e7ddf0)\",\n            boxShadow:\n              \"0 12px 30px rgba(200, 180, 220, 0.3), 0 8px 15px rgba(200, 180, 220, 0.2)\",\n            border: \"1px solid #d8cceb\",\n            borderRadius: \"16px\",\n            padding: \"12px\",\n          },\n          key: {\n            background: \"linear-gradient(to bottom, #ffffff, #f5f0f9)\",\n            color: \"#7b6d8d\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 5px rgba(0, 0, 0, 0.03), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            textShadow: \"none\",\n            border: \"1px solid #e2d7f0\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            fontWeight: \"500\",\n            fontSize: \"11px\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          keyPressed: {\n            background: \"linear-gradient(to bottom, #f0e6f9, #e7ddf5)\",\n            boxShadow: \"0 0 0 #d8cceb, inset 0 1px 2px rgba(0, 0, 0, 0.05)\",\n            color: \"#9370db\",\n            textShadow: \"none\",\n            border: \"1px solid #d8cceb\",\n            transform: \"translateY(3px)\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            borderRadius: \"10px\",\n            transition: \"all 0.1s ease\",\n          },\n          keyHover: {\n            background: \"linear-gradient(to bottom, #ffffff, #f9f5fc)\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 8px rgba(155, 122, 188, 0.2), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            color: \"#9370db\",\n            border: \"1px solid #d8cceb\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            textShadow: \"none\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          keyActive: {\n            background: \"linear-gradient(to bottom, #ffffff, #f5f0f9)\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 12px rgba(155, 122, 188, 0.4), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            color: \"#9370db\",\n            textShadow: \"0 0 3px rgba(155, 122, 188, 0.3)\",\n            border: \"1px solid #b79ce8\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          specialKey: {\n            background: \"linear-gradient(to bottom, #f9f0fc, #f0e6f6)\",\n            color: \"#9382ab\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 5px rgba(0, 0, 0, 0.03), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            border: \"1px solid #e2d7f0\",\n            fontSize: \"10px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            textShadow: \"none\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          functionKey: {\n            background: \"linear-gradient(to bottom, #f0e6f6, #e7ddf0)\",\n            color: \"#a58cc4\",\n            fontSize: \"9px\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 5px rgba(0, 0, 0, 0.03), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            border: \"1px solid #e2d7f0\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            textShadow: \"none\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          modifierKey: {\n            background: \"linear-gradient(to bottom, #f0e6f6, #e7ddf0)\",\n            color: \"#9382ab\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 5px rgba(0, 0, 0, 0.03), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            border: \"1px solid #e2d7f0\",\n            fontSize: \"10px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            textShadow: \"none\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          spaceKey: {\n            background: \"linear-gradient(to bottom, #ffffff, #f5f0f9)\",\n            color: \"#7b6d8d\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 5px rgba(0, 0, 0, 0.03), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            border: \"1px solid #e2d7f0\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            textShadow: \"none\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n          arrowKey: {\n            background: \"linear-gradient(to bottom, #f0e6f6, #e7ddf0)\",\n            color: \"#b79ce8\",\n            boxShadow:\n              \"0 3px 0 #d8cceb, 0 0 5px rgba(0, 0, 0, 0.03), inset 0 1px 0 rgba(255, 255, 255, 1)\",\n            border: \"1px solid #e2d7f0\",\n            fontSize: \"11px\",\n            fontWeight: \"500\",\n            fontFamily: '\"Quicksand\", \"Avenir Next\", sans-serif',\n            textShadow: \"none\",\n            borderRadius: \"10px\",\n            transition: \"all 0.2s ease\",\n          },\n        };\n\n      case \"mechanical\":\n        return {\n          keyboard: {\n            background: \"linear-gradient(to bottom, #2c2c2c, #1a1a1a)\",\n            boxShadow:\n              \"0 12px 30px rgba(0, 0, 0, 0.5), 0 8px 15px rgba(0, 0, 0, 0.4)\",\n            border: \"2px solid #000\",\n            borderRadius: \"8px\",\n            padding: \"10px\",\n          },\n          key: {\n            background: \"linear-gradient(to bottom, #363636, #222222)\",\n            color: \"#ddd\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            textShadow: \"none\",\n            border: \"1px solid #111\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            fontWeight: \"600\",\n            fontSize: \"11px\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n          keyPressed: {\n            background: \"linear-gradient(to bottom, #222222, #1a1a1a)\",\n            boxShadow: \"0 0 0 #000, inset 0 0 10px rgba(0, 0, 0, 0.8)\",\n            color: \"#fff\",\n            textShadow: \"none\",\n            border: \"1px solid #000\",\n            transform: \"translateY(2px)\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            borderRadius: \"5px\",\n            transition: \"all 0.02s ease\",\n            height: \"40px\",\n          },\n          keyHover: {\n            background: \"linear-gradient(to bottom, #3a3a3a, #262626)\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.08)\",\n            color: \"#fff\",\n            border: \"1px solid #111\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n          keyActive: {\n            background: \"linear-gradient(to bottom, #363636, #222222)\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            color: \"#ff7700\",\n            textShadow: \"0 0 5px rgba(255, 119, 0, 0.5)\",\n            border: \"1px solid #ff7700\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n          specialKey: {\n            background: \"linear-gradient(to bottom, #2d2d2d, #1d1d1d)\",\n            color: \"#aaa\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #111\",\n            fontSize: \"10px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n          functionKey: {\n            background: \"linear-gradient(to bottom, #2a2a2a, #1a1a1a)\",\n            color: \"#888\",\n            fontSize: \"9px\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #111\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"30px\",\n          },\n          modifierKey: {\n            background: \"linear-gradient(to bottom, #2d2d2d, #1d1d1d)\",\n            color: \"#bbb\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #111\",\n            fontSize: \"10px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n          spaceKey: {\n            background: \"linear-gradient(to bottom, #363636, #222222)\",\n            color: \"#ddd\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #111\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n          arrowKey: {\n            background: \"linear-gradient(to bottom, #2d2d2d, #1d1d1d)\",\n            color: \"#ff7700\",\n            boxShadow:\n              \"0 2px 0 #000, inset 0 1px 0 rgba(255, 255, 255, 0.1), inset 0 0 5px rgba(255, 255, 255, 0.05)\",\n            border: \"1px solid #111\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            fontFamily: '\"IBM Plex Mono\", monospace',\n            textShadow: \"none\",\n            borderRadius: \"5px\",\n            transition: \"all 0.08s ease\",\n            height: \"40px\",\n          },\n        };\n    }\n  };\n  const getKeyStyle = (\n    key: KeyObject,\n    isPressed: boolean,\n    isActive: boolean,\n  ) => {\n    const size = key.size || 1;\n    const keyType = getKeyType(key);\n    let baseStyle = { ...themeStyles.key };\n    if (keyType === \"special\" && themeStyles.specialKey) {\n      baseStyle = { ...baseStyle, ...themeStyles.specialKey };\n    } else if (keyType === \"function\" && themeStyles.functionKey) {\n      baseStyle = { ...baseStyle, ...themeStyles.functionKey };\n    } else if (keyType === \"modifier\" && themeStyles.modifierKey) {\n      baseStyle = { ...baseStyle, ...themeStyles.modifierKey };\n    } else if (keyType === \"space\" && themeStyles.spaceKey) {\n      baseStyle = { ...baseStyle, ...themeStyles.spaceKey };\n    } else if (keyType === \"arrow\" && themeStyles.arrowKey) {\n      baseStyle = { ...baseStyle, ...themeStyles.arrowKey };\n    }\n    if (isActive && themeStyles.keyActive) {\n      baseStyle = { ...baseStyle, ...themeStyles.keyActive };\n    }\n    return {\n      position: \"relative\" as const,\n      width: `${calcKeyWidth(size)}px`,\n      height: `${keyHeight}px`,\n      ...(isPressed ? { ...baseStyle, ...themeStyles.keyPressed } : baseStyle),\n      borderRadius: baseStyle.borderRadius || \"4px\",\n      display: \"flex\" as const,\n      justifyContent: \"center\" as const,\n      alignItems: \"center\" as const,\n      cursor: \"pointer\",\n      userSelect: \"none\" as const,\n      transition: `all ${keyPressAnimationDuration}ms cubic-bezier(0.2, 0.8, 0.2, 1)`,\n      transform: isPressed\n        ? themeStyles.keyPressed.transform || \"translateY(2px)\"\n        : \"translateY(0)\",\n      fontSize: baseStyle.fontSize || \"11px\",\n      fontWeight: baseStyle.fontWeight || 500,\n      fontFamily: baseStyle.fontFamily || \"inherit\",\n      padding: \"0\",\n      margin: \"0\",\n      letterSpacing: baseStyle.letterSpacing || \"normal\",\n      willChange: \"transform, box-shadow\",\n    };\n  };\n  function adjustColorBrightness(hex: string, percent: number): string {\n    const num = Number.parseInt(hex.replace(\"#\", \"\"), 16);\n    const amt = Math.round(2.55 * percent);\n    const R = (num >> 16) + amt;\n    const G = ((num >> 8) & 0x00ff) + amt;\n    const B = (num & 0x0000ff) + amt;\n\n    return (\n      \"#\" +\n      (\n        0x1000000 +\n        (R < 255 ? (R < 0 ? 0 : R) : 255) * 0x10000 +\n        (G < 255 ? (G < 0 ? 0 : G) : 255) * 0x100 +\n        (B < 255 ? (B < 0 ? 0 : B) : 255)\n      )\n        .toString(16)\n        .slice(1)\n    );\n  }\n\n  function hexToRgb(hex: string): string {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? `${Number.parseInt(result[1], 16)}, ${Number.parseInt(result[2], 16)}, ${Number.parseInt(result[3], 16)}`\n      : \"0, 255, 255\";\n  }\n  const getKeyType = (key: KeyObject): string => {\n    if (!key.code) return \"regular\";\n    if (key.type === \"numpad\") return \"numpad\";\n    if ([\"Space\"].includes(key.code)) return \"space\";\n    if (\n      [\n        \"F1\",\n        \"F2\",\n        \"F3\",\n        \"F4\",\n        \"F5\",\n        \"F6\",\n        \"F7\",\n        \"F8\",\n        \"F9\",\n        \"F10\",\n        \"F11\",\n        \"F12\",\n        \"Escape\",\n      ].includes(key.code)\n    )\n      return \"function\";\n    if (\n      [\n        \"ShiftLeft\",\n        \"ShiftRight\",\n        \"ControlLeft\",\n        \"ControlRight\",\n        \"AltLeft\",\n        \"AltRight\",\n        \"MetaLeft\",\n        \"MetaRight\",\n        \"CapsLock\",\n      ].includes(key.code)\n    )\n      return \"modifier\";\n    if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(key.code))\n      return \"arrow\";\n    if (\n      [\n        \"Backspace\",\n        \"Tab\",\n        \"Enter\",\n        \"Delete\",\n        \"Home\",\n        \"End\",\n        \"PageUp\",\n        \"PageDown\",\n        \"Insert\",\n        \"PrintScreen\",\n        \"ScrollLock\",\n        \"Pause\",\n        \"ContextMenu\",\n      ].includes(key.code)\n    )\n      return \"special\";\n\n    return \"regular\";\n  };\n  const isKeyActive = (code: string | undefined): boolean => {\n    if (!code) return false;\n    return activeKeys.includes(code);\n  };\n\n  const renderKeyIcon = (key: KeyObject) => {\n    if (!key.icon) return null;\n\n    switch (key.icon) {\n      case \"windows\":\n        return <Command className=\"h-3 w-3\" />;\n      case \"menu\":\n        return <Menu className=\"h-3 w-3\" />;\n      case \"capslock\":\n        return <ChevronsUp className=\"h-3 w-3 mr-1\" />;\n      case \"arrowup\":\n        return <ArrowUp className=\"h-3 w-3\" />;\n      case \"arrowdown\":\n        return <ArrowDown className=\"h-3 w-3\" />;\n      case \"arrowleft\":\n        return <ArrowLeft className=\"h-3 w-3\" />;\n      case \"arrowright\":\n        return <ArrowRight className=\"h-3 w-3\" />;\n      default:\n        return null;\n    }\n  };\n\n  const themeStyles = getThemeStyles();\n  const keyboardLayout = getKeyboardLayout();\n  const keyUnit = 40;\n  const keySpacing = 6;\n  const keyHeight = 40;\n  const calcKeyWidth = (size: number): number =>\n    keyUnit * size + keySpacing * (size - 1);\n  const keyboardStyle = {\n    ...themeStyles.keyboard,\n    display: \"flex\" as const,\n    flexDirection: \"column\" as const,\n    padding: \"20px\",\n    borderRadius: themeStyles.keyboard.borderRadius || \"10px\",\n    transform: `perspective(${perspective}px) rotateX(${rotateX}deg)`,\n    position: \"relative\" as const,\n    gap: `${keySpacing}px`,\n    maxWidth: \"fit-content\",\n    transition: \"all 0.3s ease\",\n  };\n  const calculateMainRowWidth = (row: KeyboardRow): number => {\n    let totalWidth = 0;\n    for (const key of row.keys) {\n      if (key.spacer) {\n        totalWidth += calcKeyWidth(key.size);\n      } else if (key.type === \"light\") {\n        totalWidth += 8 + (key.size || 0.5) * 4;\n      } else {\n        totalWidth += calcKeyWidth(key.size);\n      }\n    }\n    if (row.keys.length > 0) {\n      totalWidth += (row.keys.length - 1) * keySpacing;\n    }\n    return totalWidth;\n  };\n  const calculateMaxMainRowWidth = (): number => {\n    let maxWidth = 0;\n    for (const row of keyboardLayout) {\n      if (row.keys.length > 0) {\n        const rowWidth = calculateMainRowWidth(row);\n        maxWidth = Math.max(maxWidth, rowWidth);\n      }\n    }\n    return maxWidth;\n  };\n\n  const maxMainRowWidth = calculateMaxMainRowWidth();\n  return (\n    <div\n      className={`keyboard-container ${className}`}\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: \"20px\",\n      }}\n      {...props}\n    >\n      <div\n        className=\"keyboard-wrapper\"\n        style={{ display: \"flex\", gap: \"20px\" }}\n      >\n        <div className=\"keyboard\" style={keyboardStyle}>\n          {keyboardLayout.map((row, rowIndex) => {\n            if (row.function && !showFunctionKeys) return null;\n            const mainRowWidth = calculateMainRowWidth(row);\n            return (\n              <div\n                key={`row-${rowIndex}`}\n                className=\"keyboard-row\"\n                style={{\n                  display: \"flex\",\n                  gap: `${keySpacing}px`,\n                  position: \"relative\",\n                  marginTop: row.function && rowIndex === 0 ? \"10px\" : \"0\",\n                  justifyContent: \"flex-start\",\n                }}\n              >\n                <div style={{ display: \"flex\", gap: `${keySpacing}px` }}>\n                  {row.keys.map((key, keyIndex) => {\n                    if (key.spacer) {\n                      return (\n                        <div\n                          key={`spacer-${rowIndex}-${keyIndex}`}\n                          style={{\n                            width: `${calcKeyWidth(key.size)}px`,\n                            height: `${keyHeight}px`,\n                            background: \"transparent\",\n                          }}\n                        />\n                      );\n                    }\n\n                    if (key.type === \"light\") {\n                      return (\n                        <div\n                          key={`light-${rowIndex}-${keyIndex}`}\n                          style={{\n                            width: \"8px\",\n                            height: \"8px\",\n                            borderRadius: \"50%\",\n                            background: accentColor,\n                            boxShadow: `0 0 8px rgba(${hexToRgb(accentColor)}, 0.7)`,\n                            position: \"relative\",\n                            marginTop: \"4px\",\n                            marginLeft: keyIndex === 0 ? \"0\" : \"6px\",\n                          }}\n                        />\n                      );\n                    }\n                    const isPressed = pressedKeys.has(key.code || \"\");\n                    const isActive = isKeyActive(key.code);\n                    return (\n                      <div\n                        key={`key-${rowIndex}-${keyIndex}`}\n                        data-key={key.code}\n                        className={`key ${key.code} ${isActive ? \"active\" : \"\"}`}\n                        style={getKeyStyle(key, isPressed, isActive)}\n                        onMouseDown={() => key.code && handleKeyDown(key.code)}\n                        onMouseUp={() => key.code && handleKeyUp(key.code)}\n                        onMouseLeave={() =>\n                          key.code &&\n                          pressedKeys.has(key.code) &&\n                          handleKeyUp(key.code)\n                        }\n                        onTouchStart={(e) => {\n                          e.preventDefault();\n                        }}\n                        onTouchEnd={() => key.code && handleKeyUp(key.code)}\n                        onMouseEnter={() => {\n                          const element = document.querySelector(\n                            `.key.${key.code}`,\n                          ) as HTMLElement;\n                          if (\n                            element &&\n                            !pressedKeys.has(key.code || \"\") &&\n                            !isActive\n                          ) {\n                            Object.assign(element.style, themeStyles.keyHover);\n                          }\n                        }}\n                        onMouseOut={() => {\n                          const element = document.querySelector(\n                            `.key.${key.code}`,\n                          ) as HTMLElement;\n                          if (\n                            element &&\n                            !pressedKeys.has(key.code || \"\") &&\n                            !isActive\n                          ) {\n                            const keyType = getKeyType(key);\n                            let baseStyle = { ...themeStyles.key };\n\n                            if (\n                              keyType === \"special\" &&\n                              themeStyles.specialKey\n                            ) {\n                              baseStyle = {\n                                ...baseStyle,\n                                ...themeStyles.specialKey,\n                              };\n                            } else if (\n                              keyType === \"function\" &&\n                              themeStyles.functionKey\n                            ) {\n                              baseStyle = {\n                                ...baseStyle,\n                                ...themeStyles.functionKey,\n                              };\n                            } else if (\n                              keyType === \"modifier\" &&\n                              themeStyles.modifierKey\n                            ) {\n                              baseStyle = {\n                                ...baseStyle,\n                                ...themeStyles.modifierKey,\n                              };\n                            } else if (\n                              keyType === \"space\" &&\n                              themeStyles.spaceKey\n                            ) {\n                              baseStyle = {\n                                ...baseStyle,\n                                ...themeStyles.spaceKey,\n                              };\n                            } else if (\n                              keyType === \"arrow\" &&\n                              themeStyles.arrowKey\n                            ) {\n                              baseStyle = {\n                                ...baseStyle,\n                                ...themeStyles.arrowKey,\n                              };\n                            }\n\n                            Object.assign(element.style, baseStyle);\n                          }\n                        }}\n                      >\n                        <div\n                          style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                          }}\n                        >\n                          {renderKeyIcon(key)}\n                          {key.label && <span>{key.label}</span>}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                {showNavigationCluster && row.nav && row.nav.length > 0 && (\n                  <div\n                    className=\"nav-cluster\"\n                    style={{\n                      display: \"flex\",\n                      gap: `${keySpacing}px`,\n                      marginLeft: `${Math.max(0, maxMainRowWidth - mainRowWidth + keySpacing * 2)}px`,\n                    }}\n                  >\n                    {row.nav.map((key, keyIndex) => {\n                      if (key.spacer) {\n                        return (\n                          <div\n                            key={`nav-spacer-${rowIndex}-${keyIndex}`}\n                            style={{\n                              width: `${calcKeyWidth(key.size)}px`,\n                              height: `${keyHeight}px`,\n                              background: \"transparent\",\n                            }}\n                          />\n                        );\n                      }\n\n                      if (key.type === \"light\") {\n                        return (\n                          <div\n                            key={`nav-light-${rowIndex}-${keyIndex}`}\n                            style={{\n                              width: \"8px\",\n                              height: \"8px\",\n                              borderRadius: \"50%\",\n                              background: accentColor,\n                              boxShadow: `0 0 8px rgba(${hexToRgb(accentColor)}, 0.7)`,\n                              position: \"relative\",\n                              marginTop: \"4px\",\n                              marginLeft: keyIndex === 0 ? \"0\" : \"6px\",\n                            }}\n                          />\n                        );\n                      }\n                      const isPressed = pressedKeys.has(key.code || \"\");\n                      const isActive = isKeyActive(key.code);\n                      return (\n                        <div\n                          key={`nav-key-${rowIndex}-${keyIndex}`}\n                          data-key={key.code}\n                          className={`key ${key.code} ${isActive ? \"active\" : \"\"}`}\n                          style={getKeyStyle(key, isPressed, isActive)}\n                          onMouseDown={() =>\n                            key.code && handleKeyDown(key.code)\n                          }\n                          onMouseUp={() => key.code && handleKeyUp(key.code)}\n                          onMouseLeave={() =>\n                            key.code &&\n                            pressedKeys.has(key.code) &&\n                            handleKeyUp(key.code)\n                          }\n                          onTouchStart={(e) => {\n                            e.preventDefault();\n                          }}\n                          onTouchEnd={() => key.code && handleKeyUp(key.code)}\n                          onMouseEnter={() => {\n                            const element = document.querySelector(\n                              `.key.${key.code}`,\n                            ) as HTMLElement;\n                            if (\n                              element &&\n                              !pressedKeys.has(key.code || \"\") &&\n                              !isActive\n                            ) {\n                              Object.assign(\n                                element.style,\n                                themeStyles.keyHover,\n                              );\n                            }\n                          }}\n                          onMouseOut={() => {\n                            const element = document.querySelector(\n                              `.key.${key.code}`,\n                            ) as HTMLElement;\n                            if (\n                              element &&\n                              !pressedKeys.has(key.code || \"\") &&\n                              !isActive\n                            ) {\n                              const keyType = getKeyType(key);\n                              let baseStyle = { ...themeStyles.key };\n\n                              if (\n                                keyType === \"special\" &&\n                                themeStyles.specialKey\n                              ) {\n                                baseStyle = {\n                                  ...baseStyle,\n                                  ...themeStyles.specialKey,\n                                };\n                              } else if (\n                                keyType === \"function\" &&\n                                themeStyles.functionKey\n                              ) {\n                                baseStyle = {\n                                  ...baseStyle,\n                                  ...themeStyles.functionKey,\n                                };\n                              } else if (\n                                keyType === \"modifier\" &&\n                                themeStyles.modifierKey\n                              ) {\n                                baseStyle = {\n                                  ...baseStyle,\n                                  ...themeStyles.modifierKey,\n                                };\n                              } else if (\n                                keyType === \"space\" &&\n                                themeStyles.spaceKey\n                              ) {\n                                baseStyle = {\n                                  ...baseStyle,\n                                  ...themeStyles.spaceKey,\n                                };\n                              } else if (\n                                keyType === \"arrow\" &&\n                                themeStyles.arrowKey\n                              ) {\n                                baseStyle = {\n                                  ...baseStyle,\n                                  ...themeStyles.arrowKey,\n                                };\n                              }\n                              Object.assign(element.style, baseStyle);\n                            }\n                          }}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              justifyContent: \"center\",\n                            }}\n                          >\n                            {renderKeyIcon(key)}\n                            {key.label && <span>{key.label}</span>}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveKeyboard;\n",
      "type": "registry:ui",
      "target": "components/ui/keyboard.tsx"
    }
  ]
}