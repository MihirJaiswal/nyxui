{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-animation-trigger",
  "type": "registry:ui",
  "title": "Scroll Animation Trigger",
  "description": "A scroll animation trigger that that provide several effects.",
  "dependencies": [
    "lucide-react",
    "motion",
    "motion",
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/scroll-animation-trigger.tsx",
      "content": "\"use client\";\nimport { useRef, useEffect, useState, useMemo, type ReactNode } from \"react\";\nimport {\n  motion,\n  useScroll,\n  useTransform,\n  type MotionValue,\n  type MotionProps,\n} from \"motion/react\";\nimport { cn } from \"../../lib/utils\";\n\nexport interface ScrollAnimationTriggerProps {\n  children: ReactNode;\n  className?: string;\n  effect?: \"fade\" | \"scale\" | \"slide\" | \"color\" | \"rotate\" | \"custom\";\n  threshold?: number;\n  delay?: number;\n  duration?: number;\n  direction?: \"up\" | \"down\" | \"left\" | \"right\";\n  once?: boolean;\n  customProps?: MotionProps;\n  as?: keyof typeof motionElementMap;\n  fromColor?: string;\n  toColor?: string;\n  fromRotation?: number;\n  toRotation?: number;\n  fromScale?: number;\n  toScale?: number;\n}\n\nconst motionElementMap = {\n  div: motion.div,\n  span: motion.span,\n  p: motion.p,\n  h1: motion.h1,\n  h2: motion.h2,\n  h3: motion.h3,\n  h4: motion.h4,\n  h5: motion.h5,\n  h6: motion.h6,\n  section: motion.section,\n  article: motion.article,\n  aside: motion.aside,\n  nav: motion.nav,\n  ul: motion.ul,\n  ol: motion.ol,\n  li: motion.li,\n  button: motion.button,\n};\n\ntype MotionElementKey = keyof typeof motionElementMap;\n\nexport function ScrollAnimationTrigger({\n  children,\n  className,\n  effect = \"fade\",\n  threshold = 0.1,\n  delay = 0,\n  duration = 0.5,\n  direction = \"up\",\n  once = false,\n  customProps = {},\n  as = \"div\",\n  fromColor = \"var(--color-muted)\",\n  toColor = \"var(--color-primary)\",\n  fromRotation = direction === \"left\" ? -10 : 10,\n  toRotation = 0,\n  fromScale = 0.8,\n  toScale = 1,\n}: ScrollAnimationTriggerProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [isInView, setIsInView] = useState(false);\n\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start end\", \"end start\"],\n  });\n\n  const textColor = useTransform(scrollYProgress, [0, 1], [fromColor, toColor]);\n  const rotation = useTransform(\n    scrollYProgress,\n    [0, 1],\n    [fromRotation, toRotation],\n  );\n\n  useEffect(() => {\n    if (!ref.current) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          if (once) observer.disconnect();\n        } else if (!once) {\n          setIsInView(false);\n        }\n      },\n      { threshold },\n    );\n\n    observer.observe(ref.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [threshold, once]);\n\n  const animationProps = useMemo(() => {\n    const baseProps: MotionProps = {\n      transition: { duration, delay, ease: \"easeOut\" },\n    };\n\n    switch (effect) {\n      case \"fade\":\n        baseProps.initial = { opacity: 0 };\n        baseProps.animate = isInView ? { opacity: 1 } : { opacity: 0 };\n        break;\n      case \"scale\":\n        baseProps.initial = { scale: fromScale, opacity: 0 };\n        baseProps.animate = isInView\n          ? { scale: toScale, opacity: 1 }\n          : { scale: fromScale, opacity: 0 };\n        break;\n      case \"slide\":\n        const offset = 50;\n        const directionOffsets = {\n          up: { y: offset, x: 0 },\n          down: { y: -offset, x: 0 },\n          left: { x: offset, y: 0 },\n          right: { x: -offset, y: 0 },\n        };\n        baseProps.initial = { ...directionOffsets[direction], opacity: 0 };\n        baseProps.animate = isInView\n          ? { x: 0, y: 0, opacity: 1 }\n          : { ...directionOffsets[direction], opacity: 0 };\n        break;\n      case \"color\":\n        baseProps.style = { color: textColor };\n        break;\n      case \"rotate\":\n        baseProps.style = {\n          rotate: rotation,\n          opacity: scrollYProgress,\n        };\n        break;\n      case \"custom\":\n        return {\n          ...baseProps,\n          ...customProps,\n          animate: isInView ? customProps.animate : customProps.initial,\n        };\n    }\n    return baseProps;\n  }, [\n    effect,\n    isInView,\n    duration,\n    delay,\n    fromScale,\n    toScale,\n    direction,\n    textColor,\n    rotation,\n    scrollYProgress,\n    customProps,\n  ]);\n\n  const MotionComponent =\n    motionElementMap[as as MotionElementKey] || motion.div;\n\n  return (\n    <div\n      ref={ref}\n      style={{ width: \"100%\", height: \"100%\" }}\n      data-testid=\"scroll-wrapper\"\n    >\n      <MotionComponent\n        className={cn(\"scroll-animation-trigger\", className)}\n        data-testid=\"scroll-animation\"\n        {...animationProps}\n      >\n        {children}\n      </MotionComponent>\n    </div>\n  );\n}\n\nexport function useScrollProgress(options = {}) {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start end\", \"end start\"],\n    ...options,\n  });\n  return { ref, scrollYProgress };\n}\n\nexport function useScrollTransform<T>(\n  scrollYProgress: MotionValue<number>,\n  inputRange = [0, 1] as [number, number],\n  outputRange: [T, T],\n) {\n  return useTransform(scrollYProgress, inputRange, outputRange);\n}\n\nexport function useScrollColor(\n  scrollYProgress: MotionValue<number>,\n  fromColor = \"var(--color-muted)\",\n  toColor = \"var(--color-primary)\",\n) {\n  return useScrollTransform(scrollYProgress, [0, 1], [fromColor, toColor]);\n}\n\nexport function useScrollSize(\n  scrollYProgress: MotionValue<number>,\n  fromSize = 0.8,\n  toSize = 1,\n) {\n  return useScrollTransform(scrollYProgress, [0, 1], [fromSize, toSize]);\n}\n\nexport function useScrollRotation(\n  scrollYProgress: MotionValue<number>,\n  fromRotation = -10,\n  toRotation = 0,\n) {\n  return useScrollTransform(\n    scrollYProgress,\n    [0, 1],\n    [fromRotation, toRotation],\n  );\n}\n\nexport interface ScrollProgressAnimationProps {\n  children:\n    | ReactNode\n    | ((props: { scrollYProgress: MotionValue<number> }) => ReactNode);\n  className?: string;\n  offset?: [string, string];\n}\n\nexport function ScrollProgressAnimation({\n  children,\n  className,\n}: ScrollProgressAnimationProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start end\", \"end start\"],\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"scroll-progress-animation\", className)}\n      data-testid=\"scroll-progress\"\n    >\n      {typeof children === \"function\"\n        ? children({ scrollYProgress })\n        : children}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/scroll-animation-trigger.tsx"
    }
  ]
}