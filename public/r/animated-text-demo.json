{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-text-demo",
  "type": "registry:example",
  "title": "Animated Text Demo",
  "description": "Example showing various text animations.",
  "dependencies": [
    "react-element-to-jsx-string",
    "sonner",
    "..",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://nyxui.com/r/animated-text.json"
  ],
  "files": [
    {
      "path": "registry/example/animated-text-demo.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport reactElementToJSXString from \"react-element-to-jsx-string\";\nimport { toast, Toaster } from \"sonner\";\nimport { AnimateText } from \"../ui/animated-text\";\nimport { Copy, Check } from \"lucide-react\";\n\ninterface AnimationCard {\n  children: React.ReactNode;\n  onClick: () => void;\n  isCopied: boolean;\n  title: string;\n}\n\ntype AnimatedTextType = {\n  name: string;\n  description: string;\n  component: React.ReactNode;\n  code?: string;\n};\n\nconst AnimationCard = ({ children, onClick, isCopied, title }: AnimationCard) => {\n  return (\n    <div\n      className=\"border group relative rounded-lg p-3 sm:p-4 shadow-sm hover:shadow-md transition-shadow duration-300 cursor-pointer bg-background\"\n      onClick={onClick}\n    >\n      <p className=\"text-xs sm:text-sm font-semibold mb-2\">{title}</p>\n      <div className=\"overflow-hidden\">{children}</div>\n      <div className=\"absolute top-2 right-2\">\n        {isCopied ? (\n          <Check className=\"h-3 w-3 text-green-500 transition-all duration-200\" />\n        ) : (\n          <Copy className=\"h-3 w-3 text-zinc-300 dark:text-zinc-700 group-hover:text-zinc-500 group-hover:dark:text-zinc-500\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const AnimationTextDemo = () => {\n  const [copiedIndex, setCopiedIndex] = useState<number | null>(null);\n\n  const copy = (animation: AnimatedTextType, index: number) => {\n    if (animation.code) {\n      copyToClipboard(animation.code, index);\n      return;\n    }\n    let animationString = reactElementToJSXString(animation.component, {\n      displayName: (element) => {\n        if (\n          typeof element === \"object\" &&\n          element !== null &&\n          \"type\" in element &&\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (element as any).type?.name === \"AnimateText\"\n        ) {\n          return \"AnimateText\";\n        }\n        if (\n          typeof element === \"object\" &&\n          element !== null &&\n          \"type\" in element &&\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (element as any).type?.name\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          return (element as any).type.name;\n        }\n        return \"UnknownComponent\";\n      },\n      functionValue: (fn) => fn.name || 'function',\n    });\n\n    if (animationString) {\n      const textToCopy = animationString;\n      copyToClipboard(textToCopy, index);\n    }\n  };\n\n  const copyToClipboard = (text: string, index: number) => {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        console.log(\"Text copied to clipboard:\", text);\n        toast.success(\"Copied to clipboard\");\n        setCopiedIndex(index);\n        setTimeout(() => {\n          setCopiedIndex(null);\n        }, 2000);\n      })\n      .catch((err) => {\n        console.error(\"Error copying text to clipboard:\", err);\n        toast.error(\"Error copying to clipboard\");\n      });\n  };\n\n  return (\n    <div className=\"w-full px-4 sm:px-6 md:px-8 max-w-7xl mx-auto pb-12\">\n      <Toaster position=\"top-center\" />\n      <div className=\"flex flex-col\">\n        <div className=\"flex flex-col py-2 sm:py-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n            {animatedTextComponents.map((animation, idx) => (\n              <AnimationCard\n                key={idx}\n                onClick={() => copy(animation, idx)}\n                isCopied={copiedIndex === idx}\n                title={animation.name}\n              >\n                {animation.component}\n              </AnimationCard>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const animatedTextComponents = [\n  {\n    name: \"Cascade\",\n    description: \"Text animation with cascade effect\",\n    component: <AnimateText text=\"Cascade\" type=\"cascade\" />,\n    code: `<AnimateText text=\"Cascade\" type=\"cascade\" />`\n  },\n  {\n    name: \"Flicker\",\n    description: \"Text animation with flicker effect\",\n    component: <AnimateText text=\"Flicker\" type=\"flicker\" />,\n    code: `<AnimateText text=\"Flicker\" type=\"flicker\" />`\n  },\n  {\n    name: \"Blink\",\n    description: \"Text animation with blink effect\",\n    component: <AnimateText text=\"Blink\" type=\"blink\" custom={1} />,\n    code: `<AnimateText text=\"Blink\" type=\"blink\" custom={1} />`\n  },\n  {\n    name: \"Expand\",\n    description: \"Text animation with expand effect\",\n    component: <AnimateText text=\"Expand\" type=\"expand\" />,\n    code: `<AnimateText text=\"Expand\" type=\"expand\" />`\n  },\n  {\n    name: \"Rise\",\n    description: \"Text animation with rise effect\",\n    component: <AnimateText text=\"Rise\" type=\"rise\" />,\n    code: `<AnimateText text=\"Rise\" type=\"rise\" />`\n  },\n  {\n    name: \"Glide\",\n    description: \"Text animation with glide effect\",\n    component: <AnimateText text=\"Glide\" type=\"glide\" custom={1} />,\n    code: `<AnimateText text=\"Glide\" type=\"glide\" custom={1} />`\n  },\n  {\n    name: \"Elastic\",\n    description: \"Text animation with elastic effect\",\n    component: <AnimateText text=\"Elastic\" type=\"elastic\" custom={1} />,\n    code: `<AnimateText text=\"Elastic\" type=\"elastic\" custom={1} />`\n  },\n  {\n    name: \"Float\",\n    description: \"Text animation with float effect\",\n    component: <AnimateText text=\"Float\" type=\"float\" custom={1} />,\n    code: `<AnimateText text=\"Float\" type=\"float\" custom={1} />`\n  },\n];",
      "type": "registry:example",
      "target": "components/animated-text-demo.tsx"
    }
  ]
}