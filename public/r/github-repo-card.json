{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "github-repo-card",
  "type": "registry:ui",
  "title": "Github Repo Card",
  "description": "A card component that displays information about a GitHub repository. It includes the repository name, description, stars, forks, and a link to the repository.",
  "dependencies": [
    "lucide-react",
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/ui/github-repo-card.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect, useCallback, useMemo } from \"react\"\nimport Link from \"next/link\"\nimport {\n  BookOpen,\n  Code,\n  Eye,\n  Github,\n  History,\n  Star,\n  GitFork,\n  AlertCircle,\n  Check,\n  ExternalLink,\n  Calendar,\n  TrendingUp,\n} from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport Image from \"next/image\"\n\nconst LANGUAGE_COLORS = {\n  JavaScript: \"#f1e05a\",\n  TypeScript: \"#3178c6\",\n  Python: \"#3572A5\",\n  Java: \"#b07219\",\n  Go: \"#00ADD8\",\n  Rust: \"#dea584\",\n  C: \"#555555\",\n  \"C++\": \"#f34b7d\",\n  \"C#\": \"#178600\",\n  PHP: \"#4F5D95\",\n  Ruby: \"#701516\",\n  Swift: \"#F05138\",\n  Kotlin: \"#A97BFF\",\n  Dart: \"#00B4AB\",\n  HTML: \"#e34c26\",\n  CSS: \"#563d7c\",\n  Shell: \"#89e051\",\n}\n\nexport type ThemeOption = {\n  id: string\n  name: string\n  description: string\n  cardBg: string\n  cardBorder: string\n  cardHoverShadow: string\n  accentColor: string\n  accentColorLight: string\n  graphColor: string\n  graphBgColor: string\n  badgeBg: string\n  badgeText: string\n  textMuted: string\n  textNormal: string\n  glowEffect?: string\n  backdropBlur?: string\n}\n\nexport const themes: ThemeOption[] = [\n  {\n    id: \"modern-dark\",\n    name: \"Modern Dark\",\n    description: \"Sleek dark theme with blue accents and glassmorphism\",\n    cardBg: \"bg-gradient-to-br from-slate-900/95 via-slate-800/95 to-slate-900/95\",\n    cardBorder: \"border border-slate-700/50 backdrop-blur-xl\",\n    cardHoverShadow:\n      \"hover:shadow-2xl hover:shadow-blue-500/20 hover:scale-[1.02] transition-all duration-500 ease-out\",\n    accentColor: \"text-blue-400\",\n    accentColorLight: \"text-blue-400/20\",\n    graphColor: \"text-blue-400\",\n    graphBgColor: \"text-blue-400/10\",\n    badgeBg: \"bg-slate-800/80 backdrop-blur-sm border border-slate-700/50\",\n    badgeText: \"text-blue-300\",\n    textMuted: \"text-slate-400\",\n    textNormal: \"text-slate-100\",\n    glowEffect: \"hover:shadow-blue-500/25\",\n    backdropBlur: \"backdrop-blur-xl\",\n  },\n  {\n    id: \"modern-light\",\n    name: \"Modern Light\",\n    description: \"Clean light theme with glassmorphism and subtle shadows\",\n    cardBg: \"bg-gradient-to-br from-white/95 via-slate-50/95 to-white/95\",\n    cardBorder: \"border border-slate-200/60 backdrop-blur-xl\",\n    cardHoverShadow:\n      \"hover:shadow-2xl hover:shadow-slate-200/60 hover:scale-[1.02] transition-all duration-500 ease-out\",\n    accentColor: \"text-indigo-600\",\n    accentColorLight: \"text-indigo-600/20\",\n    graphColor: \"text-indigo-600\",\n    graphBgColor: \"text-indigo-600/10\",\n    badgeBg: \"bg-indigo-50/80 backdrop-blur-sm border border-indigo-200/50\",\n    badgeText: \"text-indigo-700\",\n    textMuted: \"text-slate-600\",\n    textNormal: \"text-slate-900\",\n    glowEffect: \"hover:shadow-indigo-200/40\",\n    backdropBlur: \"backdrop-blur-xl\",\n  },\n  {\n    id: \"cyberpunk\",\n    name: \"Cyberpunk\",\n    description: \"Futuristic neon theme with electric colors\",\n    cardBg: \"bg-gradient-to-br from-black/95 via-purple-950/95 to-black/95\",\n    cardBorder: \"border border-cyan-500/30 backdrop-blur-xl\",\n    cardHoverShadow:\n      \"hover:shadow-2xl hover:shadow-cyan-500/40 hover:scale-[1.02] hover:border-cyan-400/50 transition-all duration-500 ease-out\",\n    accentColor: \"text-cyan-400\",\n    accentColorLight: \"text-cyan-400/20\",\n    graphColor: \"text-cyan-400\",\n    graphBgColor: \"text-cyan-400/10\",\n    badgeBg: \"bg-purple-950/80 backdrop-blur-sm border border-cyan-500/30\",\n    badgeText: \"text-cyan-300\",\n    textMuted: \"text-slate-400\",\n    textNormal: \"text-cyan-100\",\n    glowEffect: \"hover:shadow-cyan-500/30\",\n    backdropBlur: \"backdrop-blur-xl\",\n  },\n  {\n    id: \"neo-brutalist\",\n    name: \"Neo Brutalist\",\n    description: \"Bold contrasting theme with dynamic shadows\",\n    cardBg: \"bg-gradient-to-br from-amber-50 to-orange-50\",\n    cardBorder: \"border-2 border-black\",\n    cardHoverShadow:\n      \"hover:shadow-[8px_8px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[-2px] hover:translate-y-[-2px] transition-all duration-300 ease-out\",\n    accentColor: \"text-rose-600\",\n    accentColorLight: \"text-rose-600/20\",\n    graphColor: \"text-rose-600\",\n    graphBgColor: \"text-rose-600/10\",\n    badgeBg: \"bg-white border-2 border-black\",\n    badgeText: \"text-black font-bold\",\n    textMuted: \"text-slate-700\",\n    textNormal: \"text-black\",\n  },\n  {\n    id: \"aurora\",\n    name: \"Aurora\",\n    description: \"Ethereal theme with aurora-like gradients\",\n    cardBg: \"bg-gradient-to-br from-violet-900/95 via-purple-800/95 to-indigo-900/95\",\n    cardBorder: \"border border-violet-500/30 backdrop-blur-xl\",\n    cardHoverShadow:\n      \"hover:shadow-2xl hover:shadow-violet-500/30 hover:scale-[1.02] transition-all duration-500 ease-out\",\n    accentColor: \"text-violet-300\",\n    accentColorLight: \"text-violet-300/20\",\n    graphColor: \"text-violet-300\",\n    graphBgColor: \"text-violet-300/10\",\n    badgeBg: \"bg-violet-950/80 backdrop-blur-sm border border-violet-500/30\",\n    badgeText: \"text-violet-200\",\n    textMuted: \"text-violet-300/70\",\n    textNormal: \"text-violet-100\",\n    glowEffect: \"hover:shadow-violet-500/25\",\n    backdropBlur: \"backdrop-blur-xl\",\n  },\n  {\n    id: \"forest\",\n    name: \"Forest\",\n    description: \"Nature-inspired theme with green accents\",\n    cardBg: \"bg-gradient-to-br from-emerald-950/95 via-green-900/95 to-teal-950/95\",\n    cardBorder: \"border border-emerald-500/30 backdrop-blur-xl\",\n    cardHoverShadow:\n      \"hover:shadow-2xl hover:shadow-emerald-500/30 hover:scale-[1.02] transition-all duration-500 ease-out\",\n    accentColor: \"text-emerald-400\",\n    accentColorLight: \"text-emerald-400/20\",\n    graphColor: \"text-emerald-400\",\n    graphBgColor: \"text-emerald-400/10\",\n    badgeBg: \"bg-emerald-950/80 backdrop-blur-sm border border-emerald-500/30\",\n    badgeText: \"text-emerald-300\",\n    textMuted: \"text-emerald-300/70\",\n    textNormal: \"text-emerald-100\",\n    glowEffect: \"hover:shadow-emerald-500/25\",\n    backdropBlur: \"backdrop-blur-xl\",\n  },\n]\n\nexport type RepoData = {\n  name: string\n  fullName: string\n  description?: string\n  owner: {\n    login: string\n    avatarUrl: string\n  }\n  stars: number\n  forks: number\n  watchers: number\n  issues: number\n  language?: string\n  languageColor?: string\n  updatedAt: string\n  topics: string[]\n  activityData?: number[]\n  isPrivate: boolean\n}\n\nconst CACHE_TTL = 15 * 60 * 1000\n\ninterface GitHubRepoCardProps {\n  repoOwner?: string\n  repoName?: string\n  githubToken?: string\n  manualMode?: boolean\n  repoData?: RepoData\n  themeId?: string\n}\n\nconst getLanguageColor = (language: string) => {\n  return LANGUAGE_COLORS[language as keyof typeof LANGUAGE_COLORS] || \"#858585\"\n}\n\nconst formatRelativeTime = (dateString: string) => {\n  const date = new Date(dateString)\n  const now = new Date()\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)\n\n  const intervals = {\n    year: 31536000,\n    month: 2592000,\n    day: 86400,\n    hour: 3600,\n    minute: 60,\n    second: 1,\n  }\n\n  for (const [unit, seconds] of Object.entries(intervals)) {\n    const count = Math.floor(diffInSeconds / seconds)\n    if (count >= 1) {\n      return `${count} ${unit}${count !== 1 ? \"s\" : \"\"} ago`\n    }\n  }\n  return \"just now\"\n}\n\nconst getCacheKey = (repoOwner: string, repoName: string) => {\n  return `github_repo_${repoOwner}_${repoName}`\n}\n\nexport function GitHubRepoCard({\n  repoOwner,\n  repoName,\n  githubToken,\n  manualMode = false,\n  repoData,\n  themeId = \"modern-light\",\n}: GitHubRepoCardProps) {\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(!manualMode)\n  const [error, setError] = useState<string | null>(null)\n  const [repo, setRepo] = useState<RepoData | null>(manualMode ? repoData || null : null)\n  const [rateLimit, setRateLimit] = useState<{\n    remaining: number\n    limit: number\n  } | null>(null)\n\n  const currentTheme = useMemo(() => themes.find((theme) => theme.id === themeId) || themes[0], [themeId])\n\n  const repoUrl = useMemo(() => {\n    if (!repo) return \"\"\n    return `https://github.com/${repo.fullName}`\n  }, [repo])\n\n  const cloneCommand = useMemo(() => {\n    if (!repo) return \"\"\n    return `git clone https://github.com/${repo.fullName}.git`\n  }, [repo])\n\n  const getCachedData = useCallback(() => {\n    if (!repoOwner || !repoName || typeof window === \"undefined\") return null\n    try {\n      const cacheKey = getCacheKey(repoOwner, repoName)\n      const cachedData = localStorage.getItem(cacheKey)\n      if (cachedData) {\n        const { data, timestamp } = JSON.parse(cachedData)\n        if (Date.now() - timestamp < CACHE_TTL) {\n          return data\n        } else {\n          localStorage.removeItem(cacheKey)\n        }\n      }\n    } catch (err) {\n      console.error(\"Error reading from cache:\", err)\n    }\n    return null\n  }, [repoOwner, repoName])\n\n  const setCachedData = useCallback(\n    (data: RepoData) => {\n      if (!repoOwner || !repoName || typeof window === \"undefined\") return\n      try {\n        const cacheKey = getCacheKey(repoOwner, repoName)\n        const cacheData = JSON.stringify({\n          data,\n          timestamp: Date.now(),\n        })\n        localStorage.setItem(cacheKey, cacheData)\n      } catch (err) {\n        console.error(\"Error writing to cache:\", err)\n      }\n    },\n    [repoOwner, repoName],\n  )\n\n  const fetchRepoData = useCallback(async () => {\n    if (!repoOwner || !repoName) return\n\n    const cachedData = getCachedData()\n    if (cachedData) {\n      setRepo(cachedData)\n      setLoading(false)\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const headers: HeadersInit = {}\n      if (githubToken) {\n        headers.Authorization = `token ${githubToken}`\n      }\n\n      const repoResponse = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}`, { headers })\n\n      const rateLimitRemaining = repoResponse.headers.get(\"x-ratelimit-remaining\")\n      const rateLimitLimit = repoResponse.headers.get(\"x-ratelimit-limit\")\n\n      if (rateLimitRemaining && rateLimitLimit) {\n        setRateLimit({\n          remaining: Number.parseInt(rateLimitRemaining, 10),\n          limit: Number.parseInt(rateLimitLimit, 10),\n        })\n      }\n\n      if (!repoResponse.ok) {\n        if (repoResponse.status === 403 && rateLimitRemaining === \"0\") {\n          throw new Error(\"GitHub API rate limit exceeded. Please provide a GitHub token.\")\n        } else {\n          throw new Error(`Failed to fetch repository data: ${repoResponse.status}`)\n        }\n      }\n\n      const repoData = await repoResponse.json()\n\n      const commitsResponse = await fetch(\n        `https://api.github.com/repos/${repoOwner}/${repoName}/stats/commit_activity`,\n        { headers },\n      )\n\n      let activityData: number[] = []\n      if (commitsResponse.ok) {\n        const commitsData = await commitsResponse.json()\n        const recentCommits = commitsData.slice(-12).map((week: { total: number }) => week.total)\n        const maxCommit = Math.max(...recentCommits, 1)\n        activityData = recentCommits.map((count: number) => count / maxCommit)\n      }\n\n      const transformedRepo: RepoData = {\n        name: repoData.name,\n        fullName: repoData.full_name,\n        description: repoData.description || \"\",\n        owner: {\n          login: repoData.owner.login,\n          avatarUrl: repoData.owner.avatar_url,\n        },\n        stars: repoData.stargazers_count,\n        forks: repoData.forks_count,\n        watchers: repoData.watchers_count,\n        issues: repoData.open_issues_count,\n        language: repoData.language,\n        languageColor: repoData.language ? getLanguageColor(repoData.language) : undefined,\n        updatedAt: repoData.updated_at,\n        topics: repoData.topics || [],\n        activityData,\n        isPrivate: repoData.private,\n      }\n\n      setRepo(transformedRepo)\n      setCachedData(transformedRepo)\n      setLoading(false)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An unknown error occurred\")\n      setLoading(false)\n    }\n  }, [repoOwner, repoName, githubToken, getCachedData, setCachedData])\n\n  useEffect(() => {\n    if (manualMode && repoData) {\n      setRepo(repoData)\n      setLoading(false)\n      return\n    }\n\n    if (!manualMode && repoOwner && repoName) {\n      fetchRepoData()\n    }\n  }, [manualMode, repoData, repoOwner, repoName, fetchRepoData])\n\n  const copyToClipboard = () => {\n    if (repo) {\n      navigator.clipboard\n        .writeText(cloneCommand)\n        .then(() => {\n          setCopied(true)\n          setTimeout(() => setCopied(false), 2000)\n        })\n        .catch(console.error)\n    }\n  }\n\n  const renderLoadingState = () => (\n    <div\n      className={cn(\n        \"w-full max-w-full overflow-hidden transition-all duration-500 p-6 rounded-xl relative\",\n        currentTheme.cardBg,\n        currentTheme.cardBorder,\n        currentTheme.backdropBlur,\n      )}\n      aria-busy=\"true\"\n      aria-live=\"polite\"\n    >\n      {/* Animated gradient overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent animate-pulse rounded-xl\" />\n\n      <div className=\"relative space-y-6\">\n        {/* Header skeleton */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-5 w-5 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-4 w-24 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n              <div className=\"h-4 w-1 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n              <div className=\"h-4 w-32 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-8 w-8 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-full animate-pulse\" />\n            <div className=\"h-6 w-40 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n            <div className=\"ml-auto h-6 w-20 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-lg animate-pulse\" />\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"h-4 w-full bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n            <div className=\"h-4 w-3/4 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n          </div>\n        </div>\n\n        {/* Activity graph skeleton */}\n        <div className=\"space-y-3\">\n          <div className=\"h-20 bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-800 dark:to-slate-700 rounded-lg animate-pulse\" />\n\n          <div className=\"grid grid-cols-4 gap-4\">\n            {[0, 1, 2, 3].map((index) => (\n              <div key={index} className=\"flex items-center gap-2\">\n                <div className=\"h-4 w-4 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n                <div className=\"h-4 w-12 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Footer skeleton */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-3 w-3 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-full animate-pulse\" />\n            <div className=\"h-4 w-20 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded animate-pulse\" />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex gap-2\">\n              {[0, 1, 2].map((index) => (\n                <div\n                  key={index}\n                  className=\"h-6 w-16 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-md animate-pulse\"\n                />\n              ))}\n            </div>\n            <div className=\"h-8 w-20 bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-md animate-pulse\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n  const renderErrorState = () => (\n    <div\n      className={cn(\n        \"w-full max-w-full overflow-hidden transition-all duration-500 p-6 rounded-xl relative\",\n        currentTheme.cardBg,\n        currentTheme.cardBorder,\n        currentTheme.backdropBlur,\n      )}\n      aria-live=\"assertive\"\n    >\n      <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n        <div\n          className={cn(\n            \"flex items-center justify-center w-20 h-20 mb-6 rounded-full animate-pulse\",\n            currentTheme.badgeBg,\n          )}\n        >\n          <AlertCircle className={cn(\"h-10 w-10\", currentTheme.accentColor)} aria-hidden=\"true\" />\n        </div>\n\n        <h3 className={cn(\"text-xl font-bold mb-3\", currentTheme.textNormal)}>Repository Not Found</h3>\n\n        <p className={cn(\"text-sm max-w-md mb-6 leading-relaxed\", currentTheme.textMuted)}>\n          {error?.includes(\"404\")\n            ? \"This repository doesn't exist or you might not have access to it.\"\n            : error?.includes(\"rate limit\")\n              ? \"GitHub API rate limit exceeded. Please try again later or use a GitHub token.\"\n              : error}\n        </p>\n\n        <div className=\"flex flex-wrap gap-3 justify-center\">\n          {error?.includes(\"rate limit\") && (\n            <button\n              onClick={() => {\n                if (typeof window !== \"undefined\") {\n                  try {\n                    const cacheKey = getCacheKey(repoOwner || \"\", repoName || \"\")\n                    localStorage.removeItem(cacheKey)\n                  } catch (e) {\n                    console.error(\"Error clearing cache:\", e)\n                  }\n                }\n                fetchRepoData()\n              }}\n              className={cn(\n                \"flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 hover:scale-105\",\n                currentTheme.badgeBg,\n                currentTheme.badgeText,\n              )}\n            >\n              <TrendingUp className=\"h-4 w-4\" />\n              Try Again\n            </button>\n          )}\n\n          <Link\n            href={`https://github.com/${repoOwner || \"\"}/${repoName || \"\"}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={cn(\n              \"flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 hover:scale-105\",\n              currentTheme.badgeBg,\n              currentTheme.badgeText,\n            )}\n          >\n            <Github className=\"h-4 w-4\" />\n            Visit GitHub\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n\n  if (loading) return renderLoadingState()\n  if (error) return renderErrorState()\n  if (!repo) return null\n\n  return (\n    <div\n      className={cn(\n        \"w-full max-w-full overflow-hidden transition-all duration-500 p-6 rounded-xl relative group\",\n        currentTheme.cardBg,\n        currentTheme.cardBorder,\n        currentTheme.cardHoverShadow,\n        currentTheme.backdropBlur,\n      )}\n      role=\"article\"\n      aria-label={`GitHub repository: ${repo?.name}`}\n    >\n      {/* Subtle glow effect on hover */}\n      {currentTheme.glowEffect && (\n        <div\n          className={cn(\n            \"absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\",\n            currentTheme.glowEffect,\n          )}\n        />\n      )}\n\n      <div className=\"relative space-y-6\">\n        {/* Header Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Github className={cn(\"h-4 w-4\", currentTheme.accentColor)} aria-hidden=\"true\" />\n              <Link\n                href={`https://github.com/${repo.owner.login}`}\n                className={cn(\"hover:underline font-medium transition-colors duration-200\", currentTheme.textMuted)}\n                aria-label={`View ${repo.owner.login}'s GitHub profile`}\n              >\n                {repo.owner.login}\n              </Link>\n              <span className={cn(\"text-xs\", currentTheme.textMuted)}>/</span>\n              <Link\n                href={repoUrl}\n                className={cn(\"font-semibold hover:underline transition-colors duration-200\", currentTheme.accentColor)}\n                aria-label={`View ${repo.name} repository on GitHub`}\n              >\n                {repo.name}\n              </Link>\n            </div>\n\n            {rateLimit && (\n              <div\n                className={cn(\n                  \"text-xs font-medium flex items-center gap-1 px-2 py-1 rounded-md\",\n                  currentTheme.badgeBg,\n                  currentTheme.badgeText,\n                )}\n                aria-label={`GitHub API rate limit: ${rateLimit.remaining} of ${rateLimit.limit} requests remaining`}\n              >\n                <span>\n                  {rateLimit.remaining}/{rateLimit.limit}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            <div className=\"relative\">\n              <div className=\"h-10 w-10 rounded-full overflow-hidden ring-2 ring-white/20 transition-transform duration-200 group-hover:scale-110\">\n                {repo.owner.avatarUrl ? (\n                  <Image\n                    src={repo.owner.avatarUrl || \"/placeholder.svg\"}\n                    alt={`${repo.owner.login}'s avatar`}\n                    className=\"h-full w-full object-cover\"\n                    width={40}\n                    height={40}\n                    loading=\"lazy\"\n                  />\n                ) : (\n                  <div className=\"flex h-full w-full items-center justify-center bg-gradient-to-br from-slate-200 to-slate-300 text-sm font-bold\">\n                    {repo.owner.login.substring(0, 2).toUpperCase()}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex-1 min-w-0\">\n              <h1 className={cn(\"text-xl font-bold truncate\", currentTheme.textNormal)}>{repo.name}</h1>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <span\n                  className={cn(\n                    \"text-xs font-medium px-2 py-1 rounded-md border\",\n                    currentTheme.badgeBg,\n                    currentTheme.badgeText,\n                  )}\n                >\n                  {repo.isPrivate ? \"Private\" : \"Public\"}\n                </span>\n                <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                  <Calendar className=\"h-3 w-3\" />\n                  <span>Updated {formatRelativeTime(repo.updatedAt)}</span>\n                </div>\n              </div>\n            </div>\n\n            <Link\n              href={repoUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={cn(\n                \"p-2 rounded-lg transition-all duration-200 hover:scale-110\",\n                currentTheme.badgeBg,\n                currentTheme.badgeText,\n              )}\n              aria-label=\"Open repository in new tab\"\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Link>\n          </div>\n\n          <p className={cn(\"text-sm leading-relaxed\", currentTheme.textMuted)}>\n            {repo.description || \"No description provided\"}\n          </p>\n        </div>\n\n        {/* Activity Graph Section */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <History className={cn(\"h-4 w-4\", currentTheme.accentColor)} />\n              <span className={cn(\"text-sm font-semibold\", currentTheme.textNormal)}>Activity</span>\n            </div>\n            <span className={cn(\"text-xs\", currentTheme.textMuted)}>Last 12 weeks</span>\n          </div>\n\n          <div\n            className={cn(\n              \"h-16 w-full rounded-lg p-3 transition-all duration-300 hover:scale-[1.02]\",\n              currentTheme.badgeBg,\n            )}\n            role=\"img\"\n            aria-label=\"Repository commit activity visualization\"\n          >\n            {repo.activityData && repo.activityData.length > 0 ? (\n              <svg className=\"h-full w-full\" viewBox=\"0 0 100 20\" preserveAspectRatio=\"none\" aria-hidden=\"true\">\n                {/* Grid lines */}\n                {[5, 10, 15].map((y) => (\n                  <line\n                    key={y}\n                    x1=\"0\"\n                    y1={y}\n                    x2=\"100\"\n                    y2={y}\n                    stroke=\"currentColor\"\n                    strokeWidth=\"0.2\"\n                    strokeDasharray=\"1,2\"\n                    className=\"text-muted-foreground/20\"\n                  />\n                ))}\n\n                {/* Data points */}\n                {repo.activityData.map((value, index) => (\n                  <circle\n                    key={index}\n                    cx={`${index * (100 / (repo.activityData?.length || 1))}`}\n                    cy={`${20 - value * 18}`}\n                    r=\"1\"\n                    className={cn(currentTheme.graphColor, \"animate-pulse\")}\n                    style={{\n                      animationDelay: `${index * 100}ms`,\n                      animationDuration: \"2s\",\n                    }}\n                  />\n                ))}\n\n                {/* Connecting line */}\n                <polyline\n                  points={repo.activityData\n                    .map((value, index) => `${index * (100 / (repo.activityData?.length || 1))},${20 - value * 18}`)\n                    .join(\" \")}\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className={currentTheme.graphColor}\n                />\n\n                {/* Area fill */}\n                <path\n                  d={`M0,20 ${repo.activityData\n                    .map((value, index) => `L${index * (100 / (repo.activityData?.length || 1))},${20 - value * 18}`)\n                    .join(\" \")} L100,20 Z`}\n                  fill=\"currentColor\"\n                  className={currentTheme.graphBgColor}\n                />\n              </svg>\n            ) : (\n              <div\n                className={cn(\"flex h-full items-center justify-center text-xs font-medium\", currentTheme.textMuted)}\n              >\n                No activity data available\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Stats Section */}\n        <div className=\"grid grid-cols-4 gap-4\">\n          {[\n            { icon: Star, value: repo.stars, label: \"Stars\" },\n            { icon: GitFork, value: repo.forks, label: \"Forks\" },\n            { icon: Eye, value: repo.watchers, label: \"Watchers\" },\n            { icon: BookOpen, value: repo.issues, label: \"Issues\" },\n          ].map(({ icon: Icon, value, label }) => (\n            <div\n              key={label}\n              className={cn(\n                \"flex flex-col items-center p-3 rounded-lg transition-all duration-200 hover:scale-105\",\n                currentTheme.badgeBg,\n              )}\n            >\n              <Icon className={cn(\"h-4 w-4 mb-1\", currentTheme.accentColor)} />\n              <span className={cn(\"text-sm font-bold\", currentTheme.textNormal)}>{value.toLocaleString()}</span>\n              <span className={cn(\"text-xs\", currentTheme.textMuted)}>{label}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* Footer Section */}\n        <div className=\"space-y-3\">\n          {repo.language && (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-3 w-3 rounded-full\" style={{ backgroundColor: repo.languageColor }} />\n              <span className={cn(\"text-sm font-medium\", currentTheme.textNormal)}>{repo.language}</span>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex-1 min-w-0\">\n              {repo.topics && repo.topics.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {repo.topics.slice(0, 3).map((topic) => (\n                    <span\n                      key={topic}\n                      className={cn(\n                        \"text-xs font-medium px-2 py-1 rounded-md border transition-all duration-200 hover:scale-105\",\n                        currentTheme.badgeBg,\n                        currentTheme.badgeText,\n                      )}\n                    >\n                      {topic}\n                    </span>\n                  ))}\n                  {repo.topics.length > 3 && (\n                    <span\n                      className={cn(\n                        \"text-xs font-medium px-2 py-1 rounded-md border\",\n                        currentTheme.badgeBg,\n                        currentTheme.badgeText,\n                      )}\n                    >\n                      +{repo.topics.length - 3} more\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <button\n              className={cn(\n                \"flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg border transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2\",\n                currentTheme.badgeBg,\n                currentTheme.badgeText,\n                copied ? \"bg-green-500/20 border-green-500/50 text-green-600\" : \"\",\n              )}\n              onClick={copyToClipboard}\n              type=\"button\"\n              aria-label={copied ? \"Clone command copied to clipboard\" : \"Copy clone command to clipboard\"}\n            >\n              {copied ? (\n                <>\n                  <Check className=\"h-4 w-4\" />\n                  <span>Copied!</span>\n                </>\n              ) : (\n                <>\n                  <Code className=\"h-4 w-4\" />\n                  <span>Clone</span>\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ui/github-repo-card.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"https://nyxui.vercel.app\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}