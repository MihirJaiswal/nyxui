{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-cursor",
  "type": "registry:ui",
  "title": "Custom Cursor",
  "description": "A custom cursor that that provide several effects.",
  "dependencies": [
    "motion",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/ui/custom-cursor.tsx",
      "content": "'use client'\r\n\r\nimport React, { useState, useCallback } from 'react'\r\nimport { motion, AnimatePresence, useMotionValue } from 'motion/react'\r\nimport { cn } from '@/lib/utils'\r\n\r\n// Default pointer SVG component\r\nconst DefaultPointerSVG = ({ className }: { className?: string }) => (\r\n  <svg\r\n    stroke=\"currentColor\"\r\n    fill=\"currentColor\"\r\n    strokeWidth=\"1\"\r\n    viewBox=\"0 0 16 16\"\r\n    className={className}\r\n    height=\"1em\"\r\n    width=\"1em\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"></path>\r\n  </svg>\r\n)\r\n\r\nexport const Cursor = ({\r\n  children,\r\n  className,\r\n  name,\r\n  customSVG,\r\n  svgClassName,\r\n  cursorColor = 'sky'\r\n}: {\r\n  children: React.ReactNode\r\n  className?: string\r\n  name: string\r\n  customSVG?: React.ReactNode\r\n  svgClassName?: string\r\n  cursorColor?: 'sky' | 'red' | 'green' | 'blue' | 'purple' | 'pink' | 'yellow' | 'indigo' | string\r\n}) => {\r\n  const posX = useMotionValue(0)\r\n  const posY = useMotionValue(0)\r\n  const containerRef = React.useRef<HTMLDivElement>(null)\r\n  const [mouseInside, setMouseInside] = useState<boolean>(false)\r\n  \r\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (containerRef.current) {\r\n      const rect = containerRef.current.getBoundingClientRect()\r\n      const x = e.clientX - rect.left\r\n      const y = e.clientY - rect.top\r\n      requestAnimationFrame(() => {\r\n        posX.set(x)\r\n        posY.set(y)\r\n      })\r\n    }\r\n  }, [posX, posY])\r\n\r\n  const handleMouseEnter = useCallback(() => {\r\n    setMouseInside(true)\r\n  }, [])\r\n\r\n  const handleMouseLeave = useCallback(() => {\r\n    setMouseInside(false)\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseMove={handleMouseMove}\r\n      style={{\r\n        cursor: 'none'\r\n      }}\r\n      ref={containerRef}\r\n      className={cn('relative', className)}>\r\n      \r\n      {children}\r\n      <AnimatePresence>\r\n        {mouseInside && (\r\n          <FollowCursor \r\n            x={posX} \r\n            y={posY} \r\n            name={name} \r\n            customSVG={customSVG}\r\n            svgClassName={svgClassName}\r\n            cursorColor={cursorColor}\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const FollowCursor = ({ \r\n  x, \r\n  y, \r\n  name, \r\n  customSVG, \r\n  svgClassName,\r\n  cursorColor = 'sky'\r\n}: { \r\n  x: any\r\n  y: any\r\n  name: string\r\n  customSVG?: React.ReactNode\r\n  svgClassName?: string\r\n  cursorColor?: string\r\n}) => {\r\n  const getColorClasses = (color: string) => {\r\n    const predefinedColors = {\r\n      sky: 'stroke-sky-600 text-sky-500 bg-sky-500',\r\n      red: 'stroke-red-600 text-red-500 bg-red-500',\r\n      green: 'stroke-green-600 text-green-500 bg-green-500',\r\n      blue: 'stroke-blue-600 text-blue-500 bg-blue-500',\r\n      purple: 'stroke-purple-600 text-purple-500 bg-purple-500',\r\n      pink: 'stroke-pink-600 text-pink-500 bg-pink-500',\r\n      yellow: 'stroke-yellow-600 text-yellow-500 bg-yellow-500',\r\n      indigo: 'stroke-indigo-600 text-indigo-500 bg-indigo-500',\r\n    }\r\n    \r\n    return predefinedColors[color as keyof typeof predefinedColors] || predefinedColors.sky\r\n  }\r\n\r\n  const colorClasses = getColorClasses(cursorColor)\r\n  const [strokeClass, textClass, bgClass] = colorClasses.split(' ')\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"absolute z-50 h-4 w-4 rounded-full pointer-events-none\"\r\n      style={{\r\n        left: x,\r\n        top: y,\r\n      }}\r\n      initial={{\r\n        scale: 0,\r\n        opacity: 0\r\n      }}\r\n      animate={{\r\n        scale: 1,\r\n        opacity: 1\r\n      }}\r\n      exit={{\r\n        scale: 0,\r\n        opacity: 0\r\n      }}\r\n      transition={{\r\n        type: \"spring\",\r\n        stiffness: 300,\r\n        damping: 25\r\n      }}\r\n    >\r\n      {customSVG ? (\r\n        <div className={cn(\r\n          \"h-6 w-6 -translate-x-[12px] -translate-y-[10px] -rotate-[70deg] transform\",\r\n          textClass,\r\n          svgClassName\r\n        )}>\r\n          {customSVG}\r\n        </div>\r\n      ) : (\r\n        <DefaultPointerSVG \r\n          className={cn(\r\n            \"h-6 w-6 -translate-x-[12px] -translate-y-[10px] -rotate-[70deg] transform\",\r\n            strokeClass,\r\n            textClass,\r\n            svgClassName\r\n          )}\r\n        />\r\n      )}\r\n      <div className={cn(\r\n        \"w-fit rounded-full px-2 py-1 text-white pointer-events-none text-xs whitespace-nowrap\",\r\n        bgClass\r\n      )}>\r\n        {name}\r\n      </div>\r\n    </motion.div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ui/custom-cursor.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"https://nyxui.vercel.app\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}