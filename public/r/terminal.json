{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "terminal",
  "type": "registry:ui",
  "title": "Terminal",
  "description": "A terminal that that provide several effects.",
  "dependencies": [
    "lucide-react",
    "lucide-react",
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/terminal.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Send, Copy, RotateCcw, TerminalIcon } from \"lucide-react\";\nimport { cn } from \"../../lib/utils\";\n\nexport type TerminalProps = {\n  command?: string;\n  steps?: string[];\n  finalMessage?: string;\n  stepDelay?: number;\n  typingDelay?: number;\n  icon?: React.ReactNode;\n  promptSymbol?: string;\n  inputPlaceholder?: string;\n  autoExecute?: boolean;\n  repeat?: boolean;\n  repeatDelay?: number;\n  className?: string;\n  variant?: \"default\" | \"dark\" | \"matrix\" | \"retro\" | \"custom\";\n  customTheme?: {\n    container?: string;\n    header?: string;\n    output?: string;\n    button?: string;\n  };\n};\n\nconst InteractiveTerminal: React.FC<TerminalProps> = ({\n  command = \"help\",\n  steps = [\"Processing command...\"],\n  finalMessage = \"Command executed successfully!\",\n  stepDelay = 1000,\n  typingDelay = 100,\n  icon = <TerminalIcon className=\"h-4 w-4 mr-2\" />,\n  promptSymbol = \"$\",\n  inputPlaceholder = \"Type your command here...\",\n  autoExecute = false,\n  repeat = false,\n  repeatDelay = 3000,\n  className,\n  variant = \"default\",\n  customTheme,\n}) => {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState<string[]>([]);\n  const [step, setStep] = useState(0);\n  const [copied, setCopied] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [charIndex, setCharIndex] = useState(0);\n  const [commandExecuted, setCommandExecuted] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const outputRef = useRef<HTMLDivElement>(null);\n\n  const themes = {\n    default: {\n      container: \"bg-gray-900 text-green-400\",\n      header: \"bg-gray-950 border-green-400/20\",\n      output: \"bg-black\",\n      button: \"hover:bg-gray-800\",\n    },\n    dark: {\n      container: \"bg-black text-blue-400\",\n      header: \"bg-gray-950 border-blue-400/20\",\n      output: \"bg-gray-950\",\n      button: \"hover:bg-gray-800\",\n    },\n    matrix: {\n      container: \"bg-black text-green-500\",\n      header: \"bg-green-950/30 border-green-500/30\",\n      output: \"bg-black\",\n      button: \"hover:bg-green-900/30\",\n    },\n    retro: {\n      container: \"bg-amber-950 text-amber-400\",\n      header: \"bg-amber-900/50 border-amber-400/20\",\n      output: \"bg-black\",\n      button: \"hover:bg-amber-800/30\",\n    },\n  };\n\n  const theme =\n    variant === \"custom\" && customTheme\n      ? customTheme\n      : themes[variant as keyof typeof themes] || themes.default;\n\n  const resetTerminal = useCallback(() => {\n    setOutput([]);\n    setStep(0);\n    setCharIndex(0);\n    setTyping(false);\n    setCommandExecuted(false);\n    setCompleted(false);\n  }, []);\n\n  const executeCommand = useCallback(() => {\n    setOutput((prev) => [...prev, `${promptSymbol} ${input}`]);\n    setStep(1);\n    setInput(\"\");\n  }, [promptSymbol, input]);\n\n  useEffect(() => {\n    if (outputRef.current) {\n      outputRef.current.scrollTop = outputRef.current.scrollHeight;\n    }\n  }, [output]);\n\n  useEffect(() => {\n    if (autoExecute && !typing && !commandExecuted) {\n      const timer = setTimeout(() => {\n        setTyping(true);\n        setCharIndex(0);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [autoExecute, typing, commandExecuted]);\n\n  useEffect(() => {\n    if (autoExecute && repeat && completed) {\n      const repeatTimer = setTimeout(() => {\n        resetTerminal();\n      }, repeatDelay);\n      return () => clearTimeout(repeatTimer);\n    }\n  }, [autoExecute, repeat, completed, resetTerminal, repeatDelay]);\n\n  useEffect(() => {\n    if (typing && charIndex < command.length) {\n      const timer = setTimeout(() => {\n        setInput(command.substring(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      }, typingDelay);\n      return () => clearTimeout(timer);\n    } else if (typing && charIndex === command.length) {\n      const timer = setTimeout(() => {\n        executeCommand();\n        setTyping(false);\n        setCommandExecuted(true);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [typing, charIndex, command, typingDelay, executeCommand]);\n\n  useEffect(() => {\n    if (step > 0 && step <= steps.length) {\n      setOutput((prev) => [...prev, steps[step - 1]]);\n      const timer = setTimeout(() => setStep(step + 1), stepDelay);\n      return () => clearTimeout(timer);\n    } else if (step > steps.length) {\n      setOutput((prev) => [...prev, finalMessage]);\n      setCompleted(true);\n    }\n  }, [step, steps, finalMessage, stepDelay]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (input.trim()) {\n      executeCommand();\n      setCommandExecuted(true);\n    }\n  };\n\n  const copyCommand = () => {\n    navigator.clipboard.writeText(command);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"max-w-4xl mx-auto p-3 md:p-6 rounded-lg shadow-lg font-mono\",\n        theme.container,\n        className,\n      )}\n    >\n      <div\n        className={cn(\n          \"mb-4 p-3 rounded-md flex items-center justify-between\",\n          theme.header,\n        )}\n      >\n        <div className=\"flex items-center gap-2\">\n          {icon}\n          <span className=\"flex items-center gap-1.5\">\n            <span className=\"text-sm opacity-80\">Run:</span>\n            <code className=\"font-bold px-2 py-0.5 bg-black/30 rounded\">\n              {command}\n            </code>\n          </span>\n        </div>\n        <div className=\"flex gap-2\">\n          {autoExecute ? (\n            completed &&\n            !repeat && (\n              <button\n                onClick={resetTerminal}\n                className={cn(\n                  \"px-2 py-1 rounded text-sm flex items-center gap-1 transition-colors\",\n                  theme.button,\n                )}\n                title=\"Replay\"\n                type=\"button\"\n              >\n                <RotateCcw className=\"w-3.5 h-3.5\" />\n                <span className=\"hidden sm:inline\">Replay</span>\n              </button>\n            )\n          ) : step === 0 ? (\n            <button\n              onClick={copyCommand}\n              className={cn(\n                \"px-2 py-1 rounded text-sm flex items-center gap-1 transition-colors\",\n                theme.button,\n              )}\n              title=\"Copy command\"\n              type=\"button\"\n            >\n              <Copy className=\"w-3.5 h-3.5\" />\n              <span className=\"hidden sm:inline\">\n                {copied ? \"Copied!\" : \"Copy\"}\n              </span>\n            </button>\n          ) : (\n            <button\n              onClick={resetTerminal}\n              className={cn(\n                \"px-2 py-1 rounded text-sm flex items-center gap-1 transition-colors\",\n                theme.button,\n              )}\n              title=\"Reset terminal\"\n              type=\"button\"\n            >\n              <RotateCcw className=\"w-3.5 h-3.5\" />\n              <span className=\"hidden sm:inline\">Reset</span>\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div\n        ref={outputRef}\n        className={cn(\n          \"h-80 mb-4 p-3 rounded-md overflow-y-auto scrollbar-none\",\n          theme.output,\n        )}\n      >\n        {output.map((line, index) => (\n          <pre key={index} className=\"whitespace-pre-wrap mb-1 terminal-line\">\n            {line}\n          </pre>\n        ))}\n        {typing && (\n          <pre className=\"whitespace-pre-wrap cursor-typing\">\n            {promptSymbol} {input}\n          </pre>\n        )}\n        \n      </div>\n\n      {!autoExecute && step === 0 && !commandExecuted && (\n        <form onSubmit={handleSubmit} className=\"flex items-center\">\n          <span className=\"mr-2 font-bold\">{promptSymbol}</span>\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            className=\"flex-grow bg-transparent focus:outline-none cursor-typing\"\n            placeholder={inputPlaceholder}\n            autoFocus\n          />\n          <button\n            type=\"submit\"\n            className={cn(\n              \"ml-2 p-1.5 rounded-full transition-colors\",\n              theme.button,\n            )}\n            title=\"Send command\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </button>\n        </form>\n      )}\n\n      <style jsx>{`\n        @keyframes blink {\n          0%,\n          100% {\n            opacity: 0;\n          }\n          50% {\n            opacity: 1;\n          }\n        }\n        .cursor-typing::after {\n          content: \"|\";\n          margin-left: 2px;\n          animation: blink 1s infinite;\n        }\n        .terminal-line {\n          animation: fadeIn 0.3s ease-in-out;\n        }\n        @keyframes fadeIn {\n          from {\n            opacity: 0;\n            transform: translateY(2px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n        .scrollbar-none::-webkit-scrollbar {\n          display: none;\n        }\n        .scrollbar-none {\n          -ms-overflow-style: none;\n          scrollbar-width: none;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default InteractiveTerminal;\n",
      "type": "registry:ui",
      "target": "components/ui/terminal.tsx"
    }
  ]
}