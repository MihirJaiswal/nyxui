{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "3d-layered-card",
  "type": "registry:ui",
  "title": "3D Layered Card",
  "description": "A 3D layered card that that provide several effects.",
  "dependencies": [
    "framer-motion",
    "motion"
  ],
  "files": [
    {
      "path": "registry/ui/3d-layered-card.tsx",
      "content": "\"use client\";\r\nimport type React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"motion/react\";\r\nimport Image from \"next/image\";\r\n\r\ninterface CardProps {\r\n  logo: string;\r\n  mainImage: string;\r\n  title?: string;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  width?: number | string;\r\n  height?: {\r\n    collapsed: number;\r\n    expanded: number;\r\n  };\r\n  logoSize?: number;\r\n  logoPosition?: {\r\n    expanded: number;\r\n  };\r\n  shineIntensity?: number;\r\n  backgroundColor?: string;\r\n  borderColor?: string;\r\n  borderWidth?: string;\r\n  textColor?: string;\r\n  glowColor?: string;\r\n  glowGradient?: string;\r\n  titlePosition?: number;\r\n}\r\n\r\nexport default function ThreeDLayeredCard({\r\n  logo,\r\n  mainImage,\r\n  title,\r\n  children,\r\n  className,\r\n  width = 288,\r\n  height = {\r\n    collapsed: 130,\r\n    expanded: 300,\r\n  },\r\n  logoSize = 64,\r\n  logoPosition = {\r\n    expanded: 15,\r\n  },\r\n  shineIntensity = 0.3,\r\n  backgroundColor = \"bg-gradient-to-b from-[#FF9901] via-[#DF911A] to-[#724f13]\",\r\n  borderColor,\r\n  borderWidth = \"0\",\r\n  textColor = \"white\",\r\n  glowColor = \"rgba(255, 165, 0, 0.1)\",\r\n  glowGradient = \"#fde047\",\r\n  titlePosition = 90,\r\n}: CardProps) {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  // Detect mobile devices\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const isMobileDevice =\r\n        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n          navigator.userAgent\r\n        ) ||\r\n        window.innerWidth < 768 ||\r\n        \"ontouchstart\" in window;\r\n      setIsMobile(isMobileDevice);\r\n    };\r\n\r\n    checkMobile();\r\n    window.addEventListener(\"resize\", checkMobile);\r\n    return () => window.removeEventListener(\"resize\", checkMobile);\r\n  }, []);\r\n\r\n  // Constants for image sizing\r\n  const IMAGE_SIZE = 128;\r\n  const HALF_IMAGE_SIZE = IMAGE_SIZE / 2;\r\n  const HALF_LOGO_SIZE = logoSize / 2;\r\n\r\n  // Mouse position tracking for 3D tilt effect\r\n  const x = useMotionValue(0);\r\n  const y = useMotionValue(0);\r\n\r\n  // Spring animations for smooth movement\r\n  const mouseXSpring = useSpring(x, { stiffness: 400, damping: 30 });\r\n  const mouseYSpring = useSpring(y, { stiffness: 400, damping: 30 });\r\n\r\n  // Transform mouse position to rotation values (reduced for mobile)\r\n  const rotateX = useTransform(\r\n    mouseYSpring,\r\n    [-0.5, 0.5],\r\n    [isMobile ? \"-6deg\" : \"-12deg\", isMobile ? \"6deg\" : \"12deg\"]\r\n  );\r\n  const rotateY = useTransform(\r\n    mouseXSpring,\r\n    [-0.5, 0.5],\r\n    [isMobile ? \"6deg\" : \"12deg\", isMobile ? \"-6deg\" : \"-12deg\"]\r\n  );\r\n\r\n  // Smooth lens effect that increases/decreases based on mouse position\r\n  const lensOverlay = useTransform(\r\n    mouseYSpring,\r\n    [-0.5, 0.5],\r\n    [\r\n      // Hovering up - darker overlay\r\n      `linear-gradient(180deg, \r\n        rgba(0, 0, 0, ${shineIntensity * 0.4}) 0%, \r\n        rgba(0, 0, 0, ${shineIntensity * 0.2}) 50%, \r\n        rgba(0, 0, 0, ${shineIntensity * 0.1}) 100%)`,\r\n      // Hovering down - brighter white overlay\r\n      `linear-gradient(180deg, \r\n        rgba(255, 255, 255, ${shineIntensity * 0.2}) 0%, \r\n        rgba(255, 255, 255, ${shineIntensity * 0.5}) 50%, \r\n        rgba(255, 255, 255, ${shineIntensity * 0.8}) 100%)`,\r\n    ]\r\n  );\r\n\r\n  // Dynamic movement for logo and text based on tilt direction (reduced for mobile)\r\n  const logoMovement = isMobile\r\n    ? logoSize < 30\r\n      ? 4\r\n      : logoSize < 50\r\n        ? 6\r\n        : 8\r\n    : logoSize < 30\r\n      ? 8\r\n      : logoSize < 50\r\n        ? 12\r\n        : 15;\r\n  const logoMoveX = useTransform(\r\n    mouseXSpring,\r\n    [-0.5, 0.5],\r\n    [logoMovement, -logoMovement]\r\n  );\r\n  const logoMoveY = useTransform(\r\n    mouseYSpring,\r\n    [-0.5, 0.5],\r\n    [logoMovement, -logoMovement]\r\n  );\r\n  const textMoveX = useTransform(\r\n    mouseXSpring,\r\n    [-0.5, 0.5],\r\n    [isMobile ? 8 : 15, isMobile ? -8 : -15]\r\n  );\r\n  const textMoveY = useTransform(\r\n    mouseYSpring,\r\n    [-0.5, 0.5],\r\n    [isMobile ? 8 : 15, isMobile ? -8 : -15]\r\n  );\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!ref.current || isMobile) return;\r\n    const rect = ref.current.getBoundingClientRect();\r\n    const width = rect.width;\r\n    const height = rect.height;\r\n    const mouseX = e.clientX - rect.left;\r\n    const mouseY = e.clientY - rect.top;\r\n    const xPct = mouseX / width - 0.5;\r\n    const yPct = mouseY / height - 0.5;\r\n    x.set(xPct);\r\n    y.set(yPct);\r\n  };\r\n\r\n  const handleMouseEnter = () => {\r\n    if (!isMobile) {\r\n      setIsHovered(true);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (!isMobile) {\r\n      setIsHovered(false);\r\n      x.set(0);\r\n      y.set(0);\r\n    }\r\n  };\r\n\r\n  // Mobile touch handlers\r\n  const handleTouchStart = (e: React.TouchEvent) => {\r\n    if (isMobile) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  const handleTouchEnd = (e: React.TouchEvent) => {\r\n    if (isMobile) {\r\n      e.preventDefault();\r\n      setIsExpanded(!isExpanded);\r\n\r\n      // Add a subtle tilt effect for mobile tap\r\n      if (!isExpanded) {\r\n        x.set(0.1);\r\n        y.set(0.1);\r\n        setTimeout(() => {\r\n          x.set(0);\r\n          y.set(0);\r\n        }, 300);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    if (isMobile) {\r\n      e.preventDefault();\r\n      setIsExpanded(!isExpanded);\r\n    }\r\n  };\r\n\r\n  // Determine if card should be expanded (hover for desktop, tap state for mobile)\r\n  const shouldBeExpanded = isMobile ? isExpanded : isHovered;\r\n\r\n  const borderStyle =\r\n    borderColor && borderWidth !== \"0\"\r\n      ? {\r\n          border: `${borderWidth} solid ${borderColor}`,\r\n          borderRadius: \"0.375rem\",\r\n        }\r\n      : {};\r\n\r\n  const widthStyle = typeof width === \"number\" ? `${width}px` : width;\r\n\r\n  const getExpandedLogoPosition = () => {\r\n    if (logoPosition?.expanded !== undefined) {\r\n      const minTop = -logoSize / 2;\r\n      const maxTop = height.expanded - logoSize + 20;\r\n      return `${Math.max(minTop, Math.min(logoPosition.expanded, maxTop))}px`;\r\n    }\r\n\r\n    // Default positioning based on logo size\r\n    const basePosition =\r\n      logoSize < 30 ? 25 : logoSize < 50 ? 18 : logoSize < 70 ? 12 : 8;\r\n    return `${basePosition}px`;\r\n  };\r\n\r\n  // Calculate collapsed state logo\r\n  const getCollapsedLogoPosition = () => {\r\n    const availableSpaceAboveTitle = titlePosition - 20;\r\n    const logoTop = availableSpaceAboveTitle - logoSize;\r\n\r\n    if (logoTop < 10) {\r\n      return `${Math.max(10, (availableSpaceAboveTitle - logoSize) / 2)}px`;\r\n    }\r\n\r\n    return `${Math.max(10, logoTop)}px`;\r\n  };\r\n\r\n  // Fixed title position\r\n  const getCollapsedTitlePosition = () => {\r\n    return `${titlePosition}px`;\r\n  };\r\n\r\n  const isTitleVisible = () => {\r\n    const titleTop = titlePosition;\r\n    const titleHeight = 24;\r\n    return titleTop + titleHeight <= height.collapsed;\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      className={`relative cursor-pointer ${className} ${isMobile ? \"touch-manipulation\" : \"\"}`}\r\n      style={{\r\n        perspective: \"1000px\",\r\n        transformStyle: \"preserve-3d\",\r\n        width: widthStyle,\r\n        height: `${height.collapsed}px`,\r\n        zIndex: shouldBeExpanded ? 50 : 1,\r\n        WebkitTapHighlightColor: \"transparent\",\r\n        userSelect: \"none\",\r\n      }}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      onTouchStart={handleTouchStart}\r\n      onTouchEnd={handleTouchEnd}\r\n      onClick={handleClick}\r\n      aria-label={title? `Interactive card for ${title}` : \"Interactive card\"}\r\n      role=\"button\"\r\n    >\r\n      {/* Card content with overflow hidden and max-height animation */}\r\n      <motion.div\r\n        className=\"relative w-full border rounded-md shadow-2xl\"\r\n        style={{\r\n          rotateY: rotateY,\r\n          rotateX: rotateX,\r\n          transformStyle: \"preserve-3d\",\r\n          overflow: \"hidden\",\r\n          position: shouldBeExpanded ? \"absolute\" : \"relative\",\r\n          top: shouldBeExpanded\r\n            ? `${-(height.expanded - height.collapsed) / 2}px`\r\n            : \"auto\",\r\n          left: shouldBeExpanded ? \"0\" : \"auto\",\r\n          right: shouldBeExpanded ? \"0\" : \"auto\",\r\n          ...borderStyle,\r\n        }}\r\n        animate={{\r\n          height: shouldBeExpanded\r\n            ? `${height.expanded}px`\r\n            : `${height.collapsed}px`,\r\n          boxShadow: shouldBeExpanded\r\n            ? `0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.1), 0 0 20px ${glowColor}`\r\n            : \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\",\r\n        }}\r\n        transition={{\r\n          type: \"spring\",\r\n          stiffness: isMobile ? 300 : 400,\r\n          damping: isMobile ? 30 : 25,\r\n          mass: 0.8,\r\n        }}\r\n      >\r\n        {/* Dynamic height inner container */}\r\n        <motion.div\r\n          className=\"relative w-full\"\r\n          style={{\r\n            height: shouldBeExpanded\r\n              ? `${height.expanded}px`\r\n              : `${height.collapsed}px`,\r\n            minHeight: shouldBeExpanded\r\n              ? `${height.expanded}px`\r\n              : `${height.collapsed}px`,\r\n          }}\r\n          animate={{\r\n            height: shouldBeExpanded\r\n              ? `${height.expanded}px`\r\n              : `${height.collapsed}px`,\r\n          }}\r\n          transition={{\r\n            type: \"spring\",\r\n            stiffness: isMobile ? 300 : 400,\r\n            damping: isMobile ? 30 : 25,\r\n            mass: 0.8,\r\n          }}\r\n        >\r\n          {/* Background gradient */}\r\n          <div className={`absolute inset-0 ${backgroundColor}`} />\r\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-black/30\" />\r\n\r\n          {/* Smooth linear lens effect overlay */}\r\n          <motion.div\r\n            className=\"absolute inset-0 pointer-events-none\"\r\n            style={{\r\n              background: lensOverlay,\r\n              mixBlendMode: \"overlay\",\r\n              zIndex: 25,\r\n            }}\r\n          />\r\n\r\n          {/* Glass lens effect */}\r\n          <motion.div\r\n            className=\"absolute inset-0 pointer-events-none\"\r\n            style={{\r\n              background:\r\n                \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 25%, transparent 50%, transparent 75%, rgba(255,255,255,0.03) 100%)\",\r\n              mixBlendMode: \"soft-light\",\r\n              zIndex: 24,\r\n            }}\r\n            animate={{\r\n              opacity: shouldBeExpanded ? 0.6 : 0.3,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 300,\r\n              damping: 25,\r\n            }}\r\n          />\r\n\r\n          {/* Mobile tap indicator */}\r\n          {isMobile && (\r\n            <motion.div\r\n              className=\"absolute top-2 right-2 pointer-events-none\"\r\n              style={{\r\n                zIndex: 35,\r\n                color: textColor,\r\n                fontSize: \"12px\",\r\n                opacity: 0.7,\r\n              }}\r\n              animate={{\r\n                opacity: shouldBeExpanded ? 0 : 0.7,\r\n                rotate: shouldBeExpanded ? 45 : 0,\r\n              }}\r\n              transition={{\r\n                duration: 0.3,\r\n              }}\r\n            >\r\n              <svg\r\n                width=\"16\"\r\n                height=\"16\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"currentColor\"\r\n              >\r\n                <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" />\r\n              </svg>\r\n            </motion.div>\r\n          )}\r\n\r\n          {/* Logo */}\r\n          <motion.div\r\n            className=\"absolute\"\r\n            style={{\r\n              transform: \"translateZ(60px)\",\r\n              transformStyle: \"preserve-3d\",\r\n              left: `calc(50% - ${HALF_LOGO_SIZE}px)`,\r\n              width: `${logoSize}px`,\r\n              height: `${logoSize}px`,\r\n              zIndex: 30,\r\n            }}\r\n            initial={{\r\n              top: getCollapsedLogoPosition(),\r\n              opacity: 1,\r\n            }}\r\n            animate={{\r\n              top: shouldBeExpanded\r\n                ? getExpandedLogoPosition()\r\n                : getCollapsedLogoPosition(),\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: isMobile ? 300 : 400,\r\n              damping: isMobile ? 30 : 25,\r\n              mass: 0.8,\r\n            }}\r\n          >\r\n            <motion.div\r\n              style={{\r\n                x: shouldBeExpanded ? logoMoveX : 0,\r\n                y: shouldBeExpanded ? logoMoveY : 0,\r\n                width: `${logoSize}px`,\r\n                height: `${logoSize}px`,\r\n              }}\r\n              className=\"relative\"\r\n            >\r\n              <Image\r\n                src={logo}\r\n                alt=\"Logo\"\r\n                fill\r\n                className=\"object-contain\"\r\n                quality={100}\r\n                sizes={`${logoSize}px`}\r\n              />\r\n            </motion.div>\r\n          </motion.div>\r\n\r\n          {/* Compact state title */}\r\n          {isTitleVisible() && (\r\n            <motion.div\r\n              className=\"absolute font-bold text-center\"\r\n              style={{\r\n                transform: \"translateZ(40px)\",\r\n                transformStyle: \"preserve-3d\",\r\n                width: \"calc(100% - 1rem)\",\r\n                left: \"0.5rem\",\r\n                right: \"0.5rem\",\r\n                top: getCollapsedTitlePosition(),\r\n                zIndex: 30,\r\n                color: textColor,\r\n              }}\r\n              initial={{\r\n                opacity: 1,\r\n                y: 0,\r\n              }}\r\n              animate={{\r\n                opacity: shouldBeExpanded ? 0 : 1,\r\n                y: shouldBeExpanded ? -20 : 0,\r\n              }}\r\n              transition={{\r\n                type: \"spring\",\r\n                stiffness: 500,\r\n                damping: 30,\r\n                mass: 0.7,\r\n              }}\r\n            >\r\n              <h2 className=\"drop-shadow-lg text-sm leading-tight overflow-hidden text-ellipsis\">\r\n                {title}\r\n              </h2>\r\n            </motion.div>\r\n          )}\r\n\r\n          <motion.div\r\n            className=\"absolute text-center\"\r\n            style={{\r\n              transform: \"translateZ(40px)\",\r\n              transformStyle: \"preserve-3d\",\r\n              width: \"calc(100% - 2rem)\",\r\n              left: \"1rem\",\r\n              top: \"65%\",\r\n              zIndex: 30,\r\n              color: textColor,\r\n            }}\r\n            initial={{\r\n              opacity: 0,\r\n              y: 20,\r\n            }}\r\n            animate={{\r\n              opacity: shouldBeExpanded ? 1 : 0,\r\n              y: shouldBeExpanded ? 0 : 20,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 450,\r\n              damping: 28,\r\n              mass: 0.8,\r\n            }}\r\n          >\r\n            <motion.div\r\n              style={{\r\n                x: shouldBeExpanded ? textMoveX : 0,\r\n                y: shouldBeExpanded ? textMoveY : 0,\r\n              }}\r\n              className=\"flex flex-col items-center justify-center h-full\"\r\n            >\r\n              {children}\r\n            </motion.div>\r\n          </motion.div>\r\n\r\n          {/* Main character image */}\r\n          <motion.div\r\n            className=\"absolute\"\r\n            style={{\r\n              transform: \"translateZ(20px)\",\r\n              transformStyle: \"preserve-3d\",\r\n              left: `calc(50% - ${HALF_IMAGE_SIZE}px)`,\r\n              top: `calc(50% - ${HALF_IMAGE_SIZE + 21}px)`,\r\n              width: `${IMAGE_SIZE}px`,\r\n              height: `${IMAGE_SIZE}px`,\r\n              zIndex: 20,\r\n            }}\r\n            initial={{\r\n              opacity: 0,\r\n              scale: 0.8,\r\n            }}\r\n            animate={{\r\n              opacity: shouldBeExpanded ? 1 : 0,\r\n              scale: shouldBeExpanded ? 1 : 0.8,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 500,\r\n              damping: 30,\r\n              mass: 0.6,\r\n            }}\r\n          >\r\n            <div\r\n              className=\"relative\"\r\n              style={{\r\n                width: `${IMAGE_SIZE}px`,\r\n                height: `${IMAGE_SIZE}px`,\r\n              }}\r\n            >\r\n              <Image\r\n                src={mainImage}\r\n                alt=\"Character\"\r\n                fill\r\n                quality={100}\r\n                className=\"object-contain mask-b-from-25\"\r\n                sizes={`${IMAGE_SIZE}px`}\r\n              />\r\n            </div>\r\n            {/* Glow effect */}\r\n            <div\r\n              className=\"blur-xl absolute right-0 top-1 rounded-full -z-10\"\r\n              style={{\r\n                backgroundColor: glowGradient,\r\n                width: `${IMAGE_SIZE}px`,\r\n                height: `${IMAGE_SIZE}px`,\r\n              }}\r\n            />\r\n          </motion.div>\r\n\r\n          {/* Light reflection effect */}\r\n          <motion.div\r\n            className=\"absolute inset-0 rounded-md\"\r\n            style={{\r\n              background:\r\n                \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, transparent 30%, transparent 70%, rgba(255,255,255,0.03) 100%)\",\r\n              zIndex: 5,\r\n            }}\r\n            animate={{\r\n              opacity: shouldBeExpanded ? 0.4 : 0.2,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 300,\r\n              damping: 25,\r\n            }}\r\n          />\r\n        </motion.div>\r\n      </motion.div>\r\n\r\n      {/* Bottom glow effect */}\r\n      <motion.div\r\n        className=\"absolute left-1/2 transform -translate-x-1/2 pointer-events-none\"\r\n        style={{\r\n          bottom: shouldBeExpanded\r\n            ? `${-20 - (height.expanded - height.collapsed)}px`\r\n            : \"-20px\",\r\n          width: \"180px\",\r\n          height: \"25px\",\r\n          zIndex: -1,\r\n        }}\r\n        initial={{\r\n          opacity: 0,\r\n          scale: 1,\r\n        }}\r\n        animate={{\r\n          opacity: shouldBeExpanded ? 0.25 : 0,\r\n          scale: shouldBeExpanded ? 1.2 : 1,\r\n        }}\r\n        transition={{\r\n          type: \"spring\",\r\n          stiffness: 250,\r\n          damping: 30,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"w-full h-full\"\r\n          style={{\r\n            background: `radial-gradient(ellipse 100% 100% at 50% 0%, ${glowColor} 0%, rgba(255, 20, 147, 0.03) 30%, rgba(255, 165, 0, 0.01) 60%, transparent 100%)`,\r\n            filter: \"blur(8px)\",\r\n          }}\r\n        />\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ui/3d-layered-card.tsx"
    }
  ]
}