{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glow-card-demo",
  "type": "registry:example",
  "title": "Glow Card Demo",
  "description": "Example showing a glow card.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "..",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://nyxui.vercel.app/r/glow-card.json"
  ],
  "files": [
    {
      "path": "registry/example/glow-card-demo.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\";\nimport { Cloud, Star, Target, Waves, Wifi } from \"lucide-react\";\nimport { GlowCard } from \"../ui/glow-card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function GlowCardDemo() {\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center mx-auto\">\n      <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8\">\n            <GlowCard variant=\"cosmic\" intensity={1.2} className=\"h-56 shadow-gray-500/30 shadow-lg border\">\n              <div className=\"space-y-3\">\n                <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30\">\n                  <Cloud className=\"w-3 h-3 mr-1\" />\n                  Cosmic\n                </Badge>\n                <div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">Cosmic Field</h3>\n                  <p className=\"text-slate-300 text-xs\">Stars, nebula gas, and cosmic dust particles.</p>\n                </div>\n                <Button size=\"sm\" className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\">\n                  Explore\n                </Button>\n              </div>\n            </GlowCard>\n\n            <GlowCard variant=\"glitch\" intensity={1.3} className=\"h-56 shadow-gray-500/30 shadow-lg\">\n              <div className=\"space-y-3\">\n                <Badge className=\"bg-pink-500/20 text-pink-300 border-pink-500/30\">\n                  <Wifi className=\"w-3 h-3 mr-1\" />\n                  Glitch\n                </Badge>\n                <div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">Digital Glitch</h3>\n                  <p className=\"text-slate-300 text-xs\">Corrupted digital effects with scan lines.</p>\n                </div>\n                <Button size=\"sm\" className=\"w-full bg-pink-600 hover:bg-pink-700 text-white\">\n                  Corrupt\n                </Button>\n              </div>\n            </GlowCard>\n\n            <GlowCard variant=\"liquid\" liquidColor=\"#f59e0b\" intensity={1.0} className=\"h-56 shadow-gray-500/30 shadow-lg\">\n              <div className=\"space-y-3\">\n                <Badge className=\"bg-amber-500/20 text-amber-300 border-amber-500/30\">\n                  <Waves className=\"w-3 h-3 mr-1\" />\n                  Liquid\n                </Badge>\n                <div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">Liquid Gold</h3>\n                  <p className=\"text-slate-300 text-xs\">Smooth liquid effects with click ripples.</p>\n                </div>\n                <Button size=\"sm\" className=\"w-full bg-amber-600 hover:bg-amber-700 text-white\">\n                  Flow\n                </Button>\n              </div>\n            </GlowCard>\n            <GlowCard variant=\"laser\" intensity={1.2} className=\"h-56 shadow-gray-500/30 shadow-lg\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge className=\"bg-red-500/20 text-red-300 border-red-500/30\">\n                    <Target className=\"w-3 h-3 mr-1\" />\n                    Precision\n                  </Badge>\n                  <div className=\"flex\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">Laser Targeting</h3>\n                  <p className=\"text-slate-300 text-sm\">\n                    High-precision crosshair laser.\n                  </p>\n                </div>\n                <Button size=\"sm\" className=\"w-full bg-red-600 hover:bg-red-700 text-white\">\n                  Corrupt\n                </Button>\n              </div>\n            </GlowCard>\n          </div>\n        </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/glow-card-demo.tsx"
    },
    {
      "path": "components/ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-xl text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background text-foreground shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        rainbow:\n          \"group relative animate-rainbow cursor-pointer border-0 bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] bg-[length:200%] text-primary-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))] dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n        \"rainbow-outline\":\n          \"group relative animate-rainbow cursor-pointer border-0 border-input bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] bg-[length:200%] px-4 text-foreground shadow-sm [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))] dark:bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-xl px-3 text-xs\",\n        lg: \"h-11 rounded-xl px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ninterface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        data-slot=\"button\"\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants, type ButtonProps };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}