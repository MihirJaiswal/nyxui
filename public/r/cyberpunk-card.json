{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cyberpunk-card",
  "type": "registry:ui",
  "title": "Cyberpunk Card",
  "description": "A card component with a cyberpunk aesthetic. Features neon colors and a futuristic design.",
  "dependencies": [
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/cyberpunk-card.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { cn } from \"../../lib/utils\"\n\nexport interface CyberpunkCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  theme?:\n    | \"neon-blue\"\n    | \"neon-pink\"\n    | \"neon-green\"\n    | \"neon-orange\"\n    | \"neon-purple\"\n    | \"neon-cyan\"\n    | \"neon-red\"\n    | \"matrix-green\"\n    | \"cyber-red\"\n    | \"hologram\"\n    | \"custom\"\n  customColors?: {\n    primary: string\n    secondary: string\n    accent: string\n  }\n  borderStyle?: \"solid\" | \"dashed\" | \"glitch\" | \"corners\" | \"animated\" | \"circuit\"\n  colorShift?: boolean\n  lightTrail?: boolean\n  rounded?: \"none\" | \"sm\" | \"md\" | \"lg\"\n  glow?: boolean\n  glowIntensity?: 1 | 2 | 3 | 4 | 5\n  backgroundEffect?: \"none\" | \"circuit\" | \"matrix\" | \"scanlines\" | \"particles\" | \"waves\"\n  pulseAnimation?: boolean\n  glitchEffect?: boolean\n  hologramFlicker?: boolean\n  dataStream?: boolean\n  loading?: boolean\n  animationSpeed?: \"slow\" | \"normal\" | \"fast\"\n  children: React.ReactNode\n}\n\nconst MatrixRain = () => {\n  const [columns, setColumns] = useState<\n    Array<{\n      id: number\n      characters: Array<{\n        char: string\n        opacity: number\n        isLeading: boolean\n      }>\n      x: number\n      speed: number\n      height: number\n    }>\n  >([])\n\n  useEffect(() => {\n    const matrixChars =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン\"\n\n    const createColumn = (x: number) => ({\n      id: Math.random(),\n      x,\n      speed: Math.random() * 3 + 1,\n      height: Math.floor(Math.random() * 15) + 5,\n      characters: Array.from({ length: Math.floor(Math.random() * 15) + 5 }, (_, i) => ({\n        char: matrixChars[Math.floor(Math.random() * matrixChars.length)],\n        opacity: Math.max(0, 1 - i * 0.15),\n        isLeading: i === 0,\n      })),\n    })\n\n    const initialColumns = Array.from({ length: 12 }, (_, i) => createColumn(i * 8.33 + Math.random() * 2))\n    setColumns(initialColumns)\n\n    const interval = setInterval(() => {\n      setColumns((prevColumns) =>\n        prevColumns.map((column) => {\n          const newY = (column.speed * 2) % 120\n          const updatedCharacters = column.characters.map((char, i) => ({\n            ...char,\n            char: Math.random() < 0.1 ? matrixChars[Math.floor(Math.random() * matrixChars.length)] : char.char,\n            opacity: Math.max(0, 1 - i * 0.12),\n          }))\n\n          return {\n            ...column,\n            characters: updatedCharacters,\n            speed: column.speed + 0.1,\n          }\n        }),\n      )\n    }, 100)\n\n    const resetInterval = setInterval(() => {\n      setColumns((prevColumns) => prevColumns.map((column) => (column.speed > 50 ? createColumn(column.x) : column)))\n    }, 3000)\n\n    return () => {\n      clearInterval(interval)\n      clearInterval(resetInterval)\n    }\n  }, [])\n\n  return (\n    <div className=\"absolute inset-0 font-mono text-xs\">\n      {columns.map((column, columnIndex) => (\n        <div\n          key={column.id}\n          className=\"absolute top-0 flex flex-col\"\n          style={{\n            left: `${column.x}%`,\n            transform: `translateY(${((column.speed * 2) % 120) - 20}%)`,\n            filter: \"drop-shadow(0 0 3px currentColor)\",\n          }}\n        >\n          {column.characters.map((char, charIndex) => (\n            <div\n              key={charIndex}\n              className={cn(\n                \"leading-tight transition-all duration-100\",\n                char.isLeading ? \"text-white font-bold\" : \"text-green-400\",\n              )}\n              style={{\n                opacity: char.opacity,\n                textShadow: char.isLeading ? \"0 0 10px #00ff00, 0 0 20px #00ff00, 0 0 30px #00ff00\" : \"0 0 5px #00ff00\",\n                fontSize: char.isLeading ? \"0.9rem\" : \"0.75rem\",\n              }}\n            >\n              {char.char}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport const CyberpunkCard = ({\n  theme = \"neon-blue\",\n  customColors,\n  borderStyle = \"solid\",\n  colorShift = true,\n  lightTrail = true,\n  rounded = \"md\",\n  glow = true,\n  glowIntensity = 3,\n  backgroundEffect = \"none\",\n  pulseAnimation = false,\n  glitchEffect = false,\n  hologramFlicker = false,\n  dataStream = false,\n  loading = false,\n  animationSpeed = \"normal\",\n  className,\n  children,\n  ...props\n}: CyberpunkCardProps) => {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })\n  const [isHovered, setIsHovered] = useState(false)\n  const [isClicked, setIsClicked] = useState(false)\n  const [colorPhase, setColorPhase] = useState(0)\n  const [glitchPhase, setGlitchPhase] = useState(0)\n  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number; opacity: number }>>([])\n\n  const speedMultiplier = {\n    slow: 0.5,\n    normal: 1,\n    fast: 2,\n  }[animationSpeed]\n\n  useEffect(() => {\n    if (!colorShift && !glitchEffect) return\n\n    const interval = setInterval(() => {\n      if (colorShift) {\n        setColorPhase((prev) => (prev + 1 * speedMultiplier) % 100)\n      }\n      if (glitchEffect && isHovered) {\n        setGlitchPhase((prev) => (prev + 1) % 10)\n      }\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [colorShift, glitchEffect, isHovered, speedMultiplier])\n\n  useEffect(() => {\n    if (backgroundEffect === \"particles\" && isHovered) {\n      const interval = setInterval(() => {\n        const newParticle = {\n          id: Date.now() + Math.random(),\n          x: Math.random() * 100,\n          y: Math.random() * 100,\n          opacity: 1,\n        }\n        setParticles((prev) => [...prev.slice(-20), newParticle])\n\n        setTimeout(() => {\n          setParticles((prev) => prev.filter((p) => p.id !== newParticle.id))\n        }, 2000)\n      }, 100)\n\n      return () => clearInterval(interval)\n    }\n  }, [backgroundEffect, isHovered])\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!lightTrail) return\n    const rect = e.currentTarget.getBoundingClientRect()\n    setMousePosition({\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    })\n  }\n\n  const handleMouseEnter = () => {\n    setIsHovered(true)\n  }\n\n  const handleMouseLeave = () => {\n    setIsHovered(false)\n    setParticles([])\n  }\n\n  const handleClick = () => {\n    setIsClicked(true)\n    setTimeout(() => setIsClicked(false), 200)\n  }\n\n  const themeColors = {\n    \"neon-blue\": {\n      primary: \"from-blue-500 via-cyan-400 to-blue-600\",\n      secondary: \"from-blue-600 via-cyan-500 to-blue-700\",\n      accent: \"bg-cyan-400\",\n      text: \"text-cyan-50\",\n      glow: \"shadow-cyan-500/50\",\n      border: \"border-cyan-400\",\n    },\n    \"neon-pink\": {\n      primary: \"from-pink-500 via-fuchsia-400 to-pink-600\",\n      secondary: \"from-pink-600 via-fuchsia-500 to-pink-700\",\n      accent: \"bg-fuchsia-400\",\n      text: \"text-pink-50\",\n      glow: \"shadow-fuchsia-500/50\",\n      border: \"border-fuchsia-400\",\n    },\n    \"neon-green\": {\n      primary: \"from-green-500 via-emerald-400 to-green-600\",\n      secondary: \"from-green-600 via-emerald-500 to-green-700\",\n      accent: \"bg-emerald-400\",\n      text: \"text-green-50\",\n      glow: \"shadow-emerald-500/50\",\n      border: \"border-emerald-400\",\n    },\n    \"neon-orange\": {\n      primary: \"from-orange-500 via-amber-400 to-orange-600\",\n      secondary: \"from-orange-600 via-amber-500 to-orange-700\",\n      accent: \"bg-amber-400\",\n      text: \"text-orange-50\",\n      glow: \"shadow-amber-500/50\",\n      border: \"border-amber-400\",\n    },\n    \"neon-purple\": {\n      primary: \"from-purple-600 via-violet-500 to-purple-700\",\n      secondary: \"from-purple-700 via-violet-600 to-purple-800\",\n      accent: \"bg-violet-400\",\n      text: \"text-purple-50\",\n      glow: \"shadow-violet-500/50\",\n      border: \"border-violet-400\",\n    },\n    \"neon-cyan\": {\n      primary: \"from-cyan-500 via-teal-400 to-cyan-600\",\n      secondary: \"from-cyan-600 via-teal-500 to-cyan-700\",\n      accent: \"bg-teal-400\",\n      text: \"text-cyan-50\",\n      glow: \"shadow-teal-500/50\",\n      border: \"border-teal-400\",\n    },\n    \"neon-red\": {\n      primary: \"from-red-500 via-rose-400 to-red-600\",\n      secondary: \"from-red-600 via-rose-500 to-red-700\",\n      accent: \"bg-rose-400\",\n      text: \"text-red-50\",\n      glow: \"shadow-rose-500/50\",\n      border: \"border-rose-400\",\n    },\n    \"matrix-green\": {\n      primary: \"from-green-400 via-lime-300 to-green-500\",\n      secondary: \"from-green-500 via-lime-400 to-green-600\",\n      accent: \"bg-lime-400\",\n      text: \"text-green-50\",\n      glow: \"shadow-lime-500/50\",\n      border: \"border-lime-400\",\n    },\n    \"cyber-red\": {\n      primary: \"from-red-500 via-rose-400 to-red-600\",\n      secondary: \"from-red-600 via-rose-500 to-red-700\",\n      accent: \"bg-rose-400\",\n      text: \"text-red-50\",\n      glow: \"shadow-rose-500/50\",\n      border: \"border-rose-400\",\n    },\n    hologram: {\n      primary: \"from-cyan-300 via-blue-400 to-purple-500\",\n      secondary: \"from-purple-500 via-pink-400 to-cyan-300\",\n      accent: \"bg-cyan-300\",\n      text: \"text-cyan-50\",\n      glow: \"shadow-cyan-300/50\",\n      border: \"border-cyan-300\",\n    },\n    custom: {\n      primary: \"\",\n      secondary: \"\",\n      accent: \"\",\n      text: \"text-gray-50\",\n      glow: \"\",\n      border: \"\",\n    },\n  }\n\n  const currentTheme = themeColors[theme]\n\n  // Fixed: Add proper null checking for customColors\n  const customStyles =\n    theme === \"custom\" && customColors\n      ? {\n          background: `linear-gradient(to bottom right, ${customColors.primary}, ${customColors.secondary})`,\n          borderColor: customColors.accent,\n          boxShadow: glow\n            ? `0 20px 25px -5px ${customColors.primary}50, 0 10px 10px -5px ${customColors.primary}40`\n            : undefined,\n        }\n      : {}\n\n  const borderStyles = {\n    solid: \"border-2\",\n    dashed: \"border-2 border-dashed\",\n    glitch: `border-2 ${glitchPhase % 3 === 0 ? \"border-dashed\" : glitchPhase % 3 === 1 ? \"border-dotted\" : \"border-solid\"}`,\n    corners:\n      \"border-0 before:content-[''] before:absolute before:w-8 before:h-8 before:border-t-2 before:border-l-2 before:top-0 before:left-0 after:content-[''] after:absolute after:w-8 after:h-8 after:border-b-2 after:border-r-2 after:bottom-0 after:right-0\",\n    animated:\n      \"border-2 before:content-[''] before:absolute before:inset-0 before:border-2 before:border-current before:animate-pulse before:rounded-[inherit] before:pointer-events-none\",\n    circuit:\n      \"border-2 border-dashed before:content-[''] before:absolute before:inset-0 before:border-2 before:border-dotted before:border-current before:animate-ping before:rounded-[inherit] before:pointer-events-none before:opacity-75\",\n  }\n\n  const roundedStyles = {\n    none: \"rounded-none\",\n    sm: \"rounded-sm\",\n    md: \"rounded-md\",\n    lg: \"rounded-lg\",\n  }\n\n  const glowIntensityStyles = {\n    1: \"shadow-md\",\n    2: \"shadow-lg\",\n    3: \"shadow-xl\",\n    4: \"shadow-2xl\",\n    5: \"shadow-2xl drop-shadow-2xl\",\n  }\n\n  const getBackgroundPattern = () => {\n    // Fixed: Add proper null checking for customColors\n    const patternColor = theme === \"custom\" && customColors ? customColors.accent : \"currentColor\"\n\n    switch (backgroundEffect) {\n      case \"circuit\":\n        return (\n          <div className=\"absolute inset-0 opacity-20\">\n            <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\">\n              <defs>\n                <pattern id=\"circuit\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                  <path d=\"M 10,0 L 10,10 L 0,10\" stroke={patternColor} strokeWidth=\"0.5\" fill=\"none\" />\n                  <circle cx=\"10\" cy=\"10\" r=\"1\" fill={patternColor} />\n                </pattern>\n              </defs>\n              <rect width=\"100%\" height=\"100%\" fill=\"url(#circuit)\" />\n            </svg>\n          </div>\n        )\n      case \"matrix\":\n        return (\n          <div className=\"absolute inset-0 overflow-hidden opacity-40\">\n            <MatrixRain />\n          </div>\n        )\n      case \"scanlines\":\n        return (\n          <div className=\"absolute inset-0 opacity-20\">\n            <div\n              className=\"w-full h-full bg-gradient-to-b from-transparent via-current to-transparent bg-[length:100%_4px] animate-pulse\"\n              style={{ color: patternColor }}\n            />\n          </div>\n        )\n      case \"waves\":\n        return (\n          <div className=\"absolute inset-0 opacity-30 overflow-hidden\">\n            <div\n              className=\"absolute inset-0 bg-gradient-to-r from-transparent via-current to-transparent animate-pulse transform -skew-x-12\"\n              style={{ color: patternColor }}\n            />\n          </div>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative p-6 border transition-all duration-300 overflow-hidden cursor-pointer\",\n        theme !== \"custom\" && `bg-gradient-to-br ${currentTheme.primary}`,\n        borderStyles[borderStyle],\n        roundedStyles[rounded],\n        theme !== \"custom\" && currentTheme.border,\n        theme !== \"custom\" && glow && glowIntensityStyles[glowIntensity],\n        theme !== \"custom\" && glow && currentTheme.glow,\n        currentTheme.text,\n        pulseAnimation && \"before:animate-pulse\",\n        hologramFlicker && isHovered && \"animate-pulse\",\n        isClicked && \"scale-95\",\n        glitchEffect && isHovered && glitchPhase % 5 === 0 && \"transform skew-x-1\",\n        \"transform-gpu\",\n        className,\n      )}\n      style={{\n        ...customStyles,\n        borderColor:\n          colorShift && isHovered\n            ? `hsl(${(colorPhase * 3.6) % 360}, 100%, 70%)`\n            : theme === \"custom\" && customColors\n              ? customColors.accent\n              : undefined,\n        filter: hologramFlicker && isHovered ? `hue-rotate(${colorPhase * 3.6}deg)` : undefined,\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n      {...props}\n    >\n      {getBackgroundPattern()}\n\n      {/* Particles Effect */}\n      {backgroundEffect === \"particles\" &&\n        particles.map((particle) => (\n          <div\n            key={particle.id}\n            className=\"absolute w-1 h-1 rounded-full animate-ping\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              opacity: particle.opacity,\n              backgroundColor: theme === \"custom\" && customColors ? customColors.accent : \"currentColor\",\n            }}\n          />\n        ))}\n\n      {/* Light Trail */}\n      {lightTrail && isHovered && (\n        <div\n          className=\"absolute w-32 h-32 rounded-full blur-xl pointer-events-none transition-all duration-300\"\n          style={{\n            left: mousePosition.x - 64,\n            top: mousePosition.y - 64,\n            opacity: 0.6,\n            background: `radial-gradient(circle, ${\n              theme === \"custom\" && customColors ? customColors.accent : currentTheme.accent.replace(\"bg-\", \"\")\n            } 0%, transparent 70%)`,\n          }}\n        />\n      )}\n\n      {dataStream && (\n        <div\n          className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-current to-transparent animate-pulse\"\n          style={{ color: theme === \"custom\" && customColors ? customColors.accent : \"currentColor\" }}\n        />\n      )}\n\n      {loading && (\n        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n          <div className=\"flex space-x-1\">\n            {[...Array(3)].map((_, i) => (\n              <div\n                key={i}\n                className=\"w-2 h-2 rounded-full animate-bounce\"\n                style={{\n                  backgroundColor: theme === \"custom\" && customColors ? customColors.accent : \"currentColor\",\n                  animationDelay: `${i * 0.1}s`,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div\n        className={cn(\n          \"relative z-10 transition-all duration-300\",\n          glitchEffect && isHovered && glitchPhase % 7 === 0 && \"transform translate-x-1\",\n        )}\n      >\n        {children}\n      </div>\n\n      <div\n        className={cn(\n          \"absolute -bottom-2 -right-2 w-16 h-16 transform rotate-45 opacity-70 transition-all duration-300\",\n          theme !== \"custom\" && currentTheme.accent,\n          isHovered && \"scale-110 opacity-90\",\n        )}\n        style={{\n          backgroundColor: theme === \"custom\" && customColors ? customColors.accent : undefined,\n        }}\n      />\n\n      <div\n        className=\"absolute top-0 left-0 w-8 h-8 border-t-2 border-l-2 opacity-50\"\n        style={{ borderColor: theme === \"custom\" && customColors ? customColors.accent : \"currentColor\" }}\n      />\n\n      <div\n        className=\"absolute bottom-0 right-0 w-8 h-8 border-b-2 border-r-2 opacity-50\"\n        style={{ borderColor: theme === \"custom\" && customColors ? customColors.accent : \"currentColor\" }}\n      />\n\n      {isHovered && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-transparent pointer-events-none\" />\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ui/cyberpunk-card.tsx"
    }
  ]
}