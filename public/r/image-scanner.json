{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-scanner",
  "type": "registry:ui",
  "title": "Image Scanner",
  "description": "A image scanner component that allows users to scan images.",
  "dependencies": [
    "motion",
    "framer-motion",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ui/image-scanner.tsx",
      "content": "\"use client\"\nimport { useState, useEffect, useRef, useCallback } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\nimport Image from \"next/image\"\nimport { Activity, CheckCircle } from \"lucide-react\"\n\nexport interface ImageScannerProps {\n  image: string\n  alt?: string\n  scanSpeed?: number\n  scanColor?: \"emerald\" | \"blue\" | \"purple\" | \"amber\" | \"red\" | \"cyan\" | \"pink\"\n  scanType?: \"default\" | \"grid\" | \"radar\" | \"pulse\" | \"wave\" | \"matrix\"\n  className?: string\n  onScanComplete?: (results?: ScanResult[]) => void\n  autoScan?: boolean\n  scanDelay?: number\n  scanAtScroll?: boolean\n  showDataOverlay?: boolean\n  showProgress?: boolean\n  scanIntensity?: \"low\" | \"medium\" | \"high\" | \"extreme\"\n  showScanResults?: boolean\n  loop?: boolean\n  scanResults?: ScanResult[]\n  triggerScan?: boolean\n  disableClickToScan?: boolean\n}\n\ninterface ScanResult {\n  id: string\n  type: \"object\" | \"anomaly\" | \"data\" | \"threat\"\n  confidence: number\n  position: { x: number; y: number }\n  label: string\n}\n\nexport const ImageScanner = ({\n  image,\n  alt = \"Scanning image\",\n  scanSpeed = 2,\n  scanColor = \"emerald\",\n  scanType = \"default\",\n  className,\n  onScanComplete,\n  autoScan = false,\n  scanDelay = 0,\n  scanAtScroll = false,\n  showDataOverlay = true,\n  showProgress = true,\n  scanIntensity = \"medium\",\n  showScanResults = true,\n  loop = false,\n  scanResults: externalScanResults,\n  triggerScan,\n  disableClickToScan = false,\n}: ImageScannerProps) => {\n  const [isScanning, setIsScanning] = useState(false)\n  const [scanComplete, setScanComplete] = useState(false)\n  const [hasScanned, setHasScanned] = useState(false)\n  const [scanCycle, setScanCycle] = useState(0)\n  const [progress, setProgress] = useState(0)\n  const [scanResults, setScanResults] = useState<ScanResult[]>([])\n  const [currentPhase, setCurrentPhase] = useState<string>(\"Initializing\")\n  const [showIndicators, setShowIndicators] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n  const scanTimer = useRef<NodeJS.Timeout | null>(null)\n  const completeTimer = useRef<NodeJS.Timeout | null>(null)\n  const progressTimer = useRef<NodeJS.Timeout | null>(null)\n  const loopTimer = useRef<NodeJS.Timeout | null>(null)\n\n  const colorMap = {\n    emerald: {\n      scan: \"bg-emerald-500\",\n      glow: \"bg-emerald-500/20 dark:bg-emerald-500/10\",\n      border: \"border-emerald-500\",\n      gradient: \"from-emerald-500/80 to-emerald-300/40\",\n      cssColor: \"#10b981\",\n    },\n    blue: {\n      scan: \"bg-blue-500\",\n      glow: \"bg-blue-500/20 dark:bg-blue-500/10\",\n      border: \"border-blue-500\",\n      gradient: \"from-blue-500/80 to-blue-300/40\",\n      cssColor: \"#3b82f6\",\n    },\n    purple: {\n      scan: \"bg-purple-500\",\n      glow: \"bg-purple-500/20 dark:bg-purple-500/10\",\n      border: \"border-purple-500\",\n      gradient: \"from-purple-500/80 to-purple-300/40\",\n      cssColor: \"#8b5cf6\",\n    },\n    amber: {\n      scan: \"bg-amber-500\",\n      glow: \"bg-amber-500/20 dark:bg-amber-500/10\",\n      border: \"border-amber-500\",\n      gradient: \"from-amber-500/80 to-amber-300/40\",\n      cssColor: \"#f59e0b\",\n    },\n    red: {\n      scan: \"bg-red-500\",\n      glow: \"bg-red-500/20 dark:bg-red-500/10\",\n      border: \"border-red-500\",\n      gradient: \"from-red-500/80 to-red-300/40\",\n      cssColor: \"#ef4444\",\n    },\n    cyan: {\n      scan: \"bg-cyan-500\",\n      glow: \"bg-cyan-500/20 dark:bg-cyan-500/10\",\n      border: \"border-cyan-500\",\n      gradient: \"from-cyan-500/80 to-cyan-300/40\",\n      cssColor: \"#06b6d4\",\n    },\n    pink: {\n      scan: \"bg-pink-500\",\n      glow: \"bg-pink-500/20 dark:bg-pink-500/10\",\n      border: \"border-pink-500\",\n      gradient: \"from-pink-500/80 to-pink-300/40\",\n      cssColor: \"#ec4899\",\n    },\n  }\n\n  const intensityMap = {\n    low: { glowIntensity: 0.3, scanLines: 1 },\n    medium: { glowIntensity: 0.6, scanLines: 2 },\n    high: { glowIntensity: 0.8, scanLines: 3 },\n    extreme: { glowIntensity: 1.0, scanLines: 5 },\n  }\n\n  const phases = [\n    \"Initializing Scanner\",\n    \"Analyzing Structure\",\n    \"Processing Data\",\n    \"Identifying Objects\",\n    \"Finalizing Results\",\n  ]\n\n  const generateScanResults = useCallback((): ScanResult[] => {\n    if (externalScanResults) return externalScanResults\n\n    const results: ScanResult[] = []\n    const resultTypes = [\"object\", \"anomaly\", \"data\", \"threat\"] as const\n    const labels = {\n      object: [\"Person\", \"Vehicle\", \"Building\", \"Equipment\"],\n      anomaly: [\"Unknown Signal\", \"Interference\", \"Distortion\"],\n      data: [\"Metadata\", \"Timestamp\", \"Location Data\"],\n      threat: [\"Security Risk\", \"Unauthorized Access\", \"Suspicious Activity\"],\n    }\n\n    for (let i = 0; i < Math.floor(Math.random() * 5) + 2; i++) {\n      const type = resultTypes[Math.floor(Math.random() * resultTypes.length)]\n      results.push({\n        id: `result-${i}`,\n        type,\n        confidence: Math.floor(Math.random() * 30) + 70,\n        position: {\n          x: Math.floor(Math.random() * 80) + 10,\n          y: Math.floor(Math.random() * 80) + 10,\n        },\n        label: labels[type][Math.floor(Math.random() * labels[type].length)],\n      })\n    }\n    return results\n  }, [externalScanResults])\n\n  const clearAllTimers = useCallback(() => {\n    if (scanTimer.current) {\n      clearTimeout(scanTimer.current)\n      scanTimer.current = null\n    }\n    if (completeTimer.current) {\n      clearTimeout(completeTimer.current)\n      completeTimer.current = null\n    }\n    if (progressTimer.current) {\n      clearInterval(progressTimer.current)\n      progressTimer.current = null\n    }\n    if (loopTimer.current) {\n      clearTimeout(loopTimer.current)\n      loopTimer.current = null\n    }\n  }, [])\n\n  const runScan = useCallback(() => {\n    if (isScanning) return\n\n    clearAllTimers()\n    setIsScanning(true)\n    setScanComplete(false)\n    setScanCycle((prev) => prev + 1)\n    setProgress(0)\n    setCurrentPhase(phases[0])\n    setScanResults([])\n    setShowIndicators(true)\n\n    // Progress simulation\n    if (showProgress) {\n      let currentProgress = 0\n      progressTimer.current = setInterval(() => {\n        currentProgress += Math.random() * 15 + 5\n        if (currentProgress >= 100) {\n          currentProgress = 100\n          if (progressTimer.current) {\n            clearInterval(progressTimer.current)\n            progressTimer.current = null\n          }\n        }\n        setProgress(currentProgress)\n      }, 200)\n    }\n\n    // Phase progression\n    phases.forEach((phase, index) => {\n      setTimeout(\n        () => {\n          setCurrentPhase(phase)\n        },\n        (scanSpeed * 1000 * index) / phases.length,\n      )\n    })\n\n    // Complete scan\n    completeTimer.current = setTimeout(() => {\n      setScanComplete(true)\n      setHasScanned(true)\n      const results = generateScanResults()\n      setScanResults(results)\n\n      if (onScanComplete) onScanComplete(results)\n\n      setTimeout(() => {\n        setScanComplete(false)\n        setIsScanning(false)\n        setShowIndicators(false)\n\n        if (progressTimer.current) {\n          clearInterval(progressTimer.current)\n          progressTimer.current = null\n        }\n\n        if (loop || autoScan) {\n          loopTimer.current = setTimeout(() => {\n            runScan()\n          }, 1000)\n        }\n      }, 2000)\n    }, scanSpeed * 1000)\n  }, [\n    isScanning,\n    scanSpeed,\n    phases,\n    showProgress,\n    generateScanResults,\n    onScanComplete,\n    loop,\n    autoScan,\n    clearAllTimers,\n  ])\n\n  // Intersection Observer for scroll trigger\n  useEffect(() => {\n    if (!scanAtScroll || !ref.current) return\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries\n        if (entry.isIntersecting && !hasScanned && !isScanning) {\n          runScan()\n        }\n      },\n      { threshold: 0.5 },\n    )\n    observer.observe(ref.current)\n    return () => observer.disconnect()\n  }, [scanAtScroll, hasScanned, isScanning, runScan])\n\n  // Auto scan effect\n  useEffect(() => {\n    if (autoScan && !isScanning) {\n      scanTimer.current = setTimeout(() => {\n        runScan()\n      }, scanDelay * 1000)\n    }\n    return () => {\n      if (scanTimer.current) {\n        clearTimeout(scanTimer.current)\n        scanTimer.current = null\n      }\n    }\n  }, [autoScan, scanDelay, runScan, isScanning])\n\n  // Trigger scan effect\n  useEffect(() => {\n    if (triggerScan && !isScanning) {\n      runScan()\n    }\n  }, [triggerScan, isScanning, runScan])\n\n  // Clean up all timers on unmount\n  useEffect(() => {\n    return () => {\n      clearAllTimers()\n    }\n  }, [clearAllTimers])\n\n  const selectedColor = colorMap[scanColor] || colorMap.emerald\n  const intensity = intensityMap[scanIntensity]\n\n  const renderScanPattern = () => {\n    const patterns = []\n    switch (scanType) {\n      case \"grid\":\n        for (let i = 0; i < intensity.scanLines; i++) {\n          patterns.push(\n            <motion.div\n              key={`grid-h-${i}-${scanCycle}`}\n              className={cn(\"absolute left-0 right-0 h-0.5\", selectedColor.scan)}\n              style={{ top: `${(i + 1) * (100 / (intensity.scanLines + 1))}%` }}\n              initial={{ opacity: 0, scaleX: 0 }}\n              animate={{ opacity: [0, 1, 0], scaleX: [0, 1, 0] }}\n              transition={{ duration: scanSpeed, delay: i * 0.2 }}\n            />,\n            <motion.div\n              key={`grid-v-${i}-${scanCycle}`}\n              className={cn(\"absolute top-0 bottom-0 w-0.5\", selectedColor.scan)}\n              style={{ left: `${(i + 1) * (100 / (intensity.scanLines + 1))}%` }}\n              initial={{ opacity: 0, scaleY: 0 }}\n              animate={{ opacity: [0, 1, 0], scaleY: [0, 1, 0] }}\n              transition={{ duration: scanSpeed, delay: i * 0.2 + 0.1 }}\n            />,\n          )\n        }\n        break\n      case \"radar\":\n        patterns.push(\n          <motion.div\n            key={`radar-sweep-${scanCycle}`}\n            className=\"absolute top-1/2 left-1/2 origin-left pointer-events-none\"\n            style={{\n              width: \"50%\",\n              height: \"2px\",\n              transformOrigin: \"left center\",\n              transform: \"translate(-50%, -50%)\",\n            }}\n            initial={{ rotate: 0 }}\n            animate={{\n               rotate: 380,\n               opacity: [1,1,1,1,0]\n              }}\n            transition={{\n              duration: scanSpeed,\n              ease: \"linear\",\n              repeat: 0,\n            }}\n          >\n            <div\n              className={cn(\"w-full h-full\", selectedColor.scan)}\n              style={{\n                background: `linear-gradient(to right, ${selectedColor.cssColor}, transparent)`,\n                boxShadow: `0 0 10px ${selectedColor.cssColor}`,\n              }}\n            />\n          </motion.div>,\n          <motion.div\n            key={`radar-center-${scanCycle}`}\n            className={cn(\n              \"absolute top-1/2 left-1/2 w-3 h-3 rounded-full transform -translate-x-1/2 -translate-y-1/2\",\n              selectedColor.scan,\n            )}\n            style={{\n              boxShadow: `0 0 8px ${selectedColor.cssColor}`,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0 }}\n            transition={{ duration: 0.3 }}\n          />,\n          <motion.div\n            key={`radar-ring1-${scanCycle}`}\n            className={cn(\n              \"absolute top-1/2 left-1/2 w-24 h-24 rounded-full border transform -translate-x-1/2 -translate-y-1/2\",\n              selectedColor.border,\n            )}\n            style={{\n              borderColor: `${selectedColor.cssColor}60`,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ opacity: 0.6, scale: 1 }}\n            exit={{ opacity: 0, scale: 0 }}\n            transition={{ duration: 0.5 }}\n          />,\n          <motion.div\n            key={`radar-ring2-${scanCycle}`}\n            className={cn(\n              \"absolute top-1/2 left-1/2 w-36 h-36 rounded-full border transform -translate-x-1/2 -translate-y-1/2\",\n              selectedColor.border,\n            )}\n            style={{\n              borderColor: `${selectedColor.cssColor}40`,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ opacity: 0.4, scale: 1 }}\n            exit={{ opacity: 0, scale: 0 }}\n            transition={{ duration: 0.7 }}\n          />,\n          <motion.div\n            key={`radar-ring3-${scanCycle}`}\n            className={cn(\n              \"absolute top-1/2 left-1/2 w-48 h-48 rounded-full border transform -translate-x-1/2 -translate-y-1/2\",\n              selectedColor.border,\n            )}\n            style={{\n              borderColor: `${selectedColor.cssColor}20`,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ opacity: 0.2, scale: 1 }}\n            exit={{ opacity: 0, scale: 0 }}\n            transition={{ duration: 0.9 }}\n          />,\n          <motion.div\n            key={`radar-trail-${scanCycle}`}\n            className=\"absolute top-1/2 left-1/2 origin-left pointer-events-none\"\n            style={{\n              width: \"50%\",\n              height: \"50%\",\n              transformOrigin: \"left center\",\n              transform: \"translate(-50%, -50%)\",\n              background: `conic-gradient(from 0deg, transparent, ${selectedColor.cssColor}20, transparent)`,\n              borderRadius: \"0 100% 100% 0\",\n            }}\n            initial={{ rotate: 0, opacity: 0.5 }}\n            animate={{ rotate: 360, opacity: 0.5 }}\n            transition={{\n              duration: scanSpeed,\n              ease: \"linear\",\n              repeat: 0,\n            }}\n          />,\n        )\n        break\n      case \"pulse\":\n        for (let i = 0; i < 3; i++) {\n          patterns.push(\n            <motion.div\n              key={`pulse-${i}-${scanCycle}`}\n              className={cn(\"absolute inset-0 border-2 rounded-full\", selectedColor.border)}\n              initial={{ scale: 0, opacity: 1 }}\n              animate={{ scale: [0, 1.5, 2], opacity: [1, 0.5, 0] }}\n              transition={{ duration: scanSpeed, delay: i * 0.3 }}\n            />,\n          )\n        }\n        break\n      case \"wave\":\n        patterns.push(\n          <motion.div\n            key={`wave-${scanCycle}`}\n            className={cn(\"absolute inset-0 bg-gradient-to-r\", selectedColor.gradient)}\n            initial={{ x: \"-100%\" }}\n            animate={{ x: \"100%\" }}\n            transition={{ duration: scanSpeed, ease: \"easeInOut\" }}\n          />,\n        )\n        break\n      case \"matrix\":\n        for (let i = 0; i < 12; i++) {\n          patterns.push(\n            <motion.div\n              key={`matrix-line-${i}-${scanCycle}`}\n              className=\"absolute top-0 bottom-0 w-0.5\"\n              style={{\n                left: `${(i * 100) / 12}%`,\n                background: `linear-gradient(to bottom, transparent, ${selectedColor.cssColor}, transparent)`,\n                boxShadow: `0 0 8px ${selectedColor.cssColor}`,\n              }}\n              initial={{ opacity: 0, scaleY: 0 }}\n              animate={{\n                opacity: [0, 1, 1, 0],\n                scaleY: [0, 1, 1, 1],\n              }}\n              transition={{\n                duration: scanSpeed,\n                delay: i * 0.15,\n                ease: \"easeInOut\",\n              }}\n            />,\n          )\n        }\n\n        for (let col = 0; col < 8; col++) {\n          patterns.push(\n            <motion.div\n              key={`matrix-cascade-${col}-${scanCycle}`}\n              className=\"absolute top-0 text-xs font-mono leading-tight\"\n              style={{\n                left: `${(col * 100) / 8 + 1}%`,\n                color: selectedColor.cssColor,\n                textShadow: `0 0 8px ${selectedColor.cssColor}`,\n                fontFamily: \"monospace\",\n              }}\n              initial={{ y: \"-100%\", opacity: 0 }}\n              animate={{\n                y: \"100%\",\n                opacity: [0, 1, 1, 0],\n              }}\n              transition={{\n                duration: scanSpeed * 1.2,\n                delay: col * 0.1,\n                ease: \"linear\",\n              }}\n            >\n              {Array.from({ length: 20 }, (_, row) => {\n                const chars = [\"0\", \"1\", \"ア\", \"カ\", \"サ\", \"タ\", \"ナ\", \"ハ\", \"マ\", \"ヤ\", \"ラ\", \"ワ\", \"0\", \"1\"]\n                const randomChar = chars[Math.floor(Math.random() * chars.length)]\n                return (\n                  <motion.div\n                    key={`char-${row}`}\n                    className=\"block\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: [0, 1, 0.7, 0] }}\n                    transition={{\n                      duration: 0.5,\n                      delay: row * 0.05,\n                      repeat: 0,\n                    }}\n                  >\n                    {randomChar}\n                  </motion.div>\n                )\n              })}\n            </motion.div>,\n          )\n        }\n\n        patterns.push(\n          <motion.div\n            key={`matrix-grid-${scanCycle}`}\n            className=\"absolute inset-0 pointer-events-none\"\n            style={{\n              backgroundImage: `\n                linear-gradient(90deg, ${selectedColor.cssColor}20 1px, transparent 1px),\n                linear-gradient(${selectedColor.cssColor}20 1px, transparent 1px)\n              `,\n              backgroundSize: \"20px 20px\",\n            }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: [0, 0.3, 0.3, 0] }}\n            transition={{\n              duration: scanSpeed,\n              ease: \"easeInOut\",\n            }}\n          />,\n        )\n\n        patterns.push(\n          <motion.div\n            key={`matrix-wave-${scanCycle}`}\n            className=\"absolute left-0 right-0 h-8\"\n            style={{\n              background: `linear-gradient(to bottom, transparent, ${selectedColor.cssColor}40, transparent)`,\n              boxShadow: `0 0 20px ${selectedColor.cssColor}60`,\n            }}\n            initial={{ top: \"-10%\", opacity: 0 }}\n            animate={{\n              top: \"110%\",\n              opacity: [0, 1, 1, 0],\n            }}\n            transition={{\n              duration: scanSpeed,\n              ease: \"linear\",\n            }}\n          />,\n        )\n        break\n        default: \n        // Single scanline moving from top to bottom\n        patterns.push(\n          <motion.div\n            key={`scanline-${scanCycle}`}\n            className={cn(\n              \"absolute left-0 right-0 h-1 pointer-events-none\",\n              selectedColor.scan,\n            )}\n            initial={{ top: 0, opacity: 0.7 }}\n            animate={{ top: \"100%\", opacity: 0.7 }}\n            transition={{ duration: scanSpeed, ease: \"linear\" }}\n          />,\n        )\n\n        // Corners\n        const corners = [\n          { position: \"top-0 left-0\", borders: \"border-t-2 border-l-2\" },\n          { position: \"top-0 right-0\", borders: \"border-t-2 border-r-2\" },\n          { position: \"bottom-0 left-0\", borders: \"border-b-2 border-l-2\" },\n          { position: \"bottom-0 right-0\", borders: \"border-b-2 border-r-2\" },\n        ]\n\n        corners.forEach((corner, index) => {\n          patterns.push(\n            <motion.div\n              key={`corner-${index}-${scanCycle}`}\n              className={cn(\n                \"absolute w-8 h-8 pointer-events-none\",\n                corner.position,\n                corner.borders,\n                selectedColor.border,\n              )}\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.5 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n            />,\n          )\n        })\n    }\n    return patterns\n  }\n\n  const startScan = () => {\n    if (!disableClickToScan) {\n      runScan()\n    }\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"relative overflow-hidden\", className, !disableClickToScan && \"cursor-pointer\")}\n      onClick={!disableClickToScan ? startScan : undefined}\n    >\n      <div\n        className={cn(\n          \"w-full h-full relative overflow-hidden transition-all duration-300\",\n          scanComplete ? \"ring-2 ring-offset-2 dark:ring-offset-gray-900\" : \"\",\n          scanComplete ? selectedColor.border : \"\",\n          isScanning ? \"backdrop-blur-sm\" : \"\",\n          isScanning ? \"brightness-110 contrast-110\" : \"\",\n        )}\n      >\n        <Image\n          src={image || \"/placeholder.svg\"}\n          alt={alt}\n          height={500}\n          width={500}\n          quality={100}\n          className={cn(\n            \"w-full h-full object-cover transition-all duration-300\",\n            isScanning ? \"hue-rotate-15 animate-pulse\" : \"\",\n          )}\n        />\n\n        {isScanning && (\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-blue-500/5 to-transparent animate-pulse\" />\n        )}\n\n        <AnimatePresence mode=\"wait\">{isScanning && renderScanPattern()}</AnimatePresence>\n        \n        {isScanning && (\n          <motion.div\n            className={cn(\"absolute inset-0 pointer-events-none\", selectedColor.glow)}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: intensity.glowIntensity }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.5 }}\n          />\n        )}\n\n        {showDataOverlay && showIndicators && (isScanning || scanComplete) && (\n          <motion.div\n            className=\"absolute top-4 left-4 right-4 text-xs font-mono text-white bg-black/60 p-2 rounded backdrop-blur-sm\"\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n          >\n            <div className=\"flex items-center gap-2 mb-1\">\n              <Activity className=\"w-3 h-3\" />\n              <span>SCANNER ACTIVE</span>\n            </div>\n            <div className=\"text-xs opacity-80\">\n              {isScanning && !scanComplete && `Phase: ${currentPhase}`}\n              {scanComplete && \"Analysis Complete\"}\n            </div>\n            {showProgress && isScanning && (\n              <div className=\"mt-2\">\n                <div className=\"flex justify-between text-xs mb-1\">\n                  <span>Progress</span>\n                  <span>{Math.round(progress)}%</span>\n                </div>\n                <div className=\"w-full bg-gray-700 rounded-full h-1\">\n                  <motion.div\n                    className={cn(\"h-1 rounded-full\", selectedColor.scan)}\n                    initial={{ width: 0 }}\n                    animate={{ width: `${progress}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            )}\n          </motion.div>\n        )}\n\n        {showScanResults && scanComplete && scanResults.length > 0 && (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            {scanResults.map((result) => (\n              <motion.div\n                key={result.id}\n                className=\"absolute\"\n                style={{\n                  left: `${result.position.x}%`,\n                  top: `${result.position.y}%`,\n                  transform: \"translate(-50%, -50%)\",\n                }}\n                initial={{ scale: 0, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0, opacity: 0 }}\n                transition={{ delay: 0.1 }}\n              >\n                <div className=\"relative\">\n                  <div\n                    className={cn(\n                      \"w-3 h-3 rounded-full border-2 animate-pulse\",\n                      result.type === \"threat\"\n                        ? \"border-red-500 bg-red-500/20\"\n                        : result.type === \"anomaly\"\n                          ? \"border-amber-500 bg-amber-500/20\"\n                          : result.type === \"data\"\n                            ? \"border-blue-500 bg-blue-500/20\"\n                            : \"border-emerald-500 bg-emerald-500/20\",\n                    )}\n                  />\n                  <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 text-xs font-mono text-white bg-black/80 px-2 py-1 rounded whitespace-nowrap\">\n                    {result.label}\n                    <div className=\"text-xs opacity-70\">{result.confidence}%</div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n\n        {(isScanning || scanComplete) && (\n          <motion.div\n            className=\"absolute bottom-4 right-4 flex items-center gap-2 text-xs font-mono text-white bg-black/60 px-3 py-1 rounded backdrop-blur-sm\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n          >\n            {isScanning && !scanComplete && (\n              <>\n                <motion.div\n                  className={cn(\"w-2 h-2 rounded-full\", selectedColor.scan)}\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 0.8, repeat: Number.POSITIVE_INFINITY }}\n                />\n                <span>SCANNING</span>\n              </>\n            )}\n            {scanComplete && (\n              <>\n                <CheckCircle className=\"w-3 h-3 text-emerald-400\" />\n                <span>COMPLETE</span>\n              </>\n            )}\n          </motion.div>\n        )}\n\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className={cn(\"absolute top-2 left-2 w-4 h-4 border-t-2 border-l-2 opacity-30\", selectedColor.border)} />\n          <div className={cn(\"absolute top-2 right-2 w-4 h-4 border-t-2 border-r-2 opacity-30\", selectedColor.border)} />\n          <div className={cn(\"absolute bottom-2 left-2 w-4 h-4 border-b-2 border-l-2 opacity-30\", selectedColor.border)} />\n          <div className={cn(\"absolute bottom-2 right-2 w-4 h-4 border-b-2 border-r-2 opacity-30\", selectedColor.border)} />\n        </div>\n\n        {isScanning && (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none\"\n            style={{\n              background: `repeating-linear-gradient(\n                0deg,\n                transparent,\n                transparent 2px,\n                ${selectedColor.cssColor}10 2px,\n                ${selectedColor.cssColor}10 4px\n              )`,\n            }}\n            animate={{\n              opacity: [0, 0.3, 0, 0.2, 0],\n              x: [0, 2, -2, 1, 0],\n            }}\n            transition={{\n              duration: 0.2,\n              repeat: Number.POSITIVE_INFINITY,\n              repeatType: \"reverse\",\n            }}\n          />\n        )}\n        \n        {autoScan && (\n          <motion.div\n            className=\"absolute top-2 left-2 flex items-center gap-1 text-xs font-mono text-white bg-black/60 px-2 py-1 rounded backdrop-blur-sm\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n          >\n            <motion.div\n              className={cn(\"w-2 h-2 rounded-full\", selectedColor.scan)}\n              animate={{ scale: [1, 1.2, 1] }}\n              transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY }}\n            />\n            <span>AUTO</span>\n            {loop && <span className=\"text-xs opacity-70\">∞</span>}\n          </motion.div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ui/image-scanner.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"https://nyxui.vercel.app\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}