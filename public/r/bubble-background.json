{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bubble-background",
  "type": "registry:ui",
  "title": "Bubble Background",
  "description": "An interactive fluid bubble background component with animated colorful blobs that respond to user interaction.",
  "dependencies": [],
  "files": [
    {
      "path": "registry/ui/bubble-background.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport type { CSSProperties } from \"react\";\n\ninterface BubblesProps {\n  bgColorA?: string;\n  bgColorB?: string;\n  bubbleColors?: {\n    colorA?: string;\n    colorB?: string;\n    colorC?: string;\n    colorD?: string;\n    colorE?: string;\n    interactive?: string;\n  };\n  blendMode?: CSSProperties[\"mixBlendMode\"];\n  bubbleSize?: string;\n}\n\nconst defaultBubbleColors = {\n  colorA: \"18, 113, 255\",\n  colorB: \"221, 74, 255\",\n  colorC: \"100, 220, 255\",\n  colorD: \"200, 50, 50\",\n  colorE: \"180, 180, 50\",\n  interactive: \"148, 100, 255\",\n};\n\nconst BubbleBackground: React.FC<BubblesProps> = ({\n  bgColorA = \"rgb(108, 0, 162)\",\n  bgColorB = \"rgb(0, 17, 82)\",\n  bubbleColors = defaultBubbleColors,\n  blendMode = \"hard-light\",\n  bubbleSize = \"80%\",\n}) => {\n  const interactiveRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    let curX = 0;\n    let curY = 0;\n    let tgX = 0;\n    let tgY = 0;\n    const easeFactor = 10;\n    let animationFrameId: number;\n\n    function move() {\n      if (!interactiveRef.current) return;\n\n      curX += (tgX - curX) / easeFactor;\n      curY += (tgY - curY) / easeFactor;\n\n      interactiveRef.current.style.transform = `translate(${curX}px, ${curY}px)`;\n      animationFrameId = requestAnimationFrame(move);\n    }\n\n    const handlePointerMove = (e: PointerEvent) => {\n      tgX = e.clientX;\n      tgY = e.clientY;\n    };\n\n    window.addEventListener(\"pointermove\", handlePointerMove);\n    animationFrameId = requestAnimationFrame(move);\n\n    return () => {\n      window.removeEventListener(\"pointermove\", handlePointerMove);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  // Calculate common positions\n  const centerTop = `calc(50% - ${bubbleSize} / 2)`;\n  const centerLeft = `calc(50% - ${bubbleSize} / 2)`;\n\n  return (\n    <div\n      className=\"w-screen h-screen relative overflow-hidden\"\n      style={{\n        background: `linear-gradient(40deg, ${bgColorA}, ${bgColorB})`,\n      }}\n    >\n      <svg className=\"absolute w-0 h-0\">\n        <filter id=\"goo\">\n          <feGaussianBlur\n            in=\"SourceGraphic\"\n            stdDeviation=\"10\"\n            result=\"blur\"\n          />\n          <feColorMatrix\n            in=\"blur\"\n            mode=\"matrix\"\n            values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\"\n            result=\"goo\"\n          />\n          <feBlend in=\"SourceGraphic\" in2=\"goo\" />\n        </filter>\n      </svg>\n\n      <div\n        className=\"w-full h-full\"\n        style={{\n          filter: \"url(#goo) blur(40px)\",\n        }}\n      >\n        <div\n          className=\"absolute\"\n          style={{\n            width: bubbleSize,\n            height: bubbleSize,\n            top: centerTop,\n            left: centerLeft,\n            background: `radial-gradient(circle at center, rgba(${bubbleColors.colorA}, 0.8) 0, rgba(${bubbleColors.colorA}, 0) 50%)`,\n            mixBlendMode: blendMode,\n            transformOrigin: \"center center\",\n            animation: \"bounceV 30s ease infinite\",\n          }}\n        />\n\n        <div\n          className=\"absolute\"\n          style={{\n            width: bubbleSize,\n            height: bubbleSize,\n            top: centerTop,\n            left: centerLeft,\n            background: `radial-gradient(circle at center, rgba(${bubbleColors.colorB}, 0.8) 0, rgba(${bubbleColors.colorB}, 0) 50%)`,\n            mixBlendMode: blendMode,\n            transformOrigin: \"calc(50% - 400px)\",\n            animation: \"moveInCircle 20s reverse infinite\",\n          }}\n        />\n\n        <div\n          className=\"absolute\"\n          style={{\n            width: bubbleSize,\n            height: bubbleSize,\n            top: `calc(50% - ${bubbleSize} / 2 + 200px)`,\n            left: `calc(50% - ${bubbleSize} / 2 - 500px)`,\n            background: `radial-gradient(circle at center, rgba(${bubbleColors.colorC}, 0.8) 0, rgba(${bubbleColors.colorC}, 0) 50%)`,\n            mixBlendMode: blendMode,\n            transformOrigin: \"calc(50% + 400px)\",\n            animation: \"moveInCircle 40s linear infinite\",\n          }}\n        />\n\n        <div\n          className=\"absolute\"\n          style={{\n            width: bubbleSize,\n            height: bubbleSize,\n            top: centerTop,\n            left: centerLeft,\n            background: `radial-gradient(circle at center, rgba(${bubbleColors.colorD}, 0.7) 0, rgba(${bubbleColors.colorD}, 0) 50%)`,\n            mixBlendMode: blendMode,\n            transformOrigin: \"calc(50% - 200px)\",\n            animation: \"bounceH 40s ease infinite\",\n          }}\n        />\n\n        <div\n          className=\"absolute\"\n          style={{\n            width: `calc(${bubbleSize} * 2)`,\n            height: `calc(${bubbleSize} * 2)`,\n            top: `calc(50% - ${bubbleSize})`,\n            left: `calc(50% - ${bubbleSize})`,\n            background: `radial-gradient(circle at center, rgba(${bubbleColors.colorE}, 0.8) 0, rgba(${bubbleColors.colorE}, 0) 50%)`,\n            mixBlendMode: blendMode,\n            transformOrigin: \"calc(50% - 800px) calc(50% + 200px)\",\n            animation: \"moveInCircle 20s ease infinite\",\n          }}\n        />\n\n        <div\n          ref={interactiveRef}\n          className=\"absolute w-full h-full\"\n          style={{\n            top: \"-50%\",\n            left: \"-50%\",\n            background: `radial-gradient(circle at center, rgba(${bubbleColors.interactive}, 0.7) 0, rgba(${bubbleColors.interactive}, 0) 50%)`,\n            mixBlendMode: blendMode,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BubbleBackground;",
      "type": "registry:ui",
      "target": "components/ui/bubble-background.tsx"
    }
  ],
  "cssVars": {
    "theme": {
      "animate-bounce-vertical": "bounceV 20s infinite ease-in-out",
      "animate-bounce-horizontal": "bounceH 30s infinite ease-in-out",
      "animate-move-in-circle": "moveInCircle 30s linear infinite"
    }
  },
  "css": {
    "@keyframes bounceV": {
      "0%, 100%": {
        "transform": "translateY(-50%)"
      },
      "50%": {
        "transform": "translateY(50%)"
      }
    },
    "@keyframes bounceH": {
      "0%, 100%": {
        "transform": "translateX(-50%) translateY(-10%)"
      },
      "50%": {
        "transform": "translateX(50%) translateY(10%)"
      }
    },
    "@keyframes moveInCircle": {
      "0%": {
        "transform": "rotate(0deg)"
      },
      "100%": {
        "transform": "rotate(360deg)"
      }
    }
  }
}